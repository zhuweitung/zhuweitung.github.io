<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>acme.sh不完全指南</title>
      <link href="/posts/1896637794/"/>
      <url>/posts/1896637794/</url>
      
        <content type="html"><![CDATA[<h2 id="安装acme-sh"><a class="header-anchor" href="#安装acme-sh"></a><a href="http://xn--acme-ke9g492u.sh">安装acme.sh</a></h2><p><a href="http://acme.sh">acme.sh</a> 的安装方式有很多种，我为了后期迁移方便就使用 docker 来安装。</p><h3 id="准备"><a class="header-anchor" href="#准备"></a>准备</h3><p>安装 docker、docker-compose</p><p>创建数据存放目录以及 docker-compose 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> acme.sh<br><span class="hljs-built_in">cd</span> acme.sh<br><span class="hljs-built_in">touch</span> docker-compose.yml<br></code></pre></td></tr></table></figure><h3 id="docker-compose"><a class="header-anchor" href="#docker-compose"></a>docker-compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">acme.sh:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">neilpang/acme.sh:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">acme.sh</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./:/acme.sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/certificate/:/certificate</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">daemon</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br></code></pre></td></tr></table></figure><h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> acme.sh --version<br></code></pre></td></tr></table></figure><h3 id="设置邮箱"><a class="header-anchor" href="#设置邮箱"></a>设置邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ACCOUNT_EMAIL=&#x27;YOUR_EMAIL&#x27;&quot;</span> &gt;&gt; ./account.conf<br></code></pre></td></tr></table></figure><h2 id="获取DNSPod-Token"><a class="header-anchor" href="#获取DNSPod-Token"></a>获取DNSPod Token</h2><ul><li><p>登录 DNSPod 后访问 <a href="https://console.dnspod.cn/account/token/token">API 密钥</a>，点击创建密钥</p></li><li><p>复制<code>ID</code>和<code>Token</code></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/02bc682174e05b3ae4f893b6dd5b711a.png" alt=""></p></li><li><p>将获取到的两个值写入到<code>./account.conf</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SAVED_DP_Id=&#x27;Id&#x27;&quot;</span> &gt;&gt; ./account.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SAVED_DP_Key=&#x27;Token&#x27;&quot;</span> &gt;&gt; ./account.conf<br></code></pre></td></tr></table></figure><h2 id="获取Cloudflare-Token"><a class="header-anchor" href="#获取Cloudflare-Token"></a>获取Cloudflare Token</h2><ul><li><p>登录 Cloudflare，进入需要生成证书的域名的<code>概述</code>页面</p></li><li><p>复制<code>区域ID</code>、<code>账户ID</code>，点击获取API令牌，创建令牌</p></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e05cdbe9284ad23b9a222659e72a53a2.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/5f392cd23522f07d05c4119123019ec9.png" alt=""></p><ul><li>复制<code>令牌</code></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/afc7d4a8918e37b2ad711f4e2153703a.png" alt=""></p><ul><li>将获取到的三个值写入到<code>./account.conf</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SAVED_CF_Token=&#x27;令牌&#x27;&quot;</span> &gt;&gt; ./account.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SAVED_CF_Account_ID=&#x27;账户ID&#x27;&quot;</span> &gt;&gt; ./account.conf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SAVED_CF_Zone_ID=&#x27;区域ID&#x27;&quot;</span> &gt;&gt; ./account.conf<br></code></pre></td></tr></table></figure><h2 id="获取ZeroSSL-API-Key"><a class="header-anchor" href="#获取ZeroSSL-API-Key"></a>获取ZeroSSL API Key</h2><ul><li>登录 ZeroSSL 并访问 <a href="https://app.zerossl.com/developer">Developer</a> 页面，点击生成<code>EAB Credentials</code></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/3b4096c9d9d10120556bc2b98629408a.png" alt=""></p><ul><li>复制<code>EAB KID</code>和<code>EAB HMAC Key</code></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/c12d8fc07d0df3f56b71648a60e46f56.png" alt=""></p><ul><li>将 ZeroSSL 注册到 <a href="http://acme.sh">acme.sh</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> acme.sh --register-account --server zerossl --eab-kid YOUR_EAB_KID --eab-hmac-key YOUR_EAB_HMAC_Key<br></code></pre></td></tr></table></figure><h2 id="生成证书"><a class="header-anchor" href="#生成证书"></a>生成证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> acme.sh --issue -d domain.com -d *.domain.com --dns dns_dp -k ec-256<br>docker <span class="hljs-built_in">exec</span> acme.sh --issue -d domain.com -d *.domain.com --dns dns_cf -k ec-256<br></code></pre></td></tr></table></figure><h2 id="安装证书"><a class="header-anchor" href="#安装证书"></a>安装证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> acme.sh --install-cert -d domain.com -d *.domain.com --fullchain-file /certificate/domain.com.crt --key-file /certificate/domain.com.key --ecc --reloadcmd <span class="hljs-string">&quot;自定义后续操作&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 证书 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图说设计模式笔记#3</title>
      <link href="/posts/77324109/"/>
      <url>/posts/77324109/</url>
      
        <content type="html"><![CDATA[<h2 id="建造者模式"><a class="header-anchor" href="#建造者模式"></a>建造者模式</h2><h3 id="模式定义"><a class="header-anchor" href="#模式定义"></a>模式定义</h3><p>建造者模式就是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要指定内部的具体构建细节。建造者模式又可以被称为生成器模式。</p><h3 id="模式结构"><a class="header-anchor" href="#模式结构"></a>模式结构</h3><ul><li>Builder：抽象建造者</li><li>ConcreteBuilder：具体建造者</li><li>Director：指挥者</li><li>Product：产品角色</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/da546ebfdbd66b3ef53144bf54c3dabe.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000">在线编辑</a></p><h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3><p>抽象建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartB</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartC</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Builder</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartA</span><span class="hljs-params">()</span> &#123;<br>        product.setParts((product.getParts() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : product.getParts()) + <span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartB</span><span class="hljs-params">()</span> &#123;<br>        product.setParts((product.getParts() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : product.getParts()) + <span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildPartC</span><span class="hljs-params">()</span> &#123;<br>        product.setParts((product.getParts() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : product.getParts()) + <span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指挥者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Builder builder;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuilder</span><span class="hljs-params">(Builder builder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">constuct</span><span class="hljs-params">()</span> &#123;<br>        builder.buildPartA();<br>        builder.buildPartB();<br>        builder.buildPartC();<br>        <span class="hljs-keyword">return</span> builder.getResult();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuilder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Director</span> <span class="hljs-variable">director</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Director</span>();<br>    director.setBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteBuilder</span>());<br>    Assert.assertEquals(director.constuct().getParts(), <span class="hljs-string">&quot;ABC&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模式分析"><a class="header-anchor" href="#模式分析"></a>模式分析</h3><ul><li>抽象建造者类中定义产品的创建方法和返回方法</li><li>建造者模式中引入了一个指挥者类，该类的作用主要有：隔离客户与生产过程；它负责控制产品的生产过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</li></ul><h3 id="实例"><a class="header-anchor" href="#实例"></a>实例</h3><p>KFC套餐：套餐是一个复杂对象，服务员更具顾客要求，一步一步装配套餐组成需要的食品，构造完一份完整的套餐，饭后返回个客户。</p><h3 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h3><ul><li>优点<ul><li>客户端不需要知道产品内部组成细节，将产品本身与产品构建过程解耦，使得相同的创建过程可以创建不同的产品对象</li><li>每一个具体建造者都相对独立，可以很方便地替换或增加具体创建者，用户使用不同的具体建造者即可得到不同的产品对象</li><li>可以更加精细化地控制产品的创建过程</li><li>增加新的具体建造者无需修改原有类库的代码，指挥者针对抽象建造者类编程，系统扩展方便，符合开闭原则</li></ul></li><li>缺点<ul><li>建造者模式所创建的产品一般要具有较多的共同点，其组成部分相似，若产品差异性很大，则不适合使用建造者模式</li><li>若产品内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大</li></ul></li></ul><h3 id="适用环境"><a class="header-anchor" href="#适用环境"></a>适用环境</h3><ul><li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性</li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品</li></ul><h3 id="模式应用"><a class="header-anchor" href="#模式应用"></a>模式应用</h3><p>一般游戏中的场景、任务角色等可以使用建造者模式对齐进行设计</p><h3 id="模式拓展"><a class="header-anchor" href="#模式拓展"></a>模式拓展</h3><ul><li>省略抽象建造者角色：当系统中只需要一个具体建造者时</li><li>省略指挥者角色：当只有一个具体建造者，且抽象建造者已被省略时，可以省略指挥者角色，让建造者扮演指挥者和建造者双重角色</li></ul><h2 id="原型模式"><a class="header-anchor" href="#原型模式"></a>原型模式</h2><p>又可以称为克隆模式</p><h3 id="模式动机"><a class="header-anchor" href="#模式动机"></a>模式动机</h3><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p><h3 id="模式定义-v2"><a class="header-anchor" href="#模式定义-v2"></a>模式定义</h3><p>实现了一个原型接口，该接口用于创建当前对象的克隆</p><h3 id="模式结构-v2"><a class="header-anchor" href="#模式结构-v2"></a>模式结构</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/758afb20594f11143a5f4ad883c1870c.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000">在线编辑</a></p><h3 id="代码实现-v2"><a class="header-anchor" href="#代码实现-v2"></a>代码实现</h3><p>Shape</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">protected</span> String type;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            clone = <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> clone;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Rectangle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">()</span> &#123;<br>        type = <span class="hljs-string">&quot;Rectangle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Rectangle::draw()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Circle</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">()</span> &#123;<br>        type = <span class="hljs-string">&quot;Circle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Circle::draw()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ShapeCache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeCache</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String, Shape&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title function_">getShape</span><span class="hljs-params">(String shapeId)</span> &#123;<br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">cachedShape</span> <span class="hljs-operator">=</span> shapeMap.get(shapeId);<br>        <span class="hljs-keyword">return</span> (Shape) cachedShape.clone();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putShape</span><span class="hljs-params">(Shape shape)</span> &#123;<br>        shapeMap.put(shape.getId(), shape);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrototype</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Shape</span> <span class="hljs-variable">shape1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>    shape1.setId(<span class="hljs-string">&quot;1&quot;</span>);<br>    ShapeCache.putShape(shape1);<br>    <span class="hljs-type">Shape</span> <span class="hljs-variable">shape2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>    shape2.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>    ShapeCache.putShape(shape2);<br>    <span class="hljs-type">Shape</span> <span class="hljs-variable">shape</span> <span class="hljs-operator">=</span> ShapeCache.getShape(<span class="hljs-string">&quot;1&quot;</span>);<br>    Assert.assertNotEquals(shape1, shape);<br>    Assert.assertEquals(shape1.getType(), shape.getType());<br>    Assert.assertEquals(shape1.getId(), shape.getId());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模式优缺点"><a class="header-anchor" href="#模式优缺点"></a>模式优缺点</h3><ul><li>优点<ul><li>性能提高</li><li>逃避构造函数的约束</li></ul></li><li>缺点<ul><li>实现克隆方法需要对类的功能进行通盘考虑，对一个全新的类比较容易，对于已有的类不一定很容易</li><li>必须实现 Cloneable 接口</li></ul></li></ul><h3 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h3><ul><li>资源优化场景</li><li>类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等</li><li>性能和安全要求的场景</li><li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式</li><li>一个对象多个修改者的场景</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用</li><li>在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图说设计模式笔记#2</title>
      <link href="/posts/1939664859/"/>
      <url>/posts/1939664859/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象工厂模式"><a class="header-anchor" href="#抽象工厂模式"></a>抽象工厂模式</h2><h3 id="模式动机"><a class="header-anchor" href="#模式动机"></a>模式动机</h3><ul><li>在工厂方法模式中一个具体工厂对应一种具体产品，但有时候需要一个工厂对应多个产品对象，而抽象工厂模式就可以实现这种情况。为方便理解引入一下概念<ul><li>产品等级结构：即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机</li><li>产品族：产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱</li></ul></li><li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态</li><li>与工厂方法模式最大的区别在于，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。当一个工厂等级结构可以创建出属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率</li></ul><h3 id="模式定义"><a class="header-anchor" href="#模式定义"></a>模式定义</h3><p>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p><h3 id="模式结构"><a class="header-anchor" href="#模式结构"></a>模式结构</h3><ul><li>AbstractFactory：抽象工厂</li><li>ConcreteFactory：具体工厂</li><li>AbstractProduct：抽象产品</li><li>Product：具体产品</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/eaea948823e85e3e57329d391bd8d48d.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/uml/SoWkIImgAStDuKfCAYufIamkKN24Cjo0EB-e4bCYe2W_fJIvn16dZ1DNSavYSR42r0H3LAuHb0ipnX2DZoRlP8Z6D-92Sw62JOsU7jmolB88lJ3RmD88jn2Gnz3lX2BlP4X0teWBvam5FJqxXBLOXPtWmaOegerGXH5cEwJcfG2Z4W00">在线编辑</a></p><h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>具体工厂1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA1</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB1</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体工厂2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA2</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB2</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAbstractFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">AbstractFactory</span> <span class="hljs-variable">factory1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Factory1</span>();<br>    <span class="hljs-type">AbstractFactory</span> <span class="hljs-variable">factory2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Factory2</span>();<br>    Assert.assertEquals(factory1.createProductA().getClass().getName(), ProductA1.class.getName());<br>    Assert.assertEquals(factory1.createProductB().getClass().getName(), ProductB1.class.getName());<br>    Assert.assertEquals(factory2.createProductA().getClass().getName(), ProductA2.class.getName());<br>    Assert.assertEquals(factory2.createProductB().getClass().getName(), ProductB2.class.getName());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h3><ul><li>优点<ul><li>应用抽象工厂模式可以实现高内聚低耦合的设计目的</li><li>当一个产品族中的多个对象被设计成一起工厂时，它能够保证客户端始终只使用同一个产品族的对象</li><li>增加新的具体工厂和产品族很方便，无需修改已有系统，符合开闭原则</li></ul></li><li>缺点<ul><li>难以扩展抽象工厂来生产新种类产品，对抽象接口进行修改会涉及到对所有子类工厂的修改，十分不便</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）</li></ul></li></ul><h3 id="适用环境"><a class="header-anchor" href="#适用环境"></a>适用环境</h3><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来</li><li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现</li></ul><h3 id="模式拓展"><a class="header-anchor" href="#模式拓展"></a>模式拓展</h3><ul><li>开闭原则的倾斜性<ul><li>要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的<ul><li>增加产品族：工厂模式可以很好的支持开闭原则，只需要增加一个新的具体工厂即可</li><li>增加产品等级结构：需要修改抽象工厂并修改所有具体工厂，不能很好地支持开闭原则</li></ul></li><li>抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便</li></ul></li><li>工厂模式的退化<ul><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，即只存在一个产品等级结构时，抽象工厂模式退化为工厂方法模式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图说设计模式笔记#1</title>
      <link href="/posts/3935682145/"/>
      <url>/posts/3935682145/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>之前自己也学习过设计模式，但是学了之后大部分设计模式没怎么在实际场景中使用过，导致知识点遗忘的差不多了。偶然间发现了<a href="https://github.com/me115/design_patterns">me115/design_patterns </a>这个开源项目，趁此机会打算再系统得学习巩固一下设计模式知识。</p><blockquote><p>图说设计模式：本书使用图形和代码结合的方式来解析设计模式</p></blockquote><p>引用自<a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html#index">图说设计模式</a></p><h2 id="UML图形符号"><a class="header-anchor" href="#UML图形符号"></a>UML图形符号</h2><table><thead><tr><th>关系</th><th>说明</th><th>符号说明</th><th>plantuml写法</th><th>图形</th></tr></thead><tbody><tr><td>实现关系</td><td>继承抽象类</td><td>带空心三角箭头的虚线</td><td>&lt;|…</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/17932e6a7d887d7896e73c42b47ec5e1.png" alt=""></td></tr><tr><td>泛化关系</td><td>继承非抽象类</td><td>带空心三角箭头的实线</td><td>&lt;|--</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d73b4dcf996b086e58103b010e57a7e6.png" alt=""></td></tr><tr><td>组合关系</td><td>是一种强依赖的<strong>特殊聚合关系</strong>，如果整体不存在了，则部分也不存在了</td><td>带实心菱形箭头的实线</td><td>*--</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/a96bd4f78307fee0cb21265254ccf78f.png" alt=""></td></tr><tr><td>聚合关系</td><td>整体由部分构成，整体与部分不是强依赖，即使整体不存在了，部分依然存在</td><td>带空心菱形箭头的实线</td><td>o--</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8c0dc7c8a763e3b26ce9251e6b088499.png" alt=""></td></tr><tr><td>关联关系</td><td>描述不同类的对象之间的结构关系，是一种静态关系，与运行状态无关，是一种强关联的关系，默认不强调方向，表示对象间互相知道，如果A–&gt;B 表示A知道B，B不知道A。在代码中通常以成员变量的形式实现。</td><td>实线</td><td>--</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/f6086bdf8de727219f0e4ce16bd26194.png" alt=""></td></tr><tr><td>依赖关系</td><td>描述一个对象在运行期间会用到另一个对象的关系，与关联关系不同的是，它是一种临时性的关系，在运行间产生。在代码中表现为类构造方法及类方法的传入参数</td><td>带箭头的虚线</td><td>&lt;…</td><td><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/fbb36ddaca441eb33c6cb4f371a2b35d.png" alt=""></td></tr></tbody></table><h2 id="设计模式按类型区分"><a class="header-anchor" href="#设计模式按类型区分"></a>设计模式按类型区分</h2><ul><li>创建型模式<ul><li>简单工厂模式（Simple Factory）</li><li>工厂方法模式（Factory Method）</li><li>抽象工厂模式（Abstract Factory）</li><li>建造者模式（Builder）</li><li>原型模式（Prototype）</li><li>单例模式（Singleton）</li></ul></li><li>结构型模式<ul><li>适配器模式（Adapter）</li><li>桥接模式（Bridge）</li><li>组合模式（Composite）</li><li>装饰模式（Decorator）</li><li>外观模式（Facade）</li><li>享元模式（Flyweight）</li><li>代理模式（Proxy）</li></ul></li><li>行为型模式<ul><li>职责链模式（Chain of Responsibility）</li><li>命令模式（Command）</li><li>解释器模式（Interpreter）</li><li>迭代器模式（Iterator）</li><li>中介者模式（Mediator）</li><li>备忘录模式（Memento）</li><li>观察者模式（Observer）</li><li>状态模式（State）</li><li>策略模式（Strategy）</li><li>模板方法模式（Template Method）</li><li>访问者模式（Visitor）</li></ul></li></ul><h2 id="什么是创建型模式"><a class="header-anchor" href="#什么是创建型模式"></a>什么是创建型模式</h2><p>创建型模式对类的实例化过程进行了抽象，将对象的创建和使用过程分离。使得外界只需要知道它们共同的接口，而不清楚具体的实线细节，使系统符合单一职责原则。</p><h2 id="简单工厂模式"><a class="header-anchor" href="#简单工厂模式"></a>简单工厂模式</h2><h3 id="模式动机"><a class="header-anchor" href="#模式动机"></a>模式动机</h3><p>提供一个方法，传入不同的参数来返回需要的对象。</p><h3 id="模式定义"><a class="header-anchor" href="#模式定义"></a>模式定义</h3><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><h3 id="模式结构"><a class="header-anchor" href="#模式结构"></a>模式结构</h3><ul><li>Factory：工厂角色，实现创建实例的逻辑</li><li>Product：抽象产品角色，工厂创建的所有对象的父类，负责描述所有实例的公共接口</li><li>ConcreteProduct：具体产品角色，最终创建的目标</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/edd44bcb69b1e3cb87c10f90d9ee4b4c.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/umla/SoWkIImgAStDuKfCAYufIamkKGWeoayfJIxXIiv9B2vMSCxFIovABKc5YZfY5tRYWZ8KR6hqz30quPLrWXhf1hGylwYI2qehwEdPOHY4JzA9oo4rBmNe5G00">在线编辑</a></p><h3 id="时序图"><a class="header-anchor" href="#时序图"></a>时序图</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/797eab0c1c2f7b45d61eab0c1754bec8.png" alt=""></p><h3 id="代码实现"><a class="header-anchor" href="#代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;A&quot;</span>:<br>                product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;B&quot;</span>:<br>                product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="简单工厂模式优缺点"><a class="header-anchor" href="#简单工厂模式优缺点"></a>简单工厂模式优缺点</h3><ul><li>优点<ul><li>工厂类包含判断逻辑，客户端没有创建产品的责任，只需要消费产品；通过此方式实现了对责任的分割</li><li>客户端需要知道所创建具体产品的类名，只需要知道创建产品的参数即可，对于复杂类名，通过简单工厂模式可以减少使用者的记忆量</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性</li></ul></li><li>缺点<ul><li>工厂类集中了所有产品的创建逻辑，一旦出问题，整个系统都要受影响</li><li>使用简单工厂模式会增加系统类的个数，在一定程度上增加了系统的复杂度和理解难度</li><li>系统拓展困难，添加新产品就不得不修改工厂类，产品数量增多后可能会造成工厂逻辑变复杂，不利于系统拓展和维护</li><li>由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li></ul></li></ul><h3 id="适用环境"><a class="header-anchor" href="#适用环境"></a>适用环境</h3><ul><li>工厂类负责创建的对象比较少，逻辑不太复杂</li><li>客户端只知道工厂类的参数，对创建对象的细节不关心</li></ul><h3 id="模式应用"><a class="header-anchor" href="#模式应用"></a>模式应用</h3><ul><li><p>java.text.DateFormat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> DateFormat <span class="hljs-title function_">getDateInstance</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> DateFormat <span class="hljs-title function_">getDateInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> style)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> DateFormat <span class="hljs-title function_">getDateInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> style,Locale</span><br><span class="hljs-params">locale)</span>;<br></code></pre></td></tr></table></figure></li><li><p>java加密技术</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">KeyGenerator keyGen=KeyGenerator.getInstance(<span class="hljs-string">&quot;DESede&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="工厂方法模式"><a class="header-anchor" href="#工厂方法模式"></a>工厂方法模式</h2><h3 id="模式动机-v2"><a class="header-anchor" href="#模式动机-v2"></a>模式动机</h3><p>创建过程交给专门的工厂子类去完成。每当出现一个新的产品，只需要为新产品创建一个具体的工厂类就可以，这一特点使得工厂方法模式具有超越简单工厂模式的优越性，更加符合<code>开闭原则</code>。</p><h3 id="模式定义-v2"><a class="header-anchor" href="#模式定义-v2"></a>模式定义</h3><p>工厂方法模式又被称为工厂模式，也叫虚拟构造器模式或者多态模式。在工厂模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类负责生成具体的产品对象。</p><h3 id="模式结构-v2"><a class="header-anchor" href="#模式结构-v2"></a>模式结构</h3><ul><li>Product：抽象产品</li><li>ConcreteProduct：具体产品</li><li>Factory：抽象工厂</li><li>ConcreteFactory：具体工厂</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/dc63dd48363fcca42f79294fa0832807.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/umla/SoWkIImgAStDuKfCAYufIamkKGWeoayfJIxXIiv9B2w6yHove0m5cnezFRWeGfSRaCWlgaJJ1HE5qc3D699eV0KzFJk41GwfUIb0vm40">在线编辑</a></p><h3 id="代码实现-v2"><a class="header-anchor" href="#代码实现-v2"></a>代码实现</h3><p>父类工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>工厂子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductAFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FactoryMethod</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactoryMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">FactoryMethod</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductAFactory</span>();<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> factory.createProduct();<br>    Assert.assertEquals(product.doSomething(), ProductA.class.getName());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模式分析"><a class="header-anchor" href="#模式分析"></a>模式分析</h3><p>使用了面向对象的多态性。核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类，核心类仅仅负责子类必须实现的接口，不负责哪个产品被实例化的细节，使得允许系统在不修改工厂角色的情况下引进新产品</p><h3 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h3><ul><li><p>日志记录器</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/dd2b9ababb13b103a783fa5896f1dfe5.png" alt=""></p><p><a href="http://www.plantuml.com/plantuml/umla/SoWkIImgAStDuKfCAYufIamkKV39JtS3qlb5bIXYNCavYSN52cwPEQa8dajYIM9IOd4ggZp217Hb20a4Ky6cHayFf0-FD0uJKBGY131TvPoJcPfNmWMX5FJqx91yYIRAvP2Qbm8C4000">在线编辑</a></p></li></ul><h3 id="工厂方法模式优缺点"><a class="header-anchor" href="#工厂方法模式优缺点"></a>工厂方法模式优缺点</h3><ul><li>优点<ul><li>用户只需要关心所需产品对应的工厂，无须关心创建细节</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键，使得工厂子类可以自己决定创建何种产品，自己实现创建逻辑</li><li>系统中加入新产品时，只要添加一个具体工厂和具体产品就可以，系统的扩展性就变得非常好，完全符合开闭原则</li></ul></li><li>缺点<ul><li>新增产品时需要编写新的具体产品类，也要提供与之对应的具体工厂类，系统中的类数量成对增加，一定程度上增加了系统的复杂度，以及增加系统编译运行的开销</li><li>增加抽象层的定义，增加了系统的抽象性和理解难度</li></ul></li></ul><h3 id="适用环境-v2"><a class="header-anchor" href="#适用环境-v2"></a>适用环境</h3><ul><li>一个类不知道它所需要的对象的类，但要知道创建这个对象的具体工厂类</li><li>一个类用过其子类来指定创建哪个对象</li><li>将创建对象的任务委托个多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时在动态指定，可将具体工厂类名存储在配置文件或数据库中</li></ul><h3 id="模式应用-v2"><a class="header-anchor" href="#模式应用-v2"></a>模式应用</h3><ul><li><p>JDBC中的工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection conn=DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=DB;user=sa;password=&quot;</span>);<br>Statement statement=conn.createStatement();<br>ResultSet rs=statement.executeQuery(<span class="hljs-string">&quot;select * from UserInfo&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="模式拓展"><a class="header-anchor" href="#模式拓展"></a>模式拓展</h3><ul><li>在抽象工厂角色可以中定义多个工厂方法</li><li>产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合中，然后根据客户对产品的请求，再对集合进行查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rclone+onedrive备份服务器</title>
      <link href="/posts/4034988835/"/>
      <url>/posts/4034988835/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>rclone可以将文件备份到云存储，onedrive是可靠云存储空间，两者结合可以实现服务器上重要文件的备份。</p><h2 id="rclone安装"><a class="header-anchor" href="#rclone安装"></a>rclone安装</h2><blockquote><p>参考官方文档 <a href="https://rclone.org/install/">Install (rclone.org)</a></p></blockquote><p>使用一键安装脚本快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -Ls https://rclone.org/install.sh)<br></code></pre></td></tr></table></figure><p>检查是否安装正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone version<br></code></pre></td></tr></table></figure><h2 id="获取onedrive客户端Id和密钥"><a class="header-anchor" href="#获取onedrive客户端Id和密钥"></a>获取onedrive客户端Id和密钥</h2><blockquote><p>参考官方文档 <a href="https://rclone.org/onedrive/#getting-your-own-client-id-and-key">Microsoft OneDrive (rclone.org)</a></p></blockquote><h3 id="在azure上注册新应用"><a class="header-anchor" href="#在azure上注册新应用"></a>在azure上注册新应用</h3><p>访问 <a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">azure 注册应用</a>，点击<strong>新注册</strong></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d45ce0f565a15e932cc61d2d813f7c65.png" alt=""></p><p>输入<strong>应用名称</strong>，选择<strong>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)</strong>，重定向URI选择<strong>Web</strong>，并填入<strong><a href="http://localhost:53682/">http://localhost:53682/</a></strong>，点击注册</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/61b9712a56b0665fc6a6b415f477fe7f.png" alt=""></p><p>注册成功后，点击概述，复制客户端ID备用</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6029d43800937467112e7f8cae287408.png" alt=""></p><h3 id="创建客户端密码"><a class="header-anchor" href="#创建客户端密码"></a>创建客户端密码</h3><p>依次点击<strong>证书和密码</strong>、<strong>新客户端密码</strong>，添加客户端密码，截止期限最多24个月，点击<strong>添加</strong></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/b43337700f1dc4eb15d3b2c46f363599.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/088c4ea1dbbdaa5b47a0771adf82f19b.png" alt=""></p><p>复制密钥值备用！刚创建时才能看到密钥值，如果看不到了，就删掉重新创建试试吧。</p><h3 id="设置API权限"><a class="header-anchor" href="#设置API权限"></a>设置API权限</h3><p>依次点击<strong>API权限</strong>、<strong>添加权限</strong>、<strong>Microsoft Graph</strong>、<strong>委托的权限</strong>，将以下权限全部勾选上 Files.Read, Files.ReadWrite, Files.Read.All, Files.ReadWrite.All, offline_access, User.Read, Sites.Read.All</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2017ed9e00e059106c3993863b377719.png" alt=""></p><p>最终的权限列表</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e67771f3007f31dc289b6820337a6f95.png" alt=""></p><h2 id="获取token"><a class="header-anchor" href="#获取token"></a>获取token</h2><h3 id="在windows上安装rclone"><a class="header-anchor" href="#在windows上安装rclone"></a>在windows上安装rclone</h3><p>在 <a href="https://rclone.org/downloads/">官方</a>下载windows版本并解压</p><h3 id="接收许可获取token"><a class="header-anchor" href="#接收许可获取token"></a>接收许可获取token</h3><p>在rclone解压目录下运行命令行，输入以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\rclone.exe authorize onedrive &quot;应用程序(客户端)ID&quot; &quot;客户端密钥值&quot;<br></code></pre></td></tr></table></figure><p>在弹出的浏览器中选择接受，回到命令行窗口，<code>access_token</code>已经打印屏幕上，复制token备用</p><h2 id="配置rclone"><a class="header-anchor" href="#配置rclone"></a>配置rclone</h2><p>回到linux服务器上，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone config<br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 输入自定义名称 remote</span><br><span class="hljs-comment"># 输入 28</span><br><span class="hljs-comment"># 粘贴客户端id</span><br><span class="hljs-comment"># 粘贴客户端密钥值</span><br><span class="hljs-comment"># 根据自已服务器的位置选择区域 1</span><br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 粘贴access_token</span><br><span class="hljs-comment"># 输入 1</span><br><span class="hljs-comment"># 此时会列出你的onedrive地址，正确就输入 y</span><br><span class="hljs-comment"># 输入 y</span><br><span class="hljs-comment"># 输入 q 结束</span><br></code></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone lsd remote:<br></code></pre></td></tr></table></figure><p>如果列出onedrive上的文件夹就说明配置成功了</p><h2 id="备份重要文件到onedirve"><a class="header-anchor" href="#备份重要文件到onedirve"></a>备份重要文件到onedirve</h2><p>备份的话一般是两种方式</p><ul><li>将文件压缩后，用日期命名，备份到云端，本地备份文件保留一个周期</li><li>将本地文件镜像备份到云端</li></ul><p>我个人比较倾向于第二种</p><p>使用<code>rclone sync</code>来进行镜像备份，更详细地说明可以查看 <a href="https://rclone.org/commands/rclone_sync/">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> -i 本地文件目录 remote:云端目标文件夹<br></code></pre></td></tr></table></figure><p>剩下的就是编写备份脚本，设置定时运行了，本篇文章就不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> backup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> backup </tag>
            
            <tag> rclone </tag>
            
            <tag> onedrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程知识学习及查漏补缺</title>
      <link href="/posts/3956405114/"/>
      <url>/posts/3956405114/</url>
      
        <content type="html"><![CDATA[<h3 id="下载OpenJDK源码"><a class="header-anchor" href="#下载OpenJDK源码"></a>下载OpenJDK源码</h3><p>并发包中很多类底层都是native方法，为了更好的理解需要去阅读jdk的源代码（c++）</p><p><a href="https://github.com/openjdk/jdk/releases/tag/jdk8-b120">jdk8-b120下载地址</a></p><h3 id="Thread启动原理"><a class="header-anchor" href="#Thread启动原理"></a>Thread启动原理</h3><p>线程启动调用的是线程对象的<code>start</code>方法，而start方法中调用了一个native的<code>start0</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (threadStatus != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>    group.add(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">started</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        start0();<br>        started = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!started) &#123;<br>                group.threadStartFailed(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable ignore) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>openjdk写的JNI一般是一一对应的，Thread.java对应的就是<code>Thread.c</code></p><p>start0对应的是<code>JVM_StartThread</code></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/992f6f37fd7d384ebbb2c873805d341a.png" alt=""></p><p>在<code>jvm.cpp</code>中搜索JVM_StartThread，发现最终调用<code>Thread::start</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">JVM_ENTRY</span>(<span class="hljs-type">void</span>, <span class="hljs-built_in">JVM_StartThread</span>(JNIEnv* env, jobject jthread))<br>  <span class="hljs-built_in">JVMWrapper</span>(<span class="hljs-string">&quot;JVM_StartThread&quot;</span>);<br>  JavaThread *native_thread = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">// ...</span><br><br>  Thread::<span class="hljs-built_in">start</span>(native_thread);<br><br>JVM_END<br></code></pre></td></tr></table></figure><p>在<code>thread.cpp</code>文件中找到方法，底层是调用操作系统层去开启线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Thread::start</span><span class="hljs-params">(Thread* thread)</span> </span>&#123;<br>  <span class="hljs-built_in">trace</span>(<span class="hljs-string">&quot;start&quot;</span>, thread);<br>  <span class="hljs-keyword">if</span> (!DisableStartThread) &#123;<br>    <span class="hljs-keyword">if</span> (thread-&gt;<span class="hljs-built_in">is_Java_thread</span>()) &#123;<br>      java_lang_Thread::<span class="hljs-built_in">set_thread_status</span>(((JavaThread*)thread)-&gt;<span class="hljs-built_in">threadObj</span>(),<br>                                          java_lang_Thread::RUNNABLE);<br>    &#125;<br>    os::<span class="hljs-built_in">start_thread</span>(thread);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一锁两并三程"><a class="header-anchor" href="#一锁两并三程"></a>一锁两并三程</h3><h4 id="一锁"><a class="header-anchor" href="#一锁"></a>一锁</h4><p>synchronized</p><h4 id="两并"><a class="header-anchor" href="#两并"></a>两并</h4><ul><li>并发：一个处理器同时处理多个任务</li><li>并行：多个处理器同时处理多个任务</li></ul><h4 id="三程"><a class="header-anchor" href="#三程"></a>三程</h4><ul><li>进程：系统中运行的一个应用程序就是一个进程，每个进程都有自己的内存空间和系统资源</li><li>线程：在同一个进程内会有1个或多个线程，是大多数操作系统进行时序调度的基本单元</li><li>管程：监视器（Monitor），也就是平时说的锁，是一种同步机制</li></ul><h3 id="Future"><a class="header-anchor" href="#Future"></a>Future</h3><p>Future接口定义了操作异步任务一些方法，如获取异步任务的执行结果、取消任务的执行、判断任务是否被取消、判断任务执行是否完毕等</p><p><em>一句话：Future接口可以为主线程开一个分支任务，专门为主线程处理耗时费力的复杂业务</em></p><h4 id="FutureTask"><a class="header-anchor" href="#FutureTask"></a>FutureTask</h4><p>三个特点：多线程、有返回值、异步任务</p><p>常用的多线程实现方式，如继承Thread、实现Runnable接口都没有返回值；实现Callable接口可以有返回值，但是又没法放到Thread的构造方法中，而FutureTask类实现了Runnable接口又包含一个注入Callable对象的构造方法，通过实现Callable接口再经过FutureTask包装后来创建Thread就可以解决此问题。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/70403777916b85a3eafb1609eec6385f.png" alt=""></p><h5 id="使用示例"><a class="header-anchor" href="#使用示例"></a>使用示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTaskDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BuyWaterThread</span>());<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask);<br>        thread.start();<br>        <span class="hljs-comment">// 阻塞等待线程执行完成，获取返回值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> futureTask.get();<br>log.info(<span class="hljs-string">&quot;喝到&#123;&#125;了&quot;</span>, s);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyWaterThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(TimeUnit.SECONDS.toMillis(<span class="hljs-number">10</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;水&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Future优缺点"><a class="header-anchor" href="#Future优缺点"></a>Future优缺点</h4><h5 id="优点"><a class="header-anchor" href="#优点"></a>优点</h5><p>future+线程池异步多线程任务配合，能显著提升程序的执行效率</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Integer&gt; taskDurations = Arrays.asList(<span class="hljs-number">500</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>);<br>    <span class="hljs-type">TimeInterval</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> DateUtil.timer();<br>    m1(taskDurations, timer); <span class="hljs-comment">// 多任务依次执行耗时 1021 ms</span><br>    m2(taskDurations, timer); <span class="hljs-comment">// 多任务异步执行耗时 535 ms</span><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">(List&lt;Integer&gt; taskDurations, TimeInterval timer)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">for</span> (Integer taskDuration : taskDurations) &#123;<br>        Thread.sleep(taskDuration);<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;多任务依次执行耗时 &#123;&#125; ms&quot;</span>, timer.intervalRestart());<br>&#125;<br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">(List&lt;Integer&gt; taskDurations, TimeInterval timer)</span> &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>    List&lt;FutureTask&lt;String&gt;&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Integer taskDuration : taskDurations) &#123;<br>        FutureTask&lt;String&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(taskDuration);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">return</span> taskDuration.toString();<br>        &#125;);<br>        tasks.add(task);<br>        threadPool.submit(task);<br>    &#125;<br>    threadPool.shutdown();<br>    <span class="hljs-keyword">for</span> (FutureTask&lt;String&gt; task : tasks) &#123;<br>        log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, task.get());<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;多任务异步执行耗时 &#123;&#125; ms&quot;</span>, timer.intervalRestart());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h5><ul><li>get方法阻塞<ul><li>调用get(long timeout, TimeUnit unit)方法，设置超时时间，超时后会抛出异常，一定程度上缓解阻塞</li><li>轮询调用isDone方法，判断任务状态是否为完成，轮询会耗费无谓的CPU资源；若想要异步获取结果，通常还是以此方式，尽量不要阻塞</li></ul></li></ul><h3 id="CompletableFuture"><a class="header-anchor" href="#CompletableFuture"></a>CompletableFuture</h3><p>对于Future的缺点，希望进行异步处理是可以传入回调函数，在Future结束时自动调用该回调函数，这样就不用阻塞，也不用去轮询判断了</p><p>JDK8设计出CompletableFuture，提供了一种观察者模式类似的机制</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/7168fca955882927a379a6cf16ee8ada.png" alt=""></p><h4 id="CompletionStage接口"><a class="header-anchor" href="#CompletionStage接口"></a>CompletionStage接口</h4><ul><li>CompletionStage代表异步计算过程中的某一个阶段，一个阶段完成以后可能会触发另外一个阶段</li><li>一个阶段的执行可能是被单个阶段的完成触发，也可能是由多个阶段一起触发</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/350dfe37a40571b191a6a948fdae415a.png" alt=""></p><h4 id="创建对象"><a class="header-anchor" href="#创建对象"></a>创建对象</h4><p>一般通过核心的四个静态方法来创建</p><ul><li>runAsync(Runnable runnable)：无返回值</li><li>runAsync(Runnable runnable, Executor executor)：无返回值，使用线程池</li><li>supplyAsync(Supplier&lt;U&gt; supplier)：有返回值</li><li>supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)：有返回值，使用线程池</li><li>若没有指定线程池，直接使用默认的ForkJoinPool.commonPool()作为它的线程池去执行异步代码</li></ul><h4 id="示例代码"><a class="header-anchor" href="#示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        CompletableFuture.supplyAsync(() -&gt; &#123;<br>            log.info(<span class="hljs-string">&quot;in &#123;&#125;&quot;</span>, Thread.currentThread().getName());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current().nextInt(<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(TimeUnit.SECONDS.toMillis(<span class="hljs-number">1</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//num = num / 0;</span><br>            <span class="hljs-keyword">return</span> num;<br>        &#125;, threadPool).whenComplete((v, e) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;get value &#123;&#125;&quot;</span>, v);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.error(<span class="hljs-string">&quot;发生异常 &#123;&#125;&quot;</span>, e.getMessage(), e);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        threadPool.shutdown();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;主线程执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>并行查询图书价格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;WebMall&gt; webMalls = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMall</span>(<span class="hljs-string">&quot;jd&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMall</span>(<span class="hljs-string">&quot;taobao&quot;</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMall</span>(<span class="hljs-string">&quot;pdd&quot;</span>)<br>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getPriceByCompletableFuture</span><span class="hljs-params">(String bookName)</span> &#123;<br>    <span class="hljs-type">TimeInterval</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> DateUtil.timer();<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>    List&lt;String&gt; prices = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// List&lt;WebMall&gt; -&gt; List&lt;CompletableFuture&gt; -&gt; List&lt;String&gt;</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        prices = webMalls.stream()<br>                .map(w -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;<br>                    <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%s in %s price is %.2f&quot;</span>, bookName, w.getName(), w.queryBookPrice(bookName));<br>                &#125;, threadPool))<br>                .collect(Collectors.toList())<br>                .stream()<br>                .map(c -&gt; c.join())<br>                .collect(Collectors.toList());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        threadPool.shutdown();<br>    &#125;<br>    prices.stream().forEach(System.out::println);<br>    log.info(<span class="hljs-string">&quot;耗时 &#123;&#125; ms&quot;</span>, timer.intervalRestart());<br>    <span class="hljs-keyword">return</span> prices;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="优点-v2"><a class="header-anchor" href="#优点-v2"></a>优点</h4><ul><li>异步任务结束时，会自动回调某个对象的方法</li><li>主线程设置好回调后，不再关心异步任务的执行，异步任务之间可以顺序执行</li><li>异步任务出错时，会自动回调某个对象的方法</li></ul><h4 id="使用注意事项"><a class="header-anchor" href="#使用注意事项"></a>使用注意事项</h4><ul><li>get和join的区别：get方法需要抛出异常，join不需要</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> juc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群搭建</title>
      <link href="/posts/331375146/"/>
      <url>/posts/331375146/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2><ul><li><p>虚拟机：hyper-v</p></li><li><p>系统：ubuntu-18.04.6-server</p></li></ul><h2 id="基础环境搭建"><a class="header-anchor" href="#基础环境搭建"></a>基础环境搭建</h2><h3 id="修改apt源"><a class="header-anchor" href="#修改apt源"></a>修改apt源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br>sudo sed -i <span class="hljs-string">&quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot;</span> /etc/apt/sources.list<br>sudo sed -i <span class="hljs-string">&quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot;</span> /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙"><a class="header-anchor" href="#关闭防火墙"></a>关闭防火墙</h3><p>整明白了之后再只开放具体的端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop ufw<br>systemctl <span class="hljs-built_in">disable</span> ufw<br></code></pre></td></tr></table></figure><h3 id="关闭swap"><a class="header-anchor" href="#关闭swap"></a>关闭swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时</span><br>swapoff -a<br><span class="hljs-comment"># 永久，注释文件中包含swap的行</span><br>vim /etc/fstab<br></code></pre></td></tr></table></figure><h3 id="span-id-配置hosts-配置hosts-span"><a class="header-anchor" href="#span-id-配置hosts-配置hosts-span"></a><span id="配置hosts">配置hosts</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br>192.168.137.100 k8s1<br>192.168.137.101 k8s2<br>192.168.137.102 k8s3<br></code></pre></td></tr></table></figure><p>等基础环境搭建完成，每个节点分别设置自己的hostname</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname k8s1<br></code></pre></td></tr></table></figure><h3 id="配置kubernetes-apt源"><a class="header-anchor" href="#配置kubernetes-apt源"></a>配置kubernetes apt源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial main&quot;</span> &gt; /etc/apt/sources.list.d/kubernetes.list<br>apt update<br><span class="hljs-comment"># 若提示public key is not available，则取NO_PUBKEY后面的字符串的后8位替换到下面的命令执行</span><br>gpg --keyserver keyserver.ubuntu.com --recv-keys 307EA071<br>gpg --<span class="hljs-built_in">export</span> --armor 307EA071 | sudo apt-key add -<br>apt update<br></code></pre></td></tr></table></figure><h3 id="安装kubelet-kubeadm-kubectl"><a class="header-anchor" href="#安装kubelet-kubeadm-kubectl"></a>安装kubelet kubeadm kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y kubelet kubeadm kubectl<br>apt-mark hold kubelet kubeadm kubectl<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br></code></pre></td></tr></table></figure><h3 id="安装docker"><a class="header-anchor" href="#安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y docker-ce<br></code></pre></td></tr></table></figure><h3 id="安装所需镜像"><a class="header-anchor" href="#安装所需镜像"></a>安装所需镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm config images list<br><span class="hljs-comment"># 会列出以下镜像</span><br><span class="hljs-comment"># k8s.gcr.io/kube-apiserver:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-controller-manager:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-scheduler:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-proxy:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/pause:3.6</span><br><span class="hljs-comment"># k8s.gcr.io/etcd:3.5.1-0</span><br><span class="hljs-comment"># k8s.gcr.io/coredns/coredns:v1.8.6</span><br></code></pre></td></tr></table></figure><p>由于上述命令执行所列出的镜像地址国内可能拉取不到，所以将地址更换为国内可访问的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取中转镜像</span><br>docker pull k8simage/kube-apiserver:v1.23.1<br>docker pull k8simage/kube-controller-manager:v1.23.1<br>docker pull k8simage/kube-scheduler:v1.23.1<br>docker pull k8simage/kube-proxy:v1.23.1<br>docker pull k8simage/pause:3.6<br>docker pull k8simage/etcd:3.5.1-0<br>docker pull xyz349925756/coredns:v1.8.6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重命名中转镜像标签</span><br>docker tag k8simage/kube-apiserver:v1.23.1 k8s.gcr.io/kube-apiserver:v1.23.1<br>docker tag k8simage/kube-controller-manager:v1.23.1 k8s.gcr.io/kube-controller-manager:v1.23.1<br>docker tag k8simage/kube-scheduler:v1.23.1 k8s.gcr.io/kube-scheduler:v1.23.1<br>docker tag k8simage/kube-proxy:v1.23.1 k8s.gcr.io/kube-proxy:v1.23.1<br>docker tag k8simage/pause:3.6 k8s.gcr.io/pause:3.6<br>docker tag k8simage/etcd:3.5.1-0 k8s.gcr.io/etcd:3.5.1-0<br>docker tag xyz349925756/coredns:v1.8.6  k8s.gcr.io/coredns/coredns:v1.8.6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除中转标签</span><br>docker rmi k8simage/kube-apiserver:v1.23.1<br>docker rmi k8simage/kube-controller-manager:v1.23.1<br>docker rmi k8simage/kube-scheduler:v1.23.1<br>docker rmi k8simage/kube-proxy:v1.23.1<br>docker rmi k8simage/pause:3.6<br>docker rmi k8simage/etcd:3.5.1-0<br>docker rmi xyz349925756/coredns:v1.8.6<br></code></pre></td></tr></table></figure><h2 id="master配置"><a class="header-anchor" href="#master配置"></a>master配置</h2><p>上来先<a href="#%E9%85%8D%E7%BD%AEhosts">配置hosts</a>。</p><h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init --apiserver-advertise-address=192.168.137.100 --kubernetes-version v1.23.1 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure><p><code>--apiserver-advertise-address</code>值为master的ip地址。</p><p>若卡在<code>kubelet</code>的启动，则按下面步骤进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看docker Cgroup Driver的值</span><br>docker info | grep -i cgroup<br><span class="hljs-comment"># 查看kubelet cgroupDriver的值</span><br><span class="hljs-built_in">cat</span> /var/lib/kubelet/config.yaml<br><span class="hljs-comment"># 若两个值不一致则将kubelet的cgroupDriver改为与docker一致</span><br>vim /var/lib/kubelet/config.yaml<br><span class="hljs-comment"># 重启kubelet</span><br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><p><span id="kubeadm_join">初始化成功后会提示</span>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.168.137.100:6443 --token 1094in.pjnnp76v94a1bef1 --discovery-token-ca-cert-hash sha256:82a29989a1425df58746d36286b58e0bd99898de40e055797c97134b35b9aad8<br><span class="hljs-comment"># token会在24小时后失效</span><br></code></pre></td></tr></table></figure><h3 id="创建-kube目录"><a class="header-anchor" href="#创建-kube目录"></a>创建.kube目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="安装-Pod-网络附加组件"><a class="header-anchor" href="#安装-Pod-网络附加组件"></a>安装 Pod 网络附加组件</h3><p>未安装时，执行命令<code>kubectl get pod -n kube-system</code>会有部分状态为<code>pending</code>（阻塞）。</p><p>组件有好多，也不知道装哪个，先装了顺眼的<code>flannel</code>吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://fastly.jsdelivr.net/gh/flannel-io/flannel@master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><p>过一段时间再执行<code>kubectl get pod -n kube-system</code>，可以发现所有状态都为<code>running</code>了。</p><h3 id="将master设为工作节点"><a class="header-anchor" href="#将master设为工作节点"></a>将master设为工作节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl taint nodes --all node-role.kubernetes.io/master-<br></code></pre></td></tr></table></figure><p>会输出<code>node/k8s1 untainted</code></p><h3 id="查看集群节点状态"><a class="header-anchor" href="#查看集群节点状态"></a>查看集群节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get nodes<br></code></pre></td></tr></table></figure><p>当前只有一个节点且状态为ready。</p><h2 id="node配置"><a class="header-anchor" href="#node配置"></a>node配置</h2><p>上来先<a href="#%E9%85%8D%E7%BD%AEhosts">配置hosts</a>。</p><h3 id="加入集群"><a class="header-anchor" href="#加入集群"></a>加入集群</h3><p>复制<a href="#kubeadm_join">master初始化成功后提示的命令</a>，执行。</p><p>再次执行<code>kubectl get nodes</code>查看节点，发现多了对应的节点。</p><p>再稍等片刻，所有的节点状态都为ready了。</p><p>至此集群搭建完成 :)</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/caijunchao/p/13486883.html">kubernetes系列—Ubuntu下搭建Kubernetes集群–k8s部署 - __夕颜 - 博客园 (cnblogs.com)</a></li><li><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">使用 kubeadm 创建集群 | Kubernetes</a></li><li>[集群网络系统 | Kubernetes](</li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客时间《正则表达式入门课》笔记</title>
      <link href="/posts/794273428/"/>
      <url>/posts/794273428/</url>
      
        <content type="html"><![CDATA[<h2 id="极客时间《正则表达式入门课》笔记"><a class="header-anchor" href="#极客时间《正则表达式入门课》笔记"></a>极客时间《正则表达式入门课》笔记</h2><h3 id="正则表达式的作用"><a class="header-anchor" href="#正则表达式的作用"></a>正则表达式的作用</h3><p>正则表达式一般有三种作用</p><ul><li>校验数据的有效性</li><li>查找符合要求的文本</li><li>对文本进行切割和替换</li></ul><h3 id="元字符"><a class="header-anchor" href="#元字符"></a>元字符</h3><p>正则表达式的基本单元是元字符。</p><p>按照理解可以将元字符分类成以下几类</p><ul><li>特殊单字符</li><li>空白符</li><li>范围</li><li>量词</li><li>断言</li></ul><h4 id="特殊单字符"><a class="header-anchor" href="#特殊单字符"></a>特殊单字符</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/f2802c45dce2d6c45297f1367ffbc4fd.png" alt=""></p><h4 id="空白符"><a class="header-anchor" href="#空白符"></a>空白符</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/eba09124a18a5ed7515a1c8fff38198f.png" alt=""></p><h4 id="量词"><a class="header-anchor" href="#量词"></a>量词</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ea64f337c8b705193254769450900be7.png" alt=""></p><h4 id="范围"><a class="header-anchor" href="#范围"></a>范围</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/bf86e6bc0b96354deb476adbc8b7e651.png" alt=""></p><h3 id="量词与贪婪"><a class="header-anchor" href="#量词与贪婪"></a>量词与贪婪</h3><p>在正则中，表示次数的量词默认是<code>贪婪</code>的，在贪婪模式下，会尝试尽可能最大长度去匹配。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/9bfc3702e435e9bacf6b155301ec53c5.png" alt=""></p><h4 id="独占模式"><a class="header-anchor" href="#独占模式"></a>独占模式</h4><p>不管是贪婪模式，还是非贪婪模式，都需要发生回溯才能完成相应的功能。但是在一些场景下，我们不需要回溯，匹配不上返回失败就好了，因此正则中还有另外一种模式，独占模式，<strong>它类似贪婪匹配，也会尽可能多的匹配，但匹配过程不会发生回溯，匹配不上就会返回失败，因此在一些场合下性能会更好。</strong></p><p>例.</p><blockquote><p>regex = “xy{1,3}z”</p><p>text = “xyyz”</p></blockquote><p>贪婪模式下，y{1,3}会尽可能长的去匹配，及三个y，但字符串最后一个字符为z导致匹配不上，这时就会<code>向前回溯</code>，吐出当前字符 z，接着用正则中的 z 去匹配。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/08bdf0457e8b31302576b0b6d973f371.png" alt=""></p><p>修改表达式为非贪婪模式</p><blockquote><p>regex = “xy{1,3}?z”</p></blockquote><p>非贪婪模式下，y{1,3}?会尽可能短的去匹配，当匹配了一个y后，正则会用z与字符串中的第三个字符y比较，发现不匹配，这时正则就会<code>向前回溯</code>。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/efa2911bcc8ed685c4c4304bd5860ffd.png" alt=""></p><p>独占模式就是在量词后面加上<code>+</code></p><p>修改为独占模式</p><blockquote><p>regex = “xy{1,3}+yz”</p></blockquote><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/63f0a3a5867dbc7442997caa42cb93ef.png" alt=""></p><h4 id="TIPS"><a class="header-anchor" href="#TIPS"></a>TIPS</h4><blockquote><p>如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。</p><p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p><p><em>提醒我们在写正则的时候，一定要思考下回溯问题，避免使用低效的正则，引发线上问题。</em></p></blockquote><h3 id="分组与引用"><a class="header-anchor" href="#分组与引用"></a>分组与引用</h3><h4 id="分组"><a class="header-anchor" href="#分组"></a>分组</h4><p>在正则中使用<code>()</code>来分组，使用括号分组的表达式会保存子组（如果正则中出现了括号，那么我们就认为，这个子表达式在后续可能会再次被引用，会影响性能），每对括号会分配一个编号。</p><p>在括号内使用<code>?:</code>就可以不保存子组（不保存子组可以提高正则的性能），不会被分配编号。</p><p>在分组嵌套的情况下判断分组编号可以<strong>通过各分组左括号的顺序的判断</strong>。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/a54eaecbf26848c0e810f3e4cbbf4d2b.png" alt=""></p><h4 id="引用"><a class="header-anchor" href="#引用"></a>引用</h4><p>在知道了分组的编号后（number），可以使用<code>\number</code>来对分组进行引用。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/12495e0dbf1fb3c0ef63bf1419b164c8.png" alt=""></p><h5 id="使用分组引用来替换"><a class="header-anchor" href="#使用分组引用来替换"></a>使用分组引用来替换</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/b3cd5224b5669a01719e1b0dfa4a3600.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2021-11-28 14:39:18&quot;</span>;<br>date.replaceAll(<span class="hljs-string">&quot;((\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)) ((\\d&#123;2&#125;):(\\d&#123;2&#125;):(\\d&#123;2&#125;))&quot;</span>,<span class="hljs-string">&quot;日期$1 时间$5   $2年$3月$4日 $6时$7分$8秒&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="使用分组引用来查找"><a class="header-anchor" href="#使用分组引用来查找"></a>使用分组引用来查找</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6f9537527aca04bb76aa50a5d9b63dc5.png" alt=""></p><h3 id="匹配模式"><a class="header-anchor" href="#匹配模式"></a>匹配模式</h3><p>所谓匹配模式，指的是正则中一些<strong>改变元字符匹配行为</strong>的方式，比如匹配时不区分英文字母大小写。常见的匹配模式有 4 种，分别是不区分大小写模式、点号通配模式、多行模式和注释模式。</p><p>将模式修饰符放在正则表达式的前面就表示是此模式。模式修饰符是通过<code>(? 模式标识)</code> 的方式来表示的。</p><h4 id="不区分大小写模式（Case-Insensitive）"><a class="header-anchor" href="#不区分大小写模式（Case-Insensitive）"></a>不区分大小写模式（Case-Insensitive）</h4><p>不区分大小写的模式修饰符是<code>(?i)</code>。</p><blockquote><p>例，不区分大小写匹配dog</p><p>(?i)dog</p></blockquote><p>注意，如果模式修饰符在括号内，则作用范围是这个括号内的正则，而不是整个正则。</p><h4 id="点号通配模式（Dot-All）"><a class="header-anchor" href="#点号通配模式（Dot-All）"></a>点号通配模式（Dot All）</h4><p>点号通配模式的作用是可以让英文的<code>.</code>可以匹配任意字符。</p><p>模式修饰符是<code>(?s)</code>。</p><blockquote><p>例</p><p>(?s).+</p></blockquote><h4 id="多行匹配模式（Multiline）"><a class="header-anchor" href="#多行匹配模式（Multiline）"></a>多行匹配模式（Multiline）</h4><p>通常情况下，^匹配整个字符串的开头，$ 匹配整个字符串的结尾。多行匹配模式改变的就是 ^ 和 $ 的匹配行为。</p><p>模式修饰符为<code>(?m)</code>。</p><blockquote><p>例，匹配所有以the开头，以dog结尾的行</p><p>(?m)^the|dog$</p></blockquote><h4 id="注释模式（Comment）"><a class="header-anchor" href="#注释模式（Comment）"></a>注释模式（Comment）</h4><p>用于对正则进行注释说明。</p><p>模式修饰符为<code>(?#comment)</code>，comment为注释内容。</p><blockquote><p>例</p><p>(\w+)(?#word) \1(?#word repeat again)</p></blockquote><h4 id="总结"><a class="header-anchor" href="#总结"></a>总结</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/34e5f9fb9cce22c8eab046b16a14b84b.png" alt=""></p><h3 id="断言"><a class="header-anchor" href="#断言"></a>断言</h3><p>断言的定义为只用于匹配位置，而不是文本内容本身。</p><p>常见的断言有三种：单词边界、行的开始或结束以及环视。</p><h4 id="单词边界"><a class="header-anchor" href="#单词边界"></a>单词边界</h4><p>在正则中使用<code>\b</code>来表示单词的边界</p><blockquote><p>例，匹配句子中的单词tom</p><p>tom  tomorrow.</p><p>正则写法：\btom\b</p><p>表示匹配以tom开头，以tom结束的单词</p></blockquote><h4 id="行的开始或结束"><a class="header-anchor" href="#行的开始或结束"></a>行的开始或结束</h4><p>在正则中使用<code>^</code>表示文本行的开始，<code>$</code>表示文本行的结束，配合前面讲到的多行模式<code>(?m)</code>可以实现多行匹配。</p><h4 id="环视"><a class="header-anchor" href="#环视"></a>环视</h4><p>环视就是要求匹配部分的前面或后面要满足（或不满足）某种规则。</p><table><thead><tr><th>正则</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>(?&lt;=Y)</td><td>肯定逆序环视</td><td>左边是Y</td></tr><tr><td>(?&lt;!Y)</td><td>否定逆序环视</td><td>左边不是Y</td></tr><tr><td>(?=Y)</td><td>肯定顺序环视</td><td>右边是Y</td></tr><tr><td>(?!Y)</td><td>否定顺序环视</td><td>右边不是Y</td></tr></tbody></table><p><em>左尖括号代表看左边，没有尖括号是看右边，感叹号是非的意思。</em></p><p>注：环视正则表达式中的括号不会被视为子组。</p><h4 id="总结-v2"><a class="header-anchor" href="#总结-v2"></a>总结</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1dda268858f3ac6c7fc9681702a10418.png" alt=""></p><h3 id="正则转义"><a class="header-anchor" href="#正则转义"></a>正则转义</h3><p>正则中使用<code>\</code>来进行转义。</p><h4 id="元字符的转义"><a class="header-anchor" href="#元字符的转义"></a>元字符的转义</h4><p>如果在正则中要查找元字符本身时需要使用转义字符。</p><h5 id="量词转义"><a class="header-anchor" href="#量词转义"></a>量词转义</h5><p>量词<code>*</code>、<code>+</code>、<code>&gt;</code>、<code>-</code>、<code>^</code>、<code>$</code>、<code>|</code>等，直接在前面加<code>\</code>。</p><h5 id="括号的转义"><a class="header-anchor" href="#括号的转义"></a>括号的转义</h5><p>在正则中方括号<code>[]</code>和 花括号 <code>&#123;&#125;</code> 只需转义开括号，但圆括号 <code>()</code> 两个都要转义。</p><h4 id="使用函数消除元字符特殊含义"><a class="header-anchor" href="#使用函数消除元字符特殊含义"></a>使用函数消除元字符特殊含义</h4><p>使用过多的转义字符会影响正则表达式的阅读和理解，可以使用编程语言自带的转义函数来实现转义。</p><table><thead><tr><th>编程语言</th><th>转义函数</th></tr></thead><tbody><tr><td>python</td><td>re.escape(text)</td></tr><tr><td>go</td><td>regexp.QuoteMeta(text)</td></tr><tr><td>java</td><td>Pattern.quote(text)</td></tr></tbody></table><h4 id="字符组的转义"><a class="header-anchor" href="#字符组的转义"></a>字符组的转义</h4><p>字符组就是用方括号<code>[]</code>表示的一些字符，如<code>[a-z]</code>。</p><p>字符组中需要转义的有三种情况：</p><ul><li><code>^</code>在方括号中，且在首位</li><li><code>-</code>在方括号中，且不再首位</li><li><code>]</code>在方括号中，且不再首位</li></ul><p>方括号中的其他元字符不再具有特殊含义，仅代表字符本身。</p><h4 id="总结-v3"><a class="header-anchor" href="#总结-v3"></a>总结</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8b0a4a60f6bbbbf4a0d3f38caba61934.png" alt=""></p><h3 id="正则表达式流派"><a class="header-anchor" href="#正则表达式流派"></a>正则表达式流派</h3><p>由于各种历史原因导致正则表达式有很多种流派，其中<code>POSIX 流派</code>与<code>PCRE 流派</code>是目前正则表达式流派中的两大最主要的流派。</p><h4 id="POSIX流派"><a class="header-anchor" href="#POSIX流派"></a>POSIX流派</h4><p>Unix 系统或类 Unix 系统上的大部分工具，如 grep、sed、awk 等，均遵循该标准。</p><p>POSIX 规范定义了正则表达式的两种标准：</p><ul><li>BRE 标准（Basic Regular Expression 基本正则表达式）</li><li>ERE 标准（Extended Regular Expression 扩展正则表达式）</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/929ff92f68eff391d1661ccefbfeea08.png" alt=""></p><p><strong>linux下的一些命令默认使用BRE标准，可以使用参数来使用ERE标准或PCRE标准。</strong></p><h5 id="POSIX字符组"><a class="header-anchor" href="#POSIX字符组"></a>POSIX字符组</h5><p>与一般的正则表达式不一样的是，POSIX定义了自己的字符组。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d0679bcb5d7c86c3467a1a3cfa0b4c62.png" alt=""></p><h4 id="PCRE流派"><a class="header-anchor" href="#PCRE流派"></a>PCRE流派</h4><p>目前绝大部分常用编程语言所采用的正则引擎，基本都属于 PCRE 流派。</p><p>但是不同的编程语言还有兼容问题。</p><ul><li>直接兼容：perl、php、preg、pcre库等perl系</li><li>间接兼容：java系、python系，JavaScript系、.net系等</li></ul><h4 id="总结-v4"><a class="header-anchor" href="#总结-v4"></a>总结</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2a3ee38afe52b9e1863e44b569c84b32.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2知识学习及查漏补缺</title>
      <link href="/posts/1292434261/"/>
      <url>/posts/1292434261/</url>
      
        <content type="html"><![CDATA[<h3 id="基本介绍"><a class="header-anchor" href="#基本介绍"></a>基本介绍</h3><h4 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h4><p>优点：</p><ul><li><p>创建独立Spring应用</p></li><li><p>内嵌web服务器</p></li><li><p>自动starter依赖，简化构建配置</p></li><li><p>自动配置Spring以及第三方功能</p></li><li><p>提供生产级别的监控、健康检查及外部化配置</p></li><li><p>无代码生成、无需编写XML</p></li></ul><p>缺点：</p><ul><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul><h4 id="时代背景"><a class="header-anchor" href="#时代背景"></a>时代背景</h4><h5 id="微服务"><a class="header-anchor" href="#微服务"></a>微服务</h5><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h5 id="分布式"><a class="header-anchor" href="#分布式"></a>分布式</h5><p>分布式的困难：</p><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li></ul><p>分布式的解决方案：</p><ul><li>SpringBoot + SpringCloud</li></ul><h5 id="云原生"><a class="header-anchor" href="#云原生"></a>云原生</h5><p>上云的困难：</p><ul><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量治理</li></ul><p>上云的解决方案：</p><ul><li>docker容器化技术</li><li>k8s容器编排</li><li>DevOps，CI/CD</li><li>Service Mesh于Serviceless</li></ul><h4 id="相关文档"><a class="header-anchor" href="#相关文档"></a>相关文档</h4><p>查看版本新特性：</p><p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes">Home · spring-projects/spring-boot Wiki (github.com)</a></p><p>官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/">Spring Boot Reference Documentation</a></p><h3 id="自动配置原理"><a class="header-anchor" href="#自动配置原理"></a>自动配置原理</h3><h4 id="注解说明"><a class="header-anchor" href="#注解说明"></a>注解说明</h4><h5 id="Configuration"><a class="header-anchor" href="#Configuration"></a>@Configuration</h5><ul><li><p>加在类上，告诉SpringBoot这是一个配置类</p></li><li><p>配置类里面使用<code>@Bean</code>标注在方法上给容器注册组件，默认也是单实例的</p></li><li><p>配置类本身也是组件</p></li><li><p>proxyBeanMethods属性：标识配置类是否是代理@Bean方法</p><ul><li>Full模式（proxyBeanMethods = true）：保证每个@Bean方法被调用多少次返回的组件都是单实例的</li><li>Lite模式（proxyBeanMethods = false）：每个@Bean方法被调用多少次返回的组件都是新创建的</li><li>组件依赖必须使用Full模式，其他情况可以使用Lite模式（加快项目启动）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给容器中添加组件</span><br><span class="hljs-comment">     * 以方法名作为组件的id；返回类型就是组件类型；返回的值，就是组件在容器中的实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">demo1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;demo&quot;</span>);<br>        <span class="hljs-comment">// 依赖SubDemo组件</span><br>        demo.setSubDemo(subDemo());<br>        <span class="hljs-keyword">return</span> demo;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SubDemo <span class="hljs-title function_">subDemo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubDemo</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConfigurationProxyBeanMethods</span><span class="hljs-params">(ConfigurableApplicationContext ctx)</span> &#123;<br>    <span class="hljs-comment">// 测试@Confirguaion(proxyBeanMethods = true/ false)</span><br>    <span class="hljs-comment">// DemoConfig 配置类本身也是组件</span><br>    <span class="hljs-type">DemoConfig</span> <span class="hljs-variable">demoConfig</span> <span class="hljs-operator">=</span> ctx.getBean(DemoConfig.class);<br>    <span class="hljs-type">Demo</span> <span class="hljs-variable">demo1</span> <span class="hljs-operator">=</span> demoConfig.demo1();<br>    <span class="hljs-type">Demo</span> <span class="hljs-variable">demo2</span> <span class="hljs-operator">=</span> demoConfig.demo1();<br>    log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, demo1);<br>    log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, demo1 == demo2); <span class="hljs-comment">// proxyBeanMethods = true, output is true</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Bean、-Component、-Controller、-Service、-Repository"><a class="header-anchor" href="#Bean、-Component、-Controller、-Service、-Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h5><p>标识类是一个组件，被spring管理</p><h5 id="ComponentScan"><a class="header-anchor" href="#ComponentScan"></a>@ComponentScan</h5><p>组件扫描</p><h5 id="Import"><a class="header-anchor" href="#Import"></a>@Import</h5><p>在已标记为组件的类上使用</p><p>自动给导入的类型注册为组件，默认组件的名称为全类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(Demo.class)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给容器中添加组件</span><br><span class="hljs-comment">     * 以方法名作为组件的id；返回类型就是组件类型；返回的值，就是组件在容器中的实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">demo1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;demo&quot;</span>);<br>        <span class="hljs-comment">// 依赖SubDemo组件</span><br>        demo.setSubDemo(subDemo());<br>        <span class="hljs-keyword">return</span> demo;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SubDemo <span class="hljs-title function_">subDemo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubDemo</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testImportAnnotation</span><span class="hljs-params">(ConfigurableApplicationContext ctx)</span> &#123;<br>    String[] names = ctx.getBeanNamesForType(Demo.class);<br>    Arrays.stream(names).forEach(System.out::println);<br>    <span class="hljs-comment">// com.zhuweitung.springboot2.model.Demo 此为@Import方式注册</span><br>    <span class="hljs-comment">// demo1 此为使用@Bean方法注册</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Conditional"><a class="header-anchor" href="#Conditional"></a>@Conditional</h5><p>按照条件装配，当满足指定的条件时才将组件注入</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/f674bbcc1ede608e1b96cd4cfc4769fe.png" alt=""></p><ul><li>@ConditionalOnBean：当容器中存在某些组件</li><li>@ConditionalOnMissingBean：当容器中不存在某些组件</li><li>@ConditionalOnClass：当容器中有某些类（有依赖jar包）</li><li>@ConditionalOnMissingClass：当容器中没有某些类</li><li>@ConditionalOnResource：当项目路径下存在某些资源</li><li>@ConditionalOnJava：当是指定的Java版本号</li><li>@ConditionalOnWebApplication：当工程是web应用</li><li>@ConditionalOnNotWebApplication：当工程不是web应用</li><li>@ConditionalOnProperty：当配置文件中配置了某些属性</li></ul><h5 id="ImportResource"><a class="header-anchor" href="#ImportResource"></a>@ImportResource</h5><p>导入spring的xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:spring/beans.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="配置绑定"><a class="header-anchor" href="#配置绑定"></a>配置绑定</h4><h5 id="ConfigurationProperties"><a class="header-anchor" href="#ConfigurationProperties"></a>@ConfigurationProperties</h5><p>添加在类上，prefix属性指定在配置文件中的前缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">demo:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;http://who.where.com&#x27;</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">&#x27;root&#x27;</span><br>    <span class="hljs-attr">pwd:</span> <span class="hljs-string">&#x27;123456&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;demo.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String pwd;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUrl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUrl</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-built_in">this</span>.url = url;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>, DemoProperties.class.getSimpleName() + <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>)<br>                .add(<span class="hljs-string">&quot;url=&#x27;&quot;</span> + url + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br>                .add(<span class="hljs-string">&quot;username=&#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br>                .add(<span class="hljs-string">&quot;pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br>                .toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有注册到容器中才能自动加载</p><p>注册方式有两种：</p><ul><li><p>类上加上<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;demo.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoProperties</span> &#123;<br></code></pre></td></tr></table></figure></li><li><p>在其他组件上加上<code>@EnableConfigurationProperties</code>注解， 并指定注册的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(DemoProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="引导加载自动配置类"><a class="header-anchor" href="#引导加载自动配置类"></a>引导加载自动配置类</h4><p>程序启动类上加的<code>@SpringBootApplication</code>注解，是由三个注解构成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="SpringBootConfiguration"><a class="header-anchor" href="#SpringBootConfiguration"></a>@SpringBootConfiguration</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure><p>由以上代码可以看出，加上@SpringBootConfiguration注解后会把类标记为配置类</p><h5 id="ComponentScan-v2"><a class="header-anchor" href="#ComponentScan-v2"></a>@ComponentScan</h5><p>组件扫描</p><h5 id="EnableAutoConfiguration"><a class="header-anchor" href="#EnableAutoConfiguration"></a>@EnableAutoConfiguration</h5><p>开启自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li><p>@AutoConfigurationPackage：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 给容器中导入一个组件，通过Registrar将启动类所在包下的所有组件注册到容器</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>@Import(AutoConfigurationImportSelector.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取所有需要导入的组件</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;<br><span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br><span class="hljs-keyword">return</span> NO_IMPORTS;<br>&#125;<br><span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> getAutoConfigurationEntry(annotationMetadata);<br><span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());<br>&#125;<br><br><span class="hljs-keyword">protected</span> AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> &#123;<br><span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>&#125;<br><span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> getAttributes(annotationMetadata);<br>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);<br>configurations = removeDuplicates(configurations);<br>Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>checkExcludedClasses(configurations, exclusions);<br>configurations.removeAll(exclusions);<br>configurations = getConfigurationClassFilter().filter(configurations);<br>fireAutoConfigurationImportEvents(configurations, exclusions);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationEntry</span>(configurations, exclusions);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>利用 <code>getAutoConfigurationEntry</code> 给容器中批量导入一些组件</p></li><li><p>调用 <code>getCandidateConfigurations</code> 获取到所有需要导入到容器中的配置类</p></li><li><p>利用工厂加载 <code>loadSpringFactories</code> 得到所有的组件</p></li><li><p>从<code>META-INF/spring.factories</code>位置来加载一个文件</p><ul><li>默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</li><li>spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6c996e2d41bda9bd086c6748f1522750.png" alt=""></p><ul><li>springboot2.7以上不推荐将自动配置类写到 META-INF/spring.factories，而是推荐写到 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/fd87f5fca0d5c1ebe7e98f0ada3b4bc5.png" alt=""></p><ul><li>总之就是在这些文件中已经写死了springboot一启动就要给容器中加载的所有配置类</li></ul></li></ul></li></ul><h4 id="按需开启自动配置项"><a class="header-anchor" href="#按需开启自动配置项"></a>按需开启自动配置项</h4><p>按照上面一步操作后所有自动配置类启动时默认全部加载，但是按照条件装配规则（@Conditional），最终会按需配置</p><h4 id="总结"><a class="header-anchor" href="#总结"></a>总结</h4><ul><li><p>SpringBoot先加载所有的自动配置类  xxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改</li></ul></li></ul><h4 id="最佳实践"><a class="header-anchor" href="#最佳实践"></a>最佳实践</h4><ul><li><p>引入场景依赖</p></li><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li></ul></li><li><p>查看自动配置了哪些（可选）</p></li><li><ul><li>自己分析</li><li>配置文件中<code>debug=true</code>开启自动配置报告，启动后会输出生效于未生效配置的日志，Negative（不生效）\Positive（生效）</li></ul></li><li><p>是否需要修改</p></li><li><ul><li>参照文档修改配置项</li></ul></li><li><ul><li><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li><li>分析xxxProperties绑定了配置文件的哪些配置</li></ul></li></ul></li><li><ul><li>自定义加入或者替换组件</li></ul></li><li><ul><li><ul><li>@Bean、@Component</li></ul></li></ul></li><li><ul><li>自定义器  <strong>XXXXXCustomizer</strong></li></ul></li></ul><h3 id="YAML"><a class="header-anchor" href="#YAML"></a>YAML</h3><h4 id="基本语法"><a class="header-anchor" href="#基本语法"></a>基本语法</h4><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>'#'表示注释</li><li>字符串无需加引号，如果要加，''与&quot;&quot;表示字符串内容 会被 转义/不转义</li></ul><h4 id="自定义配置类提示"><a class="header-anchor" href="#自定义配置类提示"></a>自定义配置类提示</h4><p>pom中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>增加构建插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                     <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Web开发"><a class="header-anchor" href="#Web开发"></a>Web开发</h3><p><a href="https://docs.spring.io/spring-boot/docs/2.7.10-SNAPSHOT/reference/html/web.html#web.servlet.spring-mvc">参考官方文档</a></p><h4 id="SpringMVC自动配置"><a class="header-anchor" href="#SpringMVC自动配置"></a>SpringMVC自动配置</h4><p>Spring Boot为Spring MVC提供了自动配置功能，对大多数应用程序都很适用。</p><p>自动配置在Spring的默认值基础上增加了以下功能。</p><ul><li>包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> Bean</li><li>支持为静态资源提供服务，包括对WebJars的支持</li><li>自动注册 <code>Converter</code>、<code>GenericConverter</code> 和 <code>Formatter</code> Bean</li><li>支持 <code>HttpMessageConverters</code></li><li>自动注册 <code>MessageCodesResolver</code></li><li>支持静态的 <code>index.html</code></li><li>自动使用 <code>ConfigurableWebBindingInitializer</code> bean</li></ul><p>如果你想保留那些Spring Boot MVC定制，并进行更多的 MVC定制（Interceptor、Formatter、视图控制器和其他功能），你可以添加你自己的 <code>@Configuration</code> 类，类型为 <code>WebMvcConfigurer</code> ，但 <strong>不</strong> 含 <code>@EnableWebMvc</code>。</p><p>如果你想提供 <code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code> 或 <code>ExceptionHandlerExceptionResolver</code> 的自定义实例，并仍然保持Spring Boot MVC的自定义，你可以声明一个 <code>WebMvcRegistrations</code> 类型的bean，用它来提供这些组件的自定义实例。</p><p>如果你想完全控制Spring MVC，你可以添加你自己的 <code>@Configuration</code> 并使用 <code>@EnableWebMvc</code> 注解 ，或者添加你自己的 <code>@Configuration</code> 并使用 <code>DelegatingWebMvcConfiguration</code> 注解 ，如 <code>@EnableWebMvc</code> 的Javadoc中所述。</p><h4 id="HttpMessageConverter"><a class="header-anchor" href="#HttpMessageConverter"></a>HttpMessageConverter</h4><p>Spring MVC使用 <code>HttpMessageConverter</code> 接口来转换HTTP请求和响应</p><p>如果需要添加或定制转换器，你可以使用Spring Boot的 <code>HttpMessageConverters</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHttpMessageConvertersConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title function_">customConverters</span><span class="hljs-params">()</span> &#123;<br>        HttpMessageConverter&lt;?&gt; additional = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdditionalHttpMessageConverter</span>();<br>        HttpMessageConverter&lt;?&gt; another = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnotherHttpMessageConverter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageConverters</span>(additional, another);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态内容"><a class="header-anchor" href="#静态内容"></a>静态内容</h4><p>默认情况下，Spring Boot从classpath中的 <code>/static</code>（或 <code>/public</code> 或 <code>/resources</code> 或 <code>/META-INF/resources</code>）目录或 <code>ServletContext</code> 的root中提供静态内容。</p><p>资源访问路径：项目访问根路径/静态资源名</p><p>它使用了Spring MVC中的 <code>ResourceHttpRequestHandler</code>，因此你可以通过添加你自己的 <code>WebMvcConfigurer</code> 和覆盖 <code>addResourceHandlers</code> 方法来修改该行为。</p><h5 id="改变默认的静态资源路径"><a class="header-anchor" href="#改变默认的静态资源路径"></a>改变默认的静态资源路径</h5><p>即访问路径前缀，默认是/**</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/resources/**</span><br></code></pre></td></tr></table></figure><p>做以上配置后的资源访问路径为：项目访问根路径/resources/静态资源名</p><h5 id="自定义静态资源文件存放位置"><a class="header-anchor" href="#自定义静态资源文件存放位置"></a>自定义静态资源文件存放位置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">static-locations:</span> <span class="hljs-comment"># 值为数组格式</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">classpath:/haha/</span><br></code></pre></td></tr></table></figure><p>配置了自定义的存放位置后，默认的4个路径就会失效</p><h5 id="欢迎页面"><a class="header-anchor" href="#欢迎页面"></a>欢迎页面</h5><p>Spring Boot同时支持静态和模板化的欢迎页面。 它首先在配置的静态内容位置寻找一个 <code>index.html</code> 文件。 如果没有找到，它就会寻找 <code>index</code> 模板。 如果找到了其中之一，它就会自动作为应用程序的欢迎页面使用。</p><p>访问 项目访问根路径/或项目访问根路径/index.html 会解析到欢迎页面</p><p>若配置了自定义的静态资源路径则失效</p><h5 id="静态内容加载原理"><a class="header-anchor" href="#静态内容加载原理"></a>静态内容加载原理</h5><ul><li><p>Springboot启动后加载各依赖组件的自动配置类</p></li><li><p>SpringMVC功能的自动配置类为 <code>WebMvcAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfiguration(after = &#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>内部有一个<code>WebMvcAutoConfigurationAdapter</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Import(EnableWebMvcConfiguration.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, WebProperties.class &#125;)</span><br><span class="hljs-meta">@Order(0)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfigurationAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>, ServletContextAware &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>将配置文件与<code>WebMvcProperties</code>和<code>WebProperties</code>类进行绑定</p></li><li><p>执行<code>addResourceHandlers</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-comment">// add-mappings=false时禁用静态资源访问</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>    <span class="hljs-comment">// 将访问 /webjars/** 的请求加入到资源处理器</span><br>addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    <span class="hljs-comment">// 将访问 static-path-pattern 配置的请求加入到资源处理器，并指定资源路径为 static-locations 配置的值</span><br>addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.servletContext != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">ServletContextResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(<span class="hljs-built_in">this</span>.servletContext, SERVLET_LOCATION);<br>registration.addResourceLocations(resource);<br>&#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="请求参数处理"><a class="header-anchor" href="#请求参数处理"></a>请求参数处理</h4><h5 id="HiddenHttpMethodFilter"><a class="header-anchor" href="#HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h5><p>通过表单隐藏域，以post方式提交一个<code>_method</code>字段给服务器，通过HiddenHttpMethodFilter处理包装后，请求的method变为了传入的合法方式，以此实现RESTful风格的接口</p><p>WebMvcAutoConfiguration类中有以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;)</span><br><span class="hljs-keyword">public</span> OrderedHiddenHttpMethodFilter <span class="hljs-title function_">hiddenHttpMethodFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedHiddenHttpMethodFilter</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面代码可以知道，要开启还需要进行以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="请求映射原理"><a class="header-anchor" href="#请求映射原理"></a>请求映射原理</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/cfd4bcf2373372f73b45ae9a0a10e9c9.png" alt=""></p><p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-&gt;doDispatch()开始</p><p>doDispatch调用getHandler方法获取处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br><span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/799bf7b255e380706cd079b62c6efc00.png" alt=""></p><p><code>RequestMappingHandlerMapping</code>保存了所有@RequestMapping和handler的映射规则</p><p>所有的请求映射都在HandlerMapping中</p><ul><li>SpringBoot自动配置了 WelcomePageHandlerMapping、RequestMappingHandlerMapping</li><li>请求进来后会遍历所有的HandlerMapping，来查找映射的handler</li><li>当需要自定义映射处理时，可以自己自定义HandlerMapping，并注册到容器中</li></ul><h4 id="参数注解"><a class="header-anchor" href="#参数注解"></a>参数注解</h4><p>常见的有@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p><h5 id="MatrixVariable"><a class="header-anchor" href="#MatrixVariable"></a>@MatrixVariable</h5><p>@MatrixVariable即矩阵变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、请求路径：/person/lisi;age=30,hobby=a,b,c/wangmei;age=29,hobby=e,f</span><br><span class="hljs-comment">//2、SpringBoot默认是禁用了矩阵变量的功能，需要手动开启</span><br><span class="hljs-comment">// 原理：对于路径的处理通过UrlPathHelper进行解析，它的removeSemicolonContent属性表示会移除分号后的内，开启矩阵变量功能需要实现WebMvcConfigurer接口并重写configurePathMatch，并将UrlPathHelper的removeSemicolonContent设置为false</span><br><span class="hljs-comment">//3、矩阵变量必须有url路径变量才能被解析</span><br><br><span class="hljs-meta">@GetMapping(&quot;/person/&#123;father&#125;/&#123;mother&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">family</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;father&quot;)</span> String father,</span><br><span class="hljs-params">                  <span class="hljs-meta">@MatrixVariable(pathVar = &quot;father&quot;, value = &quot;age&quot;)</span> Integer fatherAge,</span><br><span class="hljs-params">                  <span class="hljs-meta">@MatrixVariable(pathVar = &quot;father&quot;, value = &quot;hobby&quot;)</span> List&lt;String&gt; fatherHobby,</span><br><span class="hljs-params">                  <span class="hljs-meta">@PathVariable(&quot;mother&quot;)</span> String mother,</span><br><span class="hljs-params">                  <span class="hljs-meta">@MatrixVariable(pathVar = &quot;mother&quot;, value = &quot;age&quot;)</span> Integer motherAge,</span><br><span class="hljs-params">                  <span class="hljs-meta">@MatrixVariable(pathVar = &quot;mother&quot;, value = &quot;hobby&quot;)</span> List&lt;String&gt; motherHobby)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;family&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="参数处理原理"><a class="header-anchor" href="#参数处理原理"></a>参数处理原理</h4><ul><li><p>doDispatch方法中先充HandlerMapping中找到处理请求的handler（Controller.methd()）</p></li><li><p>找到当前handler的适配器HandlerAdapter（RequestMappingHandlerAdapter）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> HandlerAdapter <span class="hljs-title function_">getHandlerAdapter</span><span class="hljs-params">(Object handler)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerAdapters != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerAdapter adapter : <span class="hljs-built_in">this</span>.handlerAdapters) &#123;<br><span class="hljs-keyword">if</span> (adapter.supports(handler)) &#123;<br><span class="hljs-keyword">return</span> adapter;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;No adapter for handler [&quot;</span> + handler +<br><span class="hljs-string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2af5782c18afbf791cd8dcff39da24a9.png" alt=""></p><ul><li>RequestMappingHandlerAdapter：支持方法上标注@RequestMapping</li><li>HandlerFunctionAdapter：支持函数式编程的</li></ul></li><li><p>执行适配器的handle方法，调用<code>RequestMappingHandlerAdapter</code>的<code>handleInternal</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title function_">handleInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>ModelAndView mav;<br>checkRequest(request);<br>    <span class="hljs-comment">// ...</span><br>mav = invokeHandlerMethod(request, response, handlerMethod);<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行invokeHandlerMethod方法，方法内会设置<code>参数解析器</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.argumentResolvers != <span class="hljs-literal">null</span>) &#123;<br>invocableMethod.setHandlerMethodArgumentResolvers(<span class="hljs-built_in">this</span>.argumentResolvers);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8f07c7c801046dfeb6203dde7f61807f.png" alt=""></p></li></ul><p>​由上面的参数解析器可以知道，SpringMVC目标方法能写多少种参数类型，取决于参数解析器</p><ul><li><p>调用invokeAndHandle-&gt;invokeForRequest-&gt;getMethodArgumentValues方法，解析参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br>MethodParameter[] parameters = getMethodParameters();<br><span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ARGS;<br>&#125;<br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>        <span class="hljs-comment">// 判断是否支持解析当前参数，内部会循环判断解析器是否支持</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行参数解析</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-comment">// Leave stack trace for later, exception may actually be resolved and handled...</span><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">exMsg</span> <span class="hljs-operator">=</span> ex.getMessage();<br><span class="hljs-keyword">if</span> (exMsg != <span class="hljs-literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;<br>logger.debug(formatArgumentError(parameter, exMsg));<br>&#125;<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>resolveArgument</code>方法中会创建<code>WebDataBinder</code>对象，该对象中的<code>GenericConversionService</code>属性包含大量类型转换器，用于将字符串转换为对应的类型</p></li><li><p>将所有的数据都放在<code>ModelAndViewContainer</code>，包含要去的页面地址，以及Model（BingdingAwareModelMap）数据</p></li><li><p>执行<code>processDispatchResult</code>-&gt;render-&gt;<code>renderMergedOutputModel</code></p></li></ul><h5 id="自定义类型转换器"><a class="header-anchor" href="#自定义类型转换器"></a>自定义类型转换器</h5><p>前端提交数据格式</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/116f24261fc53408f1f16207bf80d904.png" alt=""></p><p>后端接收格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;create&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">create</span><span class="hljs-params">(Demo demo)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类型转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFormatters</span><span class="hljs-params">(FormatterRegistry registry)</span> &#123;<br>                <span class="hljs-comment">// 添加自定义类型转换器</span><br>                registry.addConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Converter</span>&lt;String, Demo&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>                        <span class="hljs-keyword">if</span> (source != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>                            String[] parts = source.split(<span class="hljs-string">&quot;@&quot;</span>);<br>                            <span class="hljs-keyword">if</span> (parts.length &gt; <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    demo.setId(Integer.parseInt(parts[<span class="hljs-number">0</span>]));<br>                                &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;&#125;<br>                            &#125;<br>                            <span class="hljs-keyword">if</span> (parts.length &gt; <span class="hljs-number">1</span>) &#123;<br>                                demo.setName(parts[<span class="hljs-number">1</span>]);<br>                            &#125;<br>                            <span class="hljs-keyword">return</span> demo;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数据响应与内容协商"><a class="header-anchor" href="#数据响应与内容协商"></a>数据响应与内容协商</h4><h5 id="数据响应流程"><a class="header-anchor" href="#数据响应流程"></a>数据响应流程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;demo&quot;)</span><br><span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-number">666</span>, <span class="hljs-string">&quot;老铁&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>请求上面接口后，返回值处理过程如下</p><ul><li><p>执行invokeForRequest方法后获取到返回值，遍历返回值解析器对返回值进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.returnValueHandlers.handleReturnValue(<br>returnValue, getReturnValueType(returnValue), mavContainer, webRequest);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1e1db88d634eeddbb64f11d8215e75a6.png" alt=""></p><ul><li>SpringMVC支持以下类型的返回值<ul><li>ModelAndView</li><li>Model</li><li>View</li><li>ResponseBodyEmitter</li><li>StreamingResponseBody</li><li>HttpEntity</li><li>HttpHeaders</li><li>Callable</li><li>DeferredResult</li><li>AsyncTask</li><li>方法有@ModelAttribute注解</li><li>@ResponseBody注解</li><li>void或字符串</li><li>Map</li><li>在默认解析模式下，对于任何不是简单类型的返回值类型</li></ul></li></ul></li><li><p>遍历找到支持返回值类型的解析器后，执行解析器的<code>handleReturnValue</code>方法</p></li><li><p>RequestResponseBodyMethodProcessor处理器可以处理加了@ResponseBody注解的</p></li><li><p>执行<code>writeWithMessageConverters</code>方式，会利用消息转换器（MessageConverters）来处理</p></li><li><p>若返回数据不是流类型（InputStreamResource、Resource）的，会进行<code>内容协商</code>（浏览器在请求头中告诉服务器它可以接受什么类型的内容）</p></li><li><p>内容协商完成获取到<code>mediaType</code></p></li><li><p>遍历所有消息转换器，判断是否支持（supports）返回值类型，是否可以写为（canWrite）mediaType类型的内容</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8e215da64665a289e0202bdee6795c40.png" alt=""></p><ul><li>byte：[application/octet-stream, */*]</li><li>String：[text/plain, */*]</li><li>String：[text/plain, */*]</li><li>Resource：[*/*]</li><li>ResourceRegion：[application/xml, text/xml, application/*+xml]</li><li>DOMSource、SAXSource、StAXSource、StreamSource、Source</li><li>MultiValueMap：[application/x-www-form-urlencoded, multipart/form-data, multipart/mixed]</li><li>任意类型：[application/json, application/*+json]</li><li>任意类型：[application/json, application/*+json]</li><li>支持注解方式xml处理</li></ul></li><li><p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON写到响应体中</p></li></ul><h5 id="内容协商原理"><a class="header-anchor" href="#内容协商原理"></a>内容协商原理</h5><p>客户端通过请求头中不同的<code>Accept</code>值来告诉服务器本客户端可以接收的数据类型</p><p>内容协商的代码在<code>AbstractMessageConverterMethodProcessor</code>的<code>writeWithMessageConverters</code>方法中</p><ul><li><p>先从响应头中获取媒体类型，若没有则继续协商</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MediaType</span> <span class="hljs-variable">selectedMediaType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> outputMessage.getHeaders().getContentType();<br></code></pre></td></tr></table></figure></li><li><p>从请求头中获取客户端支持的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">acceptableTypes = getAcceptableMediaTypes(request);<br></code></pre></td></tr></table></figure></li><li><p>遍历内容协商策略，默认使用基于请求头的策略，返回请求头中描述的支持的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">resolveMediaTypes</span><span class="hljs-params">(NativeWebRequest request)</span> <span class="hljs-keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;<br><span class="hljs-keyword">for</span> (ContentNegotiationStrategy strategy : <span class="hljs-built_in">this</span>.strategies) &#123;<br>List&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);<br><span class="hljs-keyword">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> mediaTypes;<br>&#125;<br><span class="hljs-keyword">return</span> MEDIA_TYPE_ALL_LIST;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/18d12eb10c9610e14ae011d4b89e3b51.png" alt=""></p></li><li><p>获取服务端能生成的媒体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);<br></code></pre></td></tr></table></figure></li><li><p>获取服务端能生成且客户端支持的媒体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;MediaType&gt; mediaTypesToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;<br><span class="hljs-keyword">for</span> (MediaType producibleType : producibleTypes) &#123;<br><span class="hljs-keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;<br>mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>按媒体类型权重值进行排序，并以第一个媒体类型作为最终使用的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">MediaType.sortBySpecificityAndQuality(mediaTypesToUse);<br><br><span class="hljs-keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;<br><span class="hljs-keyword">if</span> (mediaType.isConcrete()) &#123;<br>selectedMediaType = mediaType;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;<br>selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>遍历消息解析器，获取支持生成对应媒体类型的解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用消息解析器的write方法将数据写到响应中</p></li></ul><h5 id="开启基于请求参数方式内容协商功能"><a class="header-anchor" href="#开启基于请求参数方式内容协商功能"></a>开启基于请求参数方式内容协商功能</h5><p>修改配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">contentnegotiation:</span><br>      <span class="hljs-attr">favor-parameter:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启请求参数内容协商模式</span><br></code></pre></td></tr></table></figure><p>请求格式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8123</span><span class="hljs-regexp">/test/</span>demo?format=xml<br></code></pre></td></tr></table></figure><h5 id="自定义消息转换器"><a class="header-anchor" href="#自定义消息转换器"></a>自定义消息转换器</h5><p>实现接口<code>HttpMessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomMessageConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;Demo&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-comment">// 不进行读取解析，直接返回false</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;<br>        <span class="hljs-comment">// 对转换的类型做限制</span><br>        <span class="hljs-keyword">return</span> clazz.isAssignableFrom(Demo.class);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 自定义媒体类型</span><br>        <span class="hljs-keyword">return</span> MediaType.parseMediaTypes(<span class="hljs-string">&quot;application/z-custom&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">read</span><span class="hljs-params">(Class&lt;? extends Demo&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(Demo demo, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">// 将数据以需要的形式写入到响应中</span><br>        outputMessage.getBody().write(demo.toString().getBytes());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册自定义的消息转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-comment">// 添加自定义消息转换器</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>            converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomMessageConverter</span>());<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加自定义类型到基于请求参数方式内容协商策略中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-comment">// 自定义内容协商策略</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContentNegotiation</span><span class="hljs-params">(ContentNegotiationConfigurer configurer)</span> &#123;<br>            Map&lt;String, MediaType&gt; mediaTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            mediaTypes.put(<span class="hljs-string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);<br>            mediaTypes.put(<span class="hljs-string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);<br>            mediaTypes.put(<span class="hljs-string">&quot;z-custom&quot;</span>, MediaType.parseMediaType(<span class="hljs-string">&quot;application/z-custom&quot;</span>));<br>            configurer.strategies(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterContentNegotiationStrategy</span>(mediaTypes),<br>                                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderContentNegotiationStrategy</span>()));<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加自定义的功能有可能会覆盖默认的很多功能，导致一些默认功能失效，需要谨慎使用</p><h4 id="视图解析原理"><a class="header-anchor" href="#视图解析原理"></a>视图解析原理</h4><ul><li>入口还是DispatcherServlet的<code>doDispatch</code>方法</li><li>HandlerAdapter通过反射执行完控制器方法后都会返回<code>ModelAndView</code>对象，该对象包含数据和视图地址</li><li>执行<code>processDispatchResult</code>方法，决定页面如何响应</li><li>调用render(mv, request, response)方法进行页面渲染逻辑</li><li>通过resolveViewName方法获取到View对象<ul><li>ContentNegotiationViewResolver中包含了所有支持的视图解析器，通过遍历视图解析器获取支持的解析器，然后解析得到视图对象</li></ul></li><li>调用view.render(mv.getModelInternal(), request, response)进行页面渲染工作</li></ul><h4 id="拦截器"><a class="header-anchor" href="#拦截器"></a>拦截器</h4><p>实现<code>HandlerInterceptor</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;force&quot;</span>));<br>    &#125;<br>    <span class="hljs-comment">// 根据需要实现postHandle、afterCompletion方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-comment">// 自定义拦截器</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>            registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminInterceptor</span>())<br>                    .addPathPatterns(<span class="hljs-string">&quot;/admin/**&quot;</span>)<br>                    .excludePathPatterns(<span class="hljs-string">&quot;/admin/hello&quot;</span>);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="拦截器原理"><a class="header-anchor" href="#拦截器原理"></a>拦截器原理</h5><ul><li><p>doDispatch方法中调用<code>getHandler</code>获取到<code>HandlerExecutionChain</code>对象，该对象包含了处理器和一个拦截器列表</p></li><li><p>按顺序执行所有拦截器的preHandle方法</p></li><li><p>若所有拦截器都放行，则执行目标方法</p><ul><li><p>多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关</p></li><li><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.GlobalHandlerInterceptor</span> preHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.AdminHandlerInterceptor</span> preHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.AdminHandlerInterceptor</span> postHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.GlobalHandlerInterceptor</span> postHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.AdminHandlerInterceptor</span> afterCompletion<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.GlobalHandlerInterceptor</span> afterCompletion<br></code></pre></td></tr></table></figure></li></ul></li><li><p>若某个拦截器执行preHandle没有放行</p><ul><li><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.GlobalHandlerInterceptor</span> preHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.AdminHandlerInterceptor</span> preHandle<br>com<span class="hljs-selector-class">.zhuweitung</span><span class="hljs-selector-class">.springboot2</span><span class="hljs-selector-class">.interceptor</span><span class="hljs-selector-class">.GlobalHandlerInterceptor</span> afterCompletion<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/c016ea9fb27fdd1f0e90d1d71d5efbd0.svg" alt=""></p><h4 id="文件上传"><a class="header-anchor" href="#文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart</span> MultipartFile[] files)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (files.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (MultipartFile file : files) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">newFileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + <span class="hljs-string">&quot;.&quot;</span> + FileUtil.getSuffix(file.getOriginalFilename());<br>            file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\tmp\\upload\\&quot;</span> + newFileName));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件上传大小</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">50MB</span> <span class="hljs-comment"># 单个文件最大值</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span> <span class="hljs-comment"># 单次请求文件大小总量最大值</span><br></code></pre></td></tr></table></figure><h5 id="自动配置原理-v2"><a class="header-anchor" href="#自动配置原理-v2"></a>自动配置原理</h5><ul><li><p>自动配置类为<code>MultipartAutoConfiguration</code>，属性类为<code>MultipartProperties</code></p></li><li><p>MultipartAutoConfiguration中将<code>StandardServletMultipartResolver</code>注册为multipartResolver（文件上传解析器）</p></li><li><p>文件上传请求会进入DispatcherServlet的<code>doDispatch</code>方法</p></li><li><p>进入<code>checkMultipart</code>方法，使用配置的文件上传解析器判断参数是否是multipart（判断 ContentType 上是否以 multipart 开始）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipart</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><span class="hljs-keyword">return</span> StringUtils.startsWithIgnoreCase(request.getContentType(),<br>(<span class="hljs-built_in">this</span>.strictServletCompliance ? MediaType.MULTIPART_FORM_DATA_VALUE : <span class="hljs-string">&quot;multipart/&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用参数解析器<code>RequestPartMethodArgumentResolver</code>对参数进行解析</p></li><li><p>将request中文件信息封装为一个Map，MultiValueMap&lt;String, MultipartFile&gt;</p></li><li><p>解析完成后将MultipartFile数组交给控制器方法处理</p></li></ul><h4 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h4><h5 id="默认规则"><a class="header-anchor" href="#默认规则"></a>默认规则</h5><ul><li>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</li><li>对于浏览器，响应<code>whitelabel</code>错误视图，以html形式呈现错误信息</li><li>对于非浏览器客户端，响应json数据其中包含错误，HTTP状态和异常消息的详细信息</li></ul><h5 id="自动配置原理-v3"><a class="header-anchor" href="#自动配置原理-v3"></a>自动配置原理</h5><ul><li><p><code>ErrorMvcAutoConfiguration</code>是异常处理规则的自动配置类</p></li><li><p>注册了<code>DefaultErrorAttributes</code>（errorAttributes）组件，定义错误信息中包含哪些内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultErrorAttributes</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ErrorAttributes</span>, HandlerExceptionResolver, Ordered &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册了<code>BasicErrorController</code>组件，默认路径为/error，有两个处理方法，分别返回页面（new ModelAndView(“error”, model)， error为下面注册的错误视图）和Json</p><ul><li>根据请求头中<code>Accept</code>是否为<code>text/html</code>，进入不同方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractErrorController</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册了一个id为<code>error</code>的错误视图</p></li><li><p>注册了<code>BeanNameViewResolver</code>视图解析器，作用是根据bean名称解析，服务于上面的错误视图</p></li><li><p>注册了<code>DefaultErrorViewResolver</code>，将不同错误渲染到不同页面上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>Map&lt;Series, String&gt; views = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;&gt;(Series.class);<br>views.put(Series.CLIENT_ERROR, <span class="hljs-string">&quot;4xx&quot;</span>);<br>views.put(Series.SERVER_ERROR, <span class="hljs-string">&quot;5xx&quot;</span>);<br>SERIES_VIEWS = Collections.unmodifiableMap(views);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> resolve(String.valueOf(status.value()), model);<br><span class="hljs-keyword">if</span> (modelAndView == <span class="hljs-literal">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;<br>modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);<br>&#125;<br><span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="异常处理流程"><a class="header-anchor" href="#异常处理流程"></a>异常处理流程</h5><ul><li><p>执行目标方法，目标方法有任何异常都会被catch，并被封装为dispatchException</p></li><li><p>进入<code>processDispatchResult</code>方法，进行视图解析</p></li><li><p>执行<code>processHandlerException</code>方法，处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerExceptionResolvers != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 遍历所有处理器异常解析器来处理异常</span><br><span class="hljs-keyword">for</span> (HandlerExceptionResolver resolver : <span class="hljs-built_in">this</span>.handlerExceptionResolvers) &#123;<br>exMv = resolver.resolveException(request, response, handler, ex);<br><span class="hljs-keyword">if</span> (exMv != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/040740b4eb23f058e0f512e14415f6b2.png" alt=""></p><ul><li>DefaultErrorAttributes将异常信息保存到request域，返回null视图</li><li>当没有解析器能够处理异常时，会继续向上抛出异常，底层会转达到/error</li></ul></li><li><p>/error请求被BasicErrorController处理</p><ul><li>解析错误视图，遍历所有ErrorViewResolver进行解析</li><li>DefaultErrorViewResolver会根据响应状态码获取返回页面名称（先根据精确的状态码查找页面，若没有再通过模糊的，如4xx、5xx进行查找），并拼接为地址</li><li>模板引擎最终响应这个页面</li></ul></li></ul><h5 id="自定义异常处理方式"><a class="header-anchor" href="#自定义异常处理方式"></a>自定义异常处理方式</h5><ul><li><p>自定义错误页</p><ul><li>error/404.html   error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul></li><li><p><code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>处理全局异常； <code>ExceptionHandlerExceptionResolver</code> 来处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(&#123;CustomException.class&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">handleCustom</span><span class="hljs-params">(Exception exception)</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(exception.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ResponseStatus</code>+自定义异常 ； <code>ResponseStatusExceptionResolver</code>来处理 ，获取@ResponseStatus注解的信息，然后底层调用 response.sendError(statusCode, resolvedReason)；tomcat发送的/error</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(value = HttpStatus.BAD_GATEWAY, reason = &quot;访问太频繁&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TooManyRequestException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7699893349483938519L</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Spring底层的异常，如参数类型转换异常；<code>DefaultHandlerExceptionResolver</code> 处理框架底层的异常</p></li><li><p>自定义实现 <code>HandlerExceptionResolver</code>接口来处理异常；可以作为默认的全局异常处理规则（优先级需要调高）</p></li><li><p>实现接口<code>ErrorViewResolver</code>来自定义错误视图处理</p><ul><li>如ErrorMvcAutoConfiguration中配置了DefaultErrorViewResolver，通过错误码拼接为地址，渲染对应模板文件在呈现给客户端</li></ul></li></ul><h4 id="Web原生组件注入"><a class="header-anchor" href="#Web原生组件注入"></a>Web原生组件注入</h4><p>JavaWeb原生组件就是Servlet、Filter、Listener</p><h5 id="使用注解"><a class="header-anchor" href="#使用注解"></a>使用注解</h5><p>当使用嵌入式容器时，可以通过使用 <code>@ServletComponentScan</code> 来启用对 <code>@WebServlet</code>、<code>@WebFilter</code> 和 <code>@WebListener</code> 注解的类的自动注册</p><p>这种方式注册的servlet不会经过spring的拦截器</p><h5 id="使用RegistrationBean"><a class="header-anchor" href="#使用RegistrationBean"></a>使用RegistrationBean</h5><p>可以使用 <code>ServletRegistrationBean</code>、 <code>FilterRegistrationBean</code> 和 <code>ServletListenerRegistrationBean</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegistConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MyServlet</span> <span class="hljs-variable">myServlet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>(myServlet,<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/my02&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">myFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MyFilter</span> <span class="hljs-variable">myFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFilter</span>();<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">filterRegistrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>(myFilter);<br>        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/my&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>));<br>        <span class="hljs-keyword">return</span> filterRegistrationBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title function_">myListener</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MySwervletContextListener</span> <span class="hljs-variable">mySwervletContextListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySwervletContextListener</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletListenerRegistrationBean</span>(mySwervletContextListener);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DispatchServlet注册的原理</p><ul><li><code>DispatcherServletAutoConfiguration</code>类中配置了名称为<code>dispatcherServlet</code>的<code>DispatcherServlet</code>的Bean</li><li><code>DispatcherServletRegistrationConfiguration</code>中通过RegistrationBean的方式注册了dispatcherServlet</li></ul><h3 id="数据访问"><a class="header-anchor" href="#数据访问"></a>数据访问</h3><h4 id="SQL"><a class="header-anchor" href="#SQL"></a>SQL</h4><h5 id="JDBC"><a class="header-anchor" href="#JDBC"></a>JDBC</h5><p>添加JDBC场景依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/97e12129e59c710db017f0a704bb8d97.png" alt=""></p><p>这个场景包引入了数据库连接池、jdbc、事务等包，但是数据库驱动需要根据项目情况手动引入</p><p>添加数据库对应版本的驱动包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相关自动配置类：</p><ul><li>DataSourceAutoConfiguration：数据源的自动配置</li><li>DataSourceTransactionManagerAutoConfiguration：事务管理器的自动配置</li><li>JdbcTemplateAutoConfiguration： JdbcTemplate的自动配置</li><li>JndiDataSourceAutoConfiguration： jndi的自动配置</li><li>XADataSourceAutoConfiguration：分布式事务相关的</li></ul><p>添加连接配置和连接池配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tmp?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><h5 id="更换连接池"><a class="header-anchor" href="#更换连接池"></a>更换连接池</h5><p>方式一：</p><p>添加连接池依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置类来覆盖默认数据源配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDataSourceConfig</span> &#123;<br>    <span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class="hljs-comment">// 复用yml文件中的连接配置</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setMinIdle(<span class="hljs-number">5</span>);<br>        druidDataSource.setMaxActive(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><p>添加连接池场景包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e61ac1a1d775977fe60faa8d1023e1ea.png" alt=""></p><p>这个场景包除了引入了方式一的依赖，还引入了自动配置包</p><p>自动配置类为<code>DruidDataSourceAutoConfigure</code>，导入了一下4个配置</p><ul><li>DruidSpringAopConfiguration：用于监控SpringBean</li><li>DruidStatViewServletConfiguration：配置StatViewServlet（监控页面）</li><li>DruidWebStatFilterConfiguration：配置WebStatFilter</li><li>DruidFilterConfiguration：所有Druid自己filter的配置</li></ul><p>添加连接配置和连接池配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">datasource:</span><br>  <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tmp?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">druid:</span><br>    <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">stat-view-servlet:</span> <span class="hljs-comment"># 开启监控页面</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">login-username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">login-password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h5 id="mybatis"><a class="header-anchor" href="#mybatis"></a>mybatis</h5><ul><li><p>添加场景包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1621383e0276e9a9db9509606e069a69.png" alt=""></p></li><li><p>修改相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启驼峰命名映射</span><br></code></pre></td></tr></table></figure></li><li><p>编写mapper接口，接口加上<code>@Mapper</code>注解，mybatis会自动扫描加上此注解的类</p><ul><li>使用<code>@MapperScan(basePackages=&quot;xxx&quot;)</code>注解，指定mapper接口包路径，就不需要在每个mapper接口上添加@Mapper注解了</li></ul></li><li><p>将mapper.xml文件放置对应目录下，与配置文件中<code>mapper-locations</code>描述的路径保持一致</p></li></ul><h5 id="mybatis-plus"><a class="header-anchor" href="#mybatis-plus"></a>mybatis-plus</h5><ul><li><p>添加场景包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8ce4e6c46c8f4e4939e31f7ac1896775.png" alt=""></p></li><li><p>修改相关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br><span class="hljs-comment">#  mapper-locations: classpath:mapper/*.xml # 有默认配置可以不配置</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启驼峰命名映射</span><br>    <span class="hljs-attr">default-enum-type-handler:</span> <span class="hljs-string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span> <span class="hljs-comment"># 枚举类处理</span><br></code></pre></td></tr></table></figure></li><li><p>分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启分页插件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Redis"><a class="header-anchor" href="#Redis"></a>Redis</h4><h5 id="引入与配置"><a class="header-anchor" href="#引入与配置"></a>引入与配置</h5><ul><li><p>添加场景包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/207ae50ed66915807bfa8d8f3bafdf55.png" alt=""></p></li></ul><p>​默认引入lettuce作为redis客户端</p><ul><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.123</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">46379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="自动配置"><a class="header-anchor" href="#自动配置"></a>自动配置</h5><ul><li>RedisAutoConfiguration：redis的自动配置类<ul><li>会导入LettuceConnectionConfiguration和JedisConnectionConfiguration，分别表示lettuce和jedis客户端的配置</li><li>注册了一个<code>RedisTemplate&lt;Object, Object&gt;</code>，键值都是object类型</li><li>注册了一个<code>StringRedisTemplate</code>，键值都是字符串类型</li></ul></li><li>RedisProperties：配置属性类</li></ul><h5 id="使用jedis"><a class="header-anchor" href="#使用jedis"></a>使用jedis</h5><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">client-type:</span> <span class="hljs-string">jedis</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="使用"><a class="header-anchor" href="#使用"></a>使用</h5><p>配置键值的序列化与反序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisSerializeConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        <span class="hljs-comment">// 日期序列化处理</span><br>        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);<br>        objectMapper.registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Jdk8Module</span>())<br>                .registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaTimeModule</span>())<br>                .registerModule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterNamesModule</span>());<br>        <span class="hljs-comment">// 存储java的类型，方便反序列化,没有这行，将存储为纯json字符串</span><br>        objectMapper.activateDefaultTyping(<br>                LaissezFaireSubTypeValidator.instance,<br>                ObjectMapper.DefaultTyping.NON_FINAL,<br>                JsonTypeInfo.As.WRAPPER_ARRAY);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">static</span> User user;<br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>        user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">46379</span>);<br>        user.setName(<span class="hljs-string">&quot;redis&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUserSetGet</span><span class="hljs-params">()</span> &#123;<br>        ValueOperations&lt;String, Object&gt; ops = redisTemplate.opsForValue();<br>        ops.set(<span class="hljs-string">&quot;junit:user:&quot;</span> + user.getId(), user);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ops.get(<span class="hljs-string">&quot;junit:user:&quot;</span> + user.getId());<br>        Assertions.assertNotNull(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单元测试"><a class="header-anchor" href="#单元测试"></a>单元测试</h3><h4 id="JUnit5-的变化"><a class="header-anchor" href="#JUnit5-的变化"></a>JUnit5 的变化</h4><p>Spring Boot 2.2.0 版本开始引入 <code>JUnit5</code> 作为单元测试默认库</p><p>JUnit5由三个不同的子项目组成，JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><ul><li>JUnit Platform: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</li><li>JUnit Jupiter: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个测试引擎，用于在Junit Platform上运行。</li><li>JUnit Vintage: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</li></ul><p><em>注意：SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</em></p><h4 id="引入"><a class="header-anchor" href="#引入"></a>引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用方式示例"><a class="header-anchor" href="#使用方式示例"></a>使用方式示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateTest</span> &#123;<br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepare</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用注解"><a class="header-anchor" href="#常用注解"></a>常用注解</h4><ul><li>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li>**@ParameterizedTest :**表示方法是参数化测试</li><li>**@RepeatedTest :**表示方法可重复执行</li><li>**@DisplayName :**为测试类或者测试方法设置展示名称</li><li>**@BeforeEach :**表示在每个单元测试之前执行</li><li>**@AfterEach :**表示在每个单元测试之后执行</li><li>**@BeforeAll :**表示在所有单元测试之前执行</li><li>**@AfterAll :**表示在所有单元测试之后执行</li><li>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</li><li>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</li><li>**@ExtendWith :**为测试类或测试方法提供扩展类引用</li></ul><h4 id="断言"><a class="header-anchor" href="#断言"></a>断言</h4><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证</p><p>这些断言方法都是 org.junit.jupiter.api.<code>Assertions</code> 的静态方法</p><h5 id="简单断言"><a class="header-anchor" href="#简单断言"></a>简单断言</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><h5 id="数组断言"><a class="header-anchor" href="#数组断言"></a>数组断言</h5><p>通过 <code>assertArrayEquals</code> 方法来判断两个对象或原始类型的数组是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">arrayEquals</span><span class="hljs-params">()</span> &#123;<br>    assertArrayEquals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="组合断言"><a class="header-anchor" href="#组合断言"></a>组合断言</h5><p><code>assertAll</code> 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br>    assertAll(<br>            () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">1</span> + <span class="hljs-number">1</span>),<br>            () -&gt; assertTrue(<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span>)<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="异常断言"><a class="header-anchor" href="#异常断言"></a>异常断言</h5><p>用于测试方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">exception</span><span class="hljs-params">()</span> &#123;<br>    assertThrows(ArithmeticException.class, () -&gt; System.out.println(<span class="hljs-number">1</span> % <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="超时断言"><a class="header-anchor" href="#超时断言"></a>超时断言</h5><p>用于测试方法超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 测试方法超过1s时不通过</span><br>    assertTimeout(Duration.ofSeconds(<span class="hljs-number">1</span>), () -&gt; Thread.sleep(<span class="hljs-number">100</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="快速失败"><a class="header-anchor" href="#快速失败"></a>快速失败</h5><p>通过 fail 方法直接使得测试失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFail</span><span class="hljs-params">()</span> &#123;<br> fail(<span class="hljs-string">&quot;This should fail&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前置条件"><a class="header-anchor" href="#前置条件"></a>前置条件</h4><p>JUnit 5 中的前置条件（assumptions）类似于断言，不同之处在于不满足的断言会使得测试方法失败，而不满足的前置条件只会使得测试方法的<code>执行终止</code>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DEV&quot;</span>;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleAssume</span><span class="hljs-params">()</span> &#123;<br>    assumeTrue(Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>));<br>    assumeFalse(Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;PROD&quot;</span>));<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">assumeThenDo</span><span class="hljs-params">()</span> &#123;<br>    assumingThat(<br>            Objects.equals(<span class="hljs-built_in">this</span>.environment, <span class="hljs-string">&quot;DEV&quot;</span>),<br>            () -&gt; System.out.println(<span class="hljs-string">&quot;In DEV&quot;</span>)<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。</p><p>assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h4 id="嵌套测试"><a class="header-anchor" href="#嵌套测试"></a>嵌套测试</h4><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DisplayName(&quot;A stack&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingAStackDemo</span> &#123;<br><br>    Stack&lt;Object&gt; stack;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">isInstantiatedWithNew</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Nested</span><br>    <span class="hljs-meta">@DisplayName(&quot;when new&quot;)</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhenNew</span> &#123;<br><br>        <span class="hljs-meta">@BeforeEach</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewStack</span><span class="hljs-params">()</span> &#123;<br>            stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;is empty&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            assertTrue(stack.isEmpty());<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPopped</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::pop);<br>        &#125;<br><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwsExceptionWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>            assertThrows(EmptyStackException.class, stack::peek);<br>        &#125;<br><br>        <span class="hljs-meta">@Nested</span><br>        <span class="hljs-meta">@DisplayName(&quot;after pushing an element&quot;)</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">AfterPushing</span> &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">anElement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;an element&quot;</span>;<br><br>            <span class="hljs-meta">@BeforeEach</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushAnElement</span><span class="hljs-params">()</span> &#123;<br>                stack.push(anElement);<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;it is no longer empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">()</span> &#123;<br>                assertFalse(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPopped</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.pop());<br>                assertTrue(stack.isEmpty());<br>            &#125;<br><br>            <span class="hljs-meta">@Test</span><br>            <span class="hljs-meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnElementWhenPeeked</span><span class="hljs-params">()</span> &#123;<br>                assertEquals(anElement, stack.peek());<br>                assertFalse(stack.isEmpty());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="参数化测试"><a class="header-anchor" href="#参数化测试"></a>参数化测试</h4><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码</p><p>实现<code>ArgumentsProvider</code>接口，任何外部文件都可以作为它的入参</p><h5 id="常用注解-v2"><a class="header-anchor" href="#常用注解-v2"></a>常用注解</h5><ul><li>@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</li><li>@NullSource: 表示为参数化测试提供一个null的入参</li><li>@EnumSource: 表示为参数化测试提供一个枚举入参</li><li>@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</li><li>@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</li></ul><h5 id="示例"><a class="header-anchor" href="#示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTest1</span><span class="hljs-params">(String string)</span> &#123;<br>    System.out.println(string);<br>    Assertions.assertTrue(StringUtils.isNotBlank(string));<br>&#125;<br><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@MethodSource(&quot;produce&quot;)</span> <span class="hljs-comment">// 指定产生数据的方法名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWithExplicitLocalMethodSource</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    Assertions.assertNotNull(name);<br>&#125;<br><br><span class="hljs-keyword">static</span> Stream&lt;String&gt; <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Stream.of(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指标监控"><a class="header-anchor" href="#指标监控"></a>指标监控</h3><h4 id="简介"><a class="header-anchor" href="#简介"></a>简介</h4><p>SpringBoot Actuator，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p><h4 id="使用-v2"><a class="header-anchor" href="#使用-v2"></a>使用</h4><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 暴露所有端点信息</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment"># 以web方式暴露</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span> <span class="hljs-comment"># 单独配置健康端点</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span> <span class="hljs-comment"># 显示详细详细</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="常用端点"><a class="header-anchor" href="#常用端点"></a>常用端点</h4><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>若应用程序是Web应用程序，则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>最常用的Endpoint</p><ul><li>Health：监控状况</li><li>Metrics：运行时指标</li><li>Loggers：日志记录</li></ul><h4 id="Health-Endpoint"><a class="header-anchor" href="#Health-Endpoint"></a>Health Endpoint</h4><p>Health Endpoint返回当前服务的健康状态，端点开启<code>show-details: always</code>后返回应用包含的一系列组件的健康状态</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/42c454794aab5df51d6ea2855a6a1673.png" alt=""></p><h4 id="Metrics-Endpoint"><a class="header-anchor" href="#Metrics-Endpoint"></a>Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到</p><ul><li>通过Metrics对接多种监控系统</li><li>简化核心Metrics开发</li><li>添加自定义Metrics或者扩展已有Metrics</li></ul><p>通过访问<code>/actuator/metrics</code>查看所有的指标名称</p><p>再通过访问<code>/actuator/metrics/&#123;requiredMetricName&#125;</code>查看指标的具体信息</p><h4 id="自定义端点信息"><a class="header-anchor" href="#自定义端点信息"></a>自定义端点信息</h4><h5 id="自定义健康信息"><a class="header-anchor" href="#自定义健康信息"></a>自定义健康信息</h5><p>需要实现<code>HealthIndicator</code>接口或者继承<code>AbstractHealthIndicator</code>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PMOpenHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 实现健康检查逻辑</span><br>        Map&lt;String, Object&gt; healthInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (DateUtil.isAM(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())) &#123;<br>            builder.status(Status.OUT_OF_SERVICE);<br>            healthInfo.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;上午暂停服务&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            builder.up();<br>            healthInfo.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;正常服务中&quot;</span>);<br>        &#125;<br>        builder.withDetails(healthInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看健康状态</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d52a1f4bd4489eeb26eda9bb7578812d.png" alt=""></p><h5 id="自定义info信息"><a class="header-anchor" href="#自定义info信息"></a>自定义info信息</h5><p>方式一：</p><p>在配置文件中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">projectName:</span> <span class="hljs-string">@project.artifactId@</span>  <span class="hljs-comment">#使用@可以获取maven的pom文件值</span><br>  <span class="hljs-attr">projectVersion:</span> <span class="hljs-string">@project.version@</span><br></code></pre></td></tr></table></figure><p>方式二：</p><p>实现<code>InfoContributor</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        builder.withDetail(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jdap&quot;</span>)<br>                .withDetail(<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-string">&quot;1.0.0&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="自定义指标信息"><a class="header-anchor" href="#自定义指标信息"></a>自定义指标信息</h5><p>比如说我想要获取文件上传次数的指标，可以使用以下方式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br>    <span class="hljs-keyword">private</span> Counter counter;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FileController</span><span class="hljs-params">(MeterRegistry meterRegistry)</span> &#123;<br>        counter = meterRegistry.counter(<span class="hljs-string">&quot;file.upload.counter&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart</span> MultipartFile[] files)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        counter.increment();<br>        <span class="hljs-comment">// do upload</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在其他场景中也可以使用以下方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>MeterBinder <span class="hljs-title function_">queueSize</span><span class="hljs-params">(Queue queue)</span> &#123;<br>    <span class="hljs-keyword">return</span> (registry) -&gt; Gauge.builder(<span class="hljs-string">&quot;queueSize&quot;</span>, queue::size).register(registry);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义端点"><a class="header-anchor" href="#自定义端点"></a>自定义端点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;container&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DockerEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">getDockerInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Collections.singletonMap(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&quot;docker started...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@WriteOperation</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restartDocker</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;docker restarted....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可视化"><a class="header-anchor" href="#可视化"></a>可视化</h4><p>使用<a href="https://github.com/codecentric/spring-boot-admin">spring-boot-admin</a>实现可视化，<a href="https://codecentric.github.io/spring-boot-admin/current/getting-started.html">参考文档</a></p><h5 id="监控可视化平台服务端"><a class="header-anchor" href="#监控可视化平台服务端"></a>监控可视化平台服务端</h5><p>另起一个项目作为监控可视化平台</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指标监控可视化 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置服务端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8124</span><br></code></pre></td></tr></table></figure><h5 id="客户端"><a class="header-anchor" href="#客户端"></a>客户端</h5><p>客户端就是被监控的项目</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 指标监控可视化客户端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://127.0.0.1:8124</span> <span class="hljs-comment"># 服务端地址</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">jdap</span> <span class="hljs-comment"># 此名称用于服务端显示作为标识</span><br></code></pre></td></tr></table></figure><h3 id="原理解析"><a class="header-anchor" href="#原理解析"></a>原理解析</h3><h4 id="Profile功能"><a class="header-anchor" href="#Profile功能"></a>Profile功能</h4><p>用于多环境适配</p><h5 id="application-profile功能"><a class="header-anchor" href="#application-profile功能"></a>application-profile功能</h5><ul><li><p>默认配置文件  application.yaml；任何时候都会加载</p></li><li><p>指定环境配置文件  application-{env}.yaml</p><ul><li>application-dev.yml</li><li>application-prod.yml</li></ul></li><li><p>激活指定环境</p></li><li><ul><li><p>配置文件激活，在默认配置文件中进行以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure></li><li><p>命令行激活：java -jar xxx.jar –<strong>spring.profiles.active=dev</strong></p></li></ul></li><li><p>默认配置与环境配置同时生效</p></li><li><p>同名配置项，profile配置优先</p></li></ul><h5 id="Profile条件装配功能"><a class="header-anchor" href="#Profile条件装配功能"></a>@Profile条件装配功能</h5><p>标记类在指定环境下才生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductionConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="profile分组"><a class="header-anchor" href="#profile分组"></a>profile分组</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attr">group:</span> <br>      <span class="hljs-attr">prod:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">prod1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">prod2</span><br>      <span class="hljs-attr">dev:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">dev1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">dev2</span><br></code></pre></td></tr></table></figure><p>spring.profiles.active指定组名来激活环境组</p><h4 id="外部化配置"><a class="header-anchor" href="#外部化配置"></a>外部化配置</h4><h5 id="外部配置源"><a class="header-anchor" href="#外部配置源"></a>外部配置源</h5><p>Java属性文件、YAML文件、环境变量、命令行参数</p><h5 id="配置文件查找位置"><a class="header-anchor" href="#配置文件查找位置"></a>配置文件查找位置</h5><p>以下位置的配置文件中，若出现相同配置项，从下到上依次覆盖</p><ul><li>classpath 根路径</li><li>classpath 根路径下config目录</li><li>jar包当前目录</li><li>jar包当前目录的config目录</li><li>/config子目录的直接子目录</li></ul><h5 id="配置文件加载顺序"><a class="header-anchor" href="#配置文件加载顺序"></a>配置文件加载顺序</h5><ol><li>当前jar包内部的application.properties和application.yml</li><li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部jar包的application.properties和application.yml</li><li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li></ol><h5 id="总结-v2"><a class="header-anchor" href="#总结-v2"></a>总结</h5><p>指定的环境配置优先，外部优先，后面的可以覆盖前面的同名配置项</p><h4 id="SpringBoot原理"><a class="header-anchor" href="#SpringBoot原理"></a>SpringBoot原理</h4><h5 id="SpringBoot启动过程"><a class="header-anchor" href="#SpringBoot启动过程"></a>SpringBoot启动过程</h5><ul><li><p>SpringApplication.run(启动类.class, args)</p></li><li><p>new SpringApplication(primarySources).run(args)：创建一个SpringApplication并运行</p></li><li><p>SpringApplication的创建</p><ul><li><p>保存一些信息</p></li><li><p>获取web应用类型，servlet或webflux</p></li><li><p><code>bootstrapRegistryInitializers</code>：获取引导注册初始化器</p><ul><li>从<code>META-INF/spring.factories</code>文件中读取org.springframework.boot.<code>BootstrapRegistryInitializer</code>类型的类</li></ul></li><li><p><code>initializers</code>：获取应用初始化器</p><ul><li><p>从<code>META-INF/spring.factories</code>文件中读取org.springframework.context.<code>ApplicationContextInitializer</code>类型的类</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6709bf8c8c5c53d9d6b5c2afe7befc2c.png" alt=""></p></li></ul></li><li><p><code>listeners</code>：获取应用监听器</p><ul><li><p>从<code>META-INF/spring.factories</code>文件中读取org.springframework.context.<code>ApplicationListener</code>类型的类</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/9bdf85bd2caaab388411825bf8a097d3.png" alt=""></p></li></ul></li><li><p>deduceMainApplicationClass()：推导出main方法所在类</p></li></ul></li><li><p>SpringApplication的运行</p><ul><li><p>记录应用启动时间</p></li><li><p><code>createBootstrapContext</code>()：创建引导上下文</p><ul><li>创建DefaultBootstrapContext对象</li><li>遍历<code>bootstrapRegistryInitializers</code>，调用initialize方法初始化上下文环境设置</li></ul></li><li><p>configureHeadlessProperty()：让当前应用进行headless模式，java.awt.headless</p></li><li><p>getRunListeners()：获取运行监听器</p><ul><li><p>从<code>META-INF/spring.factories</code>文件中读取org.springframework.boot.<code>SpringApplicationRunListener</code>类型的类</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/84164a12f76164b2670e66078417f982.png" alt=""></p></li></ul></li><li><p>listeners.starting(bootstrapContext, this.mainApplicationClass)：遍历上面获取的所有运行监听器，调用<code>starting</code>方法，相当于通知关心系统启动事件的监听器系统已启动</p></li><li><p>applicationArguments：保存命令行参数</p></li><li><p>prepareEnvironment()：准备环境信息</p><ul><li><p>getOrCreateEnvironment()：获取或创建一个环境信息</p></li><li><p>configureEnvironment()：配置环境信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment, String[] args)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.addConversionService) &#123;<br>        <span class="hljs-comment">// 设置类型转换器</span><br>environment.setConversionService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationConversionService</span>());<br>&#125;<br>    <span class="hljs-comment">// 读取所有的配置源的配置属性值</span><br>configurePropertySources(environment, args);<br>configureProfiles(environment, args);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ConfigurationPropertySources.attach(environment)：绑定环境信息</p></li><li><p>listeners.environmentPrepared(bootstrapContext, environment)：遍历运行监听器调用<code>environmentPrepared</code>方法，通知所有运行监听器当前环境已准备完毕</p></li></ul></li><li><p>打印banner</p></li><li><p><code>createApplicationContext</code>()：创建IOC容器</p><ul><li>根据项目类型(servlet)创建容器</li><li>当前会创建<code>AnnotationConfigServletWebServerApplicationContext</code></li></ul></li><li><p><code>prepareContext</code>()：准备IOC容器信息</p><ul><li>context.setEnvironment(environment)：保存环境信息到容器中</li><li>postProcessApplicationContext()：IOC容器后置处理</li><li>applyInitializers()：应用初始化器<ul><li>遍历创建阶段获取的<code>ApplicationContextInitializer</code>，调用initialize方法对IOC容器进行初始化扩展</li></ul></li><li>listeners.contextPrepared(context)：遍历运行监听器调用<code>contextPrepared</code>方法，通知所有运行监听器IOC容器已准备完毕</li><li>listeners.contextLoaded(context)：遍历运行监听器调用<code>contextLoaded</code>方法，通知所有运行监听器IOC容器已加载完毕</li></ul></li><li><p><code>refreshContext</code>()：刷新IOC容器</p><ul><li>创建容器中的所有组件</li></ul></li><li><p>打印启动耗时</p></li><li><p>listeners.started(context, timeTakenToStartup)：遍历运行监听器调用<code>started</code>方法，通知所有运行监听器当前项目已启动</p></li><li><p>callRunners()：调用所有的runner</p><ul><li>从IOC容器中获取org.springframework.boot.<code>ApplicationRunner</code>和org.springframework.boot.<code>CommandLineRunner</code>类型的runner对象</li><li>将所有runner按order排序</li><li>遍历所有runner调用run方法</li></ul></li><li><p>启动成功或失败</p><ul><li>若启动没有异常<ul><li>listeners.ready(context, timeTakenToReady)：遍历运行监听器调用<code>ready</code>方法，通知所有运行监听器当前项目已准备就绪</li></ul></li><li>若启动有异常<ul><li>调用handleRunFailure方法，处理运行失败情况<ul><li>isteners.failed(context, exception)：遍历运行监听器调用<code>failed</code>方法，通知所有运行监听器当前项目启动失败</li></ul></li></ul></li></ul></li></ul></li></ul><h5 id="SpringBoot启动过程中的关键组件"><a class="header-anchor" href="#SpringBoot启动过程中的关键组件"></a>SpringBoot启动过程中的关键组件</h5><ul><li>org.springframework.context.<code>ApplicationContextInitializer</code></li><li>org.springframework.context.<code>ApplicationListener</code></li><li>org.springframework.boot.<code>SpringApplicationRunListener</code></li><li>org.springframework.boot.<code>ApplicationRunner</code></li><li>org.springframework.boot.<code>CommandLineRunner</code></li></ul><h5 id="自定义关键组件注意事项"><a class="header-anchor" href="#自定义关键组件注意事项"></a>自定义关键组件注意事项</h5><p>继承对应的接口，实现对应的方法</p><p>除了上面的两个runner，其他类都需要在再<code>META-INF/spring.factories</code>文件中声明</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.zhuweitung.jdap.listener.MyApplicationContextInitializer</span><br><br><span class="hljs-attr">org.springframework.context.ApplicationListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.zhuweitung.jdap.listener.MyApplicationListener</span><br><br><span class="hljs-attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.zhuweitung.jdap.listener.MySpringApplicationRunListener</span><br></code></pre></td></tr></table></figure><p>上面的两个runner需要加上<code>@Component</code>注解注册为组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      log.info(<span class="hljs-string">&quot;MyApplicationRunner run, args is &#123;&#125;&quot;</span>, Arrays.toString(args.getSourceArgs()));<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Order(2)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCommandLineRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;MyCommandLineRunner run, args is &#123;&#125;&quot;</span>, Arrays.toString(args));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus知识查漏补缺</title>
      <link href="/posts/2685019757/"/>
      <url>/posts/2685019757/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a class="header-anchor" href="#简介"></a>简介</h3><p>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</p><h4 id="特性"><a class="header-anchor" href="#特性"></a>特性</h4><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h4 id="框架结构"><a class="header-anchor" href="#框架结构"></a>框架结构</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2c811cc00ff856f526607bdc3f7788b5.png" alt=""></p><h3 id="环境搭建"><a class="header-anchor" href="#环境搭建"></a>环境搭建</h3><p>记录Spring+MybatisPlus环境的搭建（完全注解）</p><p>添加Spring配置核心类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.zhuweitung&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加Mybatis配置核心类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.zhuweitung.mp.mapper&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSourceClassName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dataSourceClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.jdbcUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcUrl;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;minimumIdle&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer minimumIdle;<br>    <span class="hljs-meta">@Value(&quot;$&#123;maximumPoolSize&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer maximumPoolSize;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.put(<span class="hljs-string">&quot;dataSourceClassName&quot;</span>, dataSourceClassName);<br>        properties.put(<span class="hljs-string">&quot;dataSource.jdbcUrl&quot;</span>, jdbcUrl);<br>        properties.put(<span class="hljs-string">&quot;dataSource.username&quot;</span>, username);<br>        properties.put(<span class="hljs-string">&quot;dataSource.password&quot;</span>, password);<br>        properties.put(<span class="hljs-string">&quot;minimumIdle&quot;</span>, minimumIdle);<br>        properties.put(<span class="hljs-string">&quot;maximumPoolSize&quot;</span>, maximumPoolSize);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariConfig</span>(properties));<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">sessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>        sessionFactoryBean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> sessionFactoryBean.getObject();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(&#123;SpringConfig.class, MybatisConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>        System.out.println(users.size());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用注解"><a class="header-anchor" href="#常用注解"></a>常用注解</h3><ul><li><p>@TableName：指定类所表示的表名</p></li><li><p>TableId：标明主键</p><ul><li><p>value：若属性名与数据库字段名称不一致，可以使用此属性</p></li><li><p>type：主键生成策略</p><table><thead><tr><th style="text-align:center">主键生成策略</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">IdType.ASSIGN_ID（默认）</td><td style="text-align:center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td style="text-align:center">IdType.AUTO</td><td style="text-align:center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增</td></tr></tbody></table></li></ul></li><li><p>@TbaleField：指定属性所表示的字段名</p></li><li><p>@TableLogic：指定逻辑删除标识符</p></li></ul><h3 id="条件构造器"><a class="header-anchor" href="#条件构造器"></a>条件构造器</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ba7192142285aa2138bcd07c04a528b7.png" alt=""></p><ul><li><code>Wrapper</code> ： 条件构造抽象类，最顶端父类<ul><li><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</li><li><code>QueryWrapper </code>： 查询条件封装</li><li><code>UpdateWrapper </code>： Update 条件封装</li><li><code>AbstractLambdaWrapper </code>： 使用Lambda 语法<ul><li><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</li><li><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul><h4 id="QueryWrapper"><a class="header-anchor" href="#QueryWrapper"></a>QueryWrapper</h4><h5 id="组装查询排序条件"><a class="header-anchor" href="#组装查询排序条件"></a>组装查询排序条件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>query.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ma&quot;</span>)<br>        .ge(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">22</span>)<br>        .le(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">30</span>)<br>        .orderByAsc(<span class="hljs-string">&quot;age&quot;</span>)<br>        .orderByDesc(<span class="hljs-string">&quot;name&quot;</span>);<br>List&lt;TUser&gt; users = tUserService.list(query);<br></code></pre></td></tr></table></figure><h5 id="条件的优先级"><a class="header-anchor" href="#条件的优先级"></a>条件的优先级</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询用户名包含zl且（年龄大于20或邮箱为null）的用户信息</span><br>QueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>query.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zl&quot;</span>)<br>        .and(i -&gt; i.ge(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>));<br>List&lt;TUser&gt; users = tUserService.list(query);<br></code></pre></td></tr></table></figure><h5 id="组装select子句"><a class="header-anchor" href="#组装select子句"></a>组装select子句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>query.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zl&quot;</span>)<br>        .and(i -&gt; i.ge(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>))<br>        .select(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>);<br>List&lt;Map&lt;String, Object&gt;&gt; maps = tUserService.listMaps(query);<br></code></pre></td></tr></table></figure><h5 id="实现子查询"><a class="header-anchor" href="#实现子查询"></a>实现子查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>query.inSql(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;select id from t_user where name like &#x27;%op%&#x27;&quot;</span>);<br>List&lt;TUser&gt; users = tUserService.list(query);<br></code></pre></td></tr></table></figure><h4 id="UpdateWrapper"><a class="header-anchor" href="#UpdateWrapper"></a>UpdateWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">UpdateWrapper&lt;TUser&gt; update = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>update.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zl&quot;</span>)<br>        .and(i -&gt; i.ge(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>).or().isNull(<span class="hljs-string">&quot;email&quot;</span>))<br>        .set(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;no-reply@kedr.cc&quot;</span>);<br>tUserService.update(<span class="hljs-literal">null</span>, update);<br></code></pre></td></tr></table></figure><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p><h4 id="condition"><a class="header-anchor" href="#condition"></a>condition</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-type">String</span> <span class="hljs-variable">nameLike</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">ageLe</span> <span class="hljs-operator">=</span> <span class="hljs-number">21</span>;<br>query.like(StrUtil.isNotEmpty(nameLike), <span class="hljs-string">&quot;name&quot;</span>, nameLike)<br>        .le(ageLe != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;age&quot;</span>, ageLe);<br>List&lt;TUser&gt; users = tUserService.list(query);<br>users.forEach(u -&gt; log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, u));<br></code></pre></td></tr></table></figure><p>先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p><h4 id="LambdaQueryWrapper"><a class="header-anchor" href="#LambdaQueryWrapper"></a>LambdaQueryWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaQueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>query.like(TUser::getName, <span class="hljs-string">&quot;zl&quot;</span>)<br>        .and(i -&gt; i.ge(TUser::getAge, <span class="hljs-number">20</span>).or().isNull(TUser::getEmail))<br>        .select(TUser::getName, TUser::getAge, TUser::getEmail);<br>List&lt;Map&lt;String, Object&gt;&gt; maps = tUserService.listMaps(query);<br>maps.forEach(m -&gt; log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, m));<br></code></pre></td></tr></table></figure><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名</p><h4 id="LambdaUpdateWrapper"><a class="header-anchor" href="#LambdaUpdateWrapper"></a>LambdaUpdateWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaUpdateWrapper&lt;TUser&gt; update = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>update.like(TUser::getName, <span class="hljs-string">&quot;zl&quot;</span>)<br>        .and(i -&gt; i.ge(TUser::getAge, <span class="hljs-number">20</span>).or().isNull(TUser::getEmail))<br>        .set(TUser::getEmail, <span class="hljs-string">&quot;no-reply@kedr.cc&quot;</span>);<br>tUserService.update(<span class="hljs-literal">null</span>, update);<br></code></pre></td></tr></table></figure><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名</p><h3 id="常用插件"><a class="header-anchor" href="#常用插件"></a>常用插件</h3><h4 id="分页插件"><a class="header-anchor" href="#分页插件"></a>分页插件</h4><p>mybatis-plus自带分页插件</p><h5 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h5><p>在配置类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">MybatisSqlSessionFactoryBean</span> <span class="hljs-variable">sessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisSqlSessionFactoryBean</span>();<br>    sessionFactoryBean.setDataSource(dataSource);<br>    <br>    <span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br>    <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>    <span class="hljs-comment">// 添加分页插件</span><br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>    configuration.addInterceptor(interceptor);<br>    sessionFactoryBean.setConfiguration(configuration);<br>    <span class="hljs-keyword">return</span> sessionFactoryBean.getObject();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectPage</span><span class="hljs-params">()</span> &#123;<br>    LambdaQueryWrapper&lt;TUser&gt; query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    query.like(TUser::getName, <span class="hljs-string">&quot;zl&quot;</span>)<br>            .and(i -&gt; i.ge(TUser::getAge, <span class="hljs-number">20</span>).or().isNull(TUser::getEmail));<br>    Page&lt;TUser&gt; page = tUserService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>), query);<br>    page.getRecords().forEach(u -&gt; log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, u));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义方法启用分页"><a class="header-anchor" href="#自定义方法启用分页"></a>自定义方法启用分页</h4><p>mapper和mapper.xml中分别添加查询方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Page&lt;TUser&gt; selectPageVo(@Param(&quot;page&quot;) Page&lt;TUser&gt; page, @Param(&quot;age&quot;) Integer age); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPageVo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zhuweitung.mp.model.TUser&quot;</span>&gt;</span><br>    select *<br>    from t_user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>            and age &gt;= #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Page&lt;TUser&gt; page = tUserMapper.selectPageVo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>), <span class="hljs-number">21</span>);<br>page.getRecords().forEach(u -&gt; log.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, u));<br></code></pre></td></tr></table></figure><h4 id="乐观锁和悲观锁"><a class="header-anchor" href="#乐观锁和悲观锁"></a>乐观锁和悲观锁</h4><h5 id="乐观锁"><a class="header-anchor" href="#乐观锁"></a>乐观锁</h5><p>乐观锁总是假设最好的情况，认为共享资源每次被访问的时候不会出现问题，线程可以不停地执行，无需加锁也无需等待，只是在提交修改的时候去验证对应的资源（也就是数据）是否被其它线程修改了（具体方法可以使用版本号机制或 CAS 算法）；</p><p>乐观锁通常多于写比较少的情况下（多读场景），避免频繁加锁影响性能，大大提升了系统的吞吐量；</p><p>Java中的<code>java.util.concurrent.atomic</code>包下面的原子变量类就是使用了乐观锁的一种实现方式 <strong>CAS</strong> 实现的；</p><p>mybatis-plus的乐观锁实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h5 id="悲观锁"><a class="header-anchor" href="#悲观锁"></a>悲观锁</h5><p>悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放；</p><p>即共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程；</p><p>Java 中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现；</p><h4 id="开启乐观锁插件"><a class="header-anchor" href="#开启乐观锁插件"></a>开启乐观锁插件</h4><p>实体类添加<code>@Version</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加乐观锁插件配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加乐观锁插件</span><br>interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>configuration.addInterceptor(interceptor);<br>sessionFactoryBean.setConfiguration(configuration);<br></code></pre></td></tr></table></figure><h3 id="通用枚举"><a class="header-anchor" href="#通用枚举"></a>通用枚举</h3><ul><li><p>创建枚举类</p><ul><li><p>方式一：使用<code>@EnumValue</code>标记需要存储到数据库的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserSex</span> &#123;<br>    FEMALE(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;女&quot;</span>),<br>    MALE(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br>    <span class="hljs-comment">// 将注解所标识的属性的值存储到数据库中</span><br>    <span class="hljs-meta">@EnumValue</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    UserSex(Integer value, String name) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：实现<code>IEnum&lt;T&gt;</code>接口，getValue()方法标记存储到数据库的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserSex2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IEnum</span>&lt;Integer&gt; &#123;<br>    FEMALE(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;女&quot;</span>),<br>    MALE(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;男&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><br>    UserSex2(Integer value, String name) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>实体类属性使用枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TUser</span> &#123;<br><br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> UserSex sex;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置全局默认枚举类型处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><br><span class="hljs-type">MybatisConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisConfiguration</span>();<br><span class="hljs-comment">// 配置全局默认枚举类型处理器</span><br>configuration.setDefaultEnumTypeHandler(MybatisEnumTypeHandler.class);<br>sessionFactoryBean.setConfiguration(configuration);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="多数据源"><a class="header-anchor" href="#多数据源"></a>多数据源</h3><p>适用场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p><p>下面以spring-boot项目作为配置示例</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 配置数据源信息</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">dynamic:</span><br>      <span class="hljs-comment"># 设置默认的数据源或者数据源组,默认值即为master</span><br>      <span class="hljs-attr">primary:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span><br>      <span class="hljs-attr">strict:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">master:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tmp1?characterEncoding=utf-8&amp;useSSL=false</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>        <span class="hljs-attr">slave_1:</span><br>          <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tmp2?characterEncoding=utf-8&amp;useSSL=false</span><br>          <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>在Service上指定操作的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DS(&quot;master&quot;)</span> <span class="hljs-comment">// 指定操作的数据源，user表master库</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;&#125;<br><span class="hljs-meta">@DS(&quot;slave_1&quot;)</span> <span class="hljs-comment">// 指定操作的数据源，product表slave_1库</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Product&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="字段类型处理器"><a class="header-anchor" href="#字段类型处理器"></a>字段类型处理器</h3><p>类型处理器，用于 JavaType 与 JdbcType 之间的转换，用于 PreparedStatement 设置参数值和从 ResultSet 或 CallableStatement 中取出一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@TableName(autoResultMap = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注意！！ 必须开启映射注解</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@TableName</span>(autoResultMap = true)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 以下两种类型处理器，二选一 也可以同时存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 注意！！选择对应的 JSON 处理器也必须存在对应 JSON 解析依赖包</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(typeHandler = JacksonTypeHandler.class)</span><br>    <span class="hljs-comment">// @TableField(typeHandler = FastjsonTypeHandler.class)</span><br>    <span class="hljs-keyword">private</span> OtherInfo otherInfo;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动填充功能"><a class="header-anchor" href="#自动填充功能"></a>自动填充功能</h3><p>原理:</p><ul><li><p>实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.MetaObjectHandler</p></li><li><p>注解填充字段 <code>@TableField(fill = FieldFill.INSERT)</code> 生成器策略部分也可以配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-comment">// 注意！这里需要标记为填充字段</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> String fillField;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>自定义实现类 MyMetaObjectHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strictInsertFill(metaObject, <span class="hljs-string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strictUpdateFill(metaObject, <span class="hljs-string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="拓展知识"><a class="header-anchor" href="#拓展知识"></a>拓展知识</h3><h4 id="雪花算法"><a class="header-anchor" href="#雪花算法"></a>雪花算法</h4><h5 id="背景"><a class="header-anchor" href="#背景"></a>背景</h5><p>需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。 数据库的扩展方式主要包括：业务分库、主从复制，数据库分表。</p><h5 id="数据库分表"><a class="header-anchor" href="#数据库分表"></a>数据库分表</h5><p>将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务 继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据， 如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进 行拆分。 单表数据拆分有两种方式：垂直分表和水平分表</p><ul><li><p>垂直分表：垂直分表适合将表中某些不常用且占了大量空间的列拆分出去</p></li><li><p>水平分表：水平分表适合表行数特别大的表；水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处理</p><ul><li><p>主键自增：以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1中， 1000000 ~ 1999999 放到表2中，以此类推</p><ul><li>复杂点：分段大小的选取，需要根据业务选取合适 的分段大小</li><li>优点：可以随着数据的增加平滑地扩充新的表；如，现在的用户是 100 万，如果增加到 1000 万， 只需要增加新的表就可以了，原有的数据不需要动</li><li>缺点：分布不均匀</li></ul></li><li><p>取模：同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来 表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号 为 6 的子表中</p><ul><li>复杂点：初始表数量的确定；表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题</li><li>优点：表分布比较均匀</li><li>缺点：扩充新的表很麻烦，所有数据都要重分布</li></ul></li><li><p>雪花算法：它能够保证不同表的主键的不重复性，以及相同表的 主键的有序性</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/fb75e632199ef44ea240644cea6ebbf9.png" alt=""></p><ul><li>长度共64bit（一个long型）<ul><li>符号位，1bit</li><li>时间戳位，41bit，毫秒级，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年</li><li>机器ID（5bit是数据中心，5bit是机器ID），10bit，可以部署在1024个节点</li><li>流水号，12bit号（意味着每个节点在每毫秒可以产生 4096 个 ID）</li></ul></li><li>优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis知识回顾及查漏补缺</title>
      <link href="/posts/3535759969/"/>
      <url>/posts/3535759969/</url>
      
        <content type="html"><![CDATA[<h3 id="Mybatis特性"><a class="header-anchor" href="#Mybatis特性"></a>Mybatis特性</h3><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis是一个半自动的ORM（Object Relation Mapping）框架</li></ol><h4 id="和其它持久化层技术对比"><a class="header-anchor" href="#和其它持久化层技术对比"></a>和其它持久化层技术对比</h4><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h3 id="核心配置文件"><a class="header-anchor" href="#核心配置文件"></a>核心配置文件</h3><blockquote><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加载jdbc配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybatis设置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开启驼峰命名自动映射 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 类型别名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhuweitung.mybatis.model&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 环境配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 事务管理器</span><br><span class="hljs-comment">             JDBC：使用了 JDBC 的提交和回滚功能</span><br><span class="hljs-comment">             MANAGED：让容器来管理事务的整个生命周期</span><br><span class="hljs-comment">             若使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 数据源</span><br><span class="hljs-comment">            UNPOOLED：不使用连接池</span><br><span class="hljs-comment">            POOLED：使用连接池</span><br><span class="hljs-comment">            JNDI：使用上下文中的数据源</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.jdbcUrl&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 映射器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zhuweitung.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获取参数值的方式"><a class="header-anchor" href="#获取参数值的方式"></a>获取参数值的方式</h3><ul><li>MyBatis获取参数值的两种方式：<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code></li><li><code>$&#123;&#125;</code>的本质就是字符串拼接，<code>#&#123;&#125;</code>的本质就是占位符赋值</li><li><code>$&#123;&#125;</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是<code>#&#123;&#125;</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h4 id="单个字面量类型的参数"><a class="header-anchor" href="#单个字面量类型的参数"></a>单个字面量类型的参数</h4><p>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserByName(String name);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from user where name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>select * from user where name = &#x27;$&#123;name&#125;&#x27;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="多个字面量类型的参数"><a class="header-anchor" href="#多个字面量类型的参数"></a>多个字面量类型的参数</h4><ul><li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1.</span> 以ar<span class="hljs-name">g0</span>,ar<span class="hljs-name">g1.</span>..为键，以参数为值；<br><span class="hljs-number">2.</span> 以para<span class="hljs-name">m1</span>,para<span class="hljs-name">m2.</span>..为键，以参数为值；<br></code></pre></td></tr></table></figure></li><li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p></li><li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLogin(String name, String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>  <br>select * from user where name = #&#123;arg0&#125; and password = #&#123;arg1&#125;  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from user where name = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="map集合类型的参数"><a class="header-anchor" href="#map集合类型的参数"></a>map集合类型的参数</h4><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select * from user where name = #&#123;name&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="实体类类型的参数"><a class="header-anchor" href="#实体类类型的参数"></a>实体类类型的参数</h4><p>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into user values(null,#&#123;name&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-Param标识参数"><a class="header-anchor" href="#使用-Param标识参数"></a>使用@Param标识参数</h4><ul><li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 以@Param注解的value属性值为键，以参数为值；<br><span class="hljs-bullet">2.</span> 以param1,param2...为键，以参数为值；<br></code></pre></td></tr></table></figure></li><li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User CheckLoginByParam(@Param(&quot;name&quot;) String name, @Param(&quot;password&quot;) String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CheckLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from user where name = #&#123;name&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Param源码解析"><a class="header-anchor" href="#Param源码解析"></a>@Param源码解析</h5><p>ParamNameResolver类中将参数解析为map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNamedParams</span><span class="hljs-params">(Object[] args)</span> &#123;<br>  <span class="hljs-comment">// names是一个SortedMap&lt;Integer, String&gt;，键为参数索引，值为参数名</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">paramCount</span> <span class="hljs-operator">=</span> names.size();<br>  <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || paramCount == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// hasParamAnnotation成员变量在Mapper方法参数中有一个参数加上@Param注解就会是true</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> args[names.firstKey()];<br>    <span class="hljs-keyword">return</span> wrapToMapIfCollection(value, useActualParamName ? names.get(<span class="hljs-number">0</span>) : <span class="hljs-literal">null</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamMap</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;<br>      <span class="hljs-comment">// 以获取到的参数名为键</span><br>      param.put(entry.getValue(), args[entry.getKey()]);<br>      <span class="hljs-comment">// add generic param names (param1, param2, ...)</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">genericParamName</span> <span class="hljs-operator">=</span> GENERIC_NAME_PREFIX + (i + <span class="hljs-number">1</span>);<br>      <span class="hljs-comment">// ensure not to overwrite parameter named with @Param</span><br>      <span class="hljs-keyword">if</span> (!names.containsValue(genericParamName)) &#123;<br>        <span class="hljs-comment">// 以param1为键，所以两种方式都可以获取到值</span><br>        param.put(genericParamName, args[entry.getKey()]);<br>      &#125;<br>      i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> param;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="各种查询功能"><a class="header-anchor" href="#各种查询功能"></a>各种查询功能</h3><p>如果查询出的数据只有一条，可以通过</p><ul><li>实体类对象接收</li><li>List集合接收</li><li>Map集合接收</li></ul><p>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过</p><ul><li><p>实体类类型的LIst集合接收</p></li><li><p>Map类型的LIst集合接收</p></li><li><p>在mapper接口的方法上添加@MapKey注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过@MapKey注解设置map集合的键，值是每条数据所对应的map集合</span><br><span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select * from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="模糊查询"><a class="header-anchor" href="#模糊查询"></a>模糊查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--select * from user where name like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span><br><span class="hljs-comment">&lt;!--select * from user where name like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span><br>select * from user where name like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="添加功能获取自增的主键"><a class="header-anchor" href="#添加功能获取自增的主键"></a>添加功能获取自增的主键</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>insert into user values (null,#&#123;name&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要在mapper.xml中设置两个属性</p><ul><li>useGeneratedKeys：设置使用自增的主键</li></ul><ul><li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li></ul><h3 id="内建的类型别名"><a class="header-anchor" href="#内建的类型别名"></a>内建的类型别名</h3><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是<code>不区分大小写</code>的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th style="text-align:left">别名</th><th style="text-align:left">映射的类型</th></tr></thead><tbody><tr><td style="text-align:left">_byte</td><td style="text-align:left">byte</td></tr><tr><td style="text-align:left">_char (since 3.5.10)</td><td style="text-align:left">char</td></tr><tr><td style="text-align:left">_character (since 3.5.10)</td><td style="text-align:left">char</td></tr><tr><td style="text-align:left">_long</td><td style="text-align:left">long</td></tr><tr><td style="text-align:left">_short</td><td style="text-align:left">short</td></tr><tr><td style="text-align:left">_int</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_integer</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_double</td><td style="text-align:left">double</td></tr><tr><td style="text-align:left">_float</td><td style="text-align:left">float</td></tr><tr><td style="text-align:left">_boolean</td><td style="text-align:left">boolean</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">String</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">Byte</td></tr><tr><td style="text-align:left">char (since 3.5.10)</td><td style="text-align:left">Character</td></tr><tr><td style="text-align:left">character (since 3.5.10)</td><td style="text-align:left">Character</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">Long</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">Short</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">integer</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">Double</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">Float</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">Boolean</td></tr><tr><td style="text-align:left">date</td><td style="text-align:left">Date</td></tr><tr><td style="text-align:left">decimal</td><td style="text-align:left">BigDecimal</td></tr><tr><td style="text-align:left">bigdecimal</td><td style="text-align:left">BigDecimal</td></tr><tr><td style="text-align:left">biginteger</td><td style="text-align:left">BigInteger</td></tr><tr><td style="text-align:left">object</td><td style="text-align:left">Object</td></tr><tr><td style="text-align:left">date[]</td><td style="text-align:left">Date[]</td></tr><tr><td style="text-align:left">decimal[]</td><td style="text-align:left">BigDecimal[]</td></tr><tr><td style="text-align:left">bigdecimal[]</td><td style="text-align:left">BigDecimal[]</td></tr><tr><td style="text-align:left">biginteger[]</td><td style="text-align:left">BigInteger[]</td></tr><tr><td style="text-align:left">object[]</td><td style="text-align:left">Object[]</td></tr><tr><td style="text-align:left">map</td><td style="text-align:left">Map</td></tr><tr><td style="text-align:left">hashmap</td><td style="text-align:left">HashMap</td></tr><tr><td style="text-align:left">list</td><td style="text-align:left">List</td></tr><tr><td style="text-align:left">arraylist</td><td style="text-align:left">ArrayList</td></tr><tr><td style="text-align:left">collection</td><td style="text-align:left">Collection</td></tr><tr><td style="text-align:left">iterator</td><td style="text-align:left">Iterator</td></tr></tbody></table><h3 id="自定义映射resultMap"><a class="header-anchor" href="#自定义映射resultMap"></a>自定义映射resultMap</h3><h4 id="resultMap字段和属性"><a class="header-anchor" href="#resultMap字段和属性"></a>resultMap字段和属性</h4><ul><li>resultMap：设置自定义映射<ul><li>id：表示自定义映射的唯一标识，不能重复</li><li>type：查询的数据要映射的实体类的类型</li></ul></li><li>id：设置主键的映射关系<ul><li>property：设置映射关系中实体类中的属性名</li><li>column：设置映射关系中表中的字段名</li></ul></li><li>result：设置普通字段的映射关系</li></ul><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>select * from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="开启驼峰映射"><a class="header-anchor" href="#开启驼峰映射"></a>开启驼峰映射</h4><p>开启后在查询时自动将<code>下划线</code>风格类型的字段名转换为驼峰，如 user_name 会转换为 userName</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="多对一映射处理"><a class="header-anchor" href="#多对一映射处理"></a>多对一映射处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;  <br><span class="hljs-keyword">private</span> Integer eid;  <br><span class="hljs-keyword">private</span> String empName;  <br><span class="hljs-keyword">private</span> Integer age;  <br><span class="hljs-keyword">private</span> String sex;  <br><span class="hljs-keyword">private</span> String email;<br><span class="hljs-keyword">private</span> Dept dept;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="级联方式处理映射关系"><a class="header-anchor" href="#级联方式处理映射关系"></a>级联方式处理映射关系</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="使用association处理映射关系"><a class="header-anchor" href="#使用association处理映射关系"></a>使用association处理映射关系</h5><ul><li>association：处理多对一的映射关系<ul><li>property：需要处理多对的映射关系的属性名</li><li>javaType：该属性的Java类型</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span><br>select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="分步查询"><a class="header-anchor" href="#分步查询"></a>分步查询</h5><p>先查询员工表，再查询部门表</p><ul><li>select：设置分布查询的sql的唯一标识</li><li>column：设置分步查询的条件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第一步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>select * from t_emp where eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第二步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span><br>select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="一对多映射处理"><a class="header-anchor" href="#一对多映射处理"></a>一对多映射处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer did;<br>    <span class="hljs-keyword">private</span> String deptName;<br>    <span class="hljs-keyword">private</span> List&lt;Emp&gt; emps;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="collection"><a class="header-anchor" href="#collection"></a>collection</h5><ul><li>collection：用来处理一对多的映射关系</li><li>ofType：表示该属性对饮的集合中存储的数据的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span><br>select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="分步查询-v2"><a class="header-anchor" href="#分步查询-v2"></a>分步查询</h5><p>先查询部门表，再查询人员表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第一步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span><br>select * from t_dept where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第二步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select * from t_emp where did = #&#123;did&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="延迟加载"><a class="header-anchor" href="#延迟加载"></a>延迟加载</h4><ul><li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</li><li>lazyLoadingEnabled： 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态</li><li>aggressiveLazyLoading：开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载</li><li>开启设置后，可通过<code>association</code>和<code>collection</code>中的<code>fetchType</code>属性设置当前的分步查询是否使用延迟加载，fetchType=“lazy(延迟加载)|eager(立即加载)”</li><li>效果：<ul><li>关闭延迟加载，分步查询的所有步骤都会执行</li><li>开启延迟加载，调用查询方法后，只有第一步的sql会执行，其他步骤会在步骤对应属性被程序调用时执行</li></ul></li></ul><h3 id="动态SQL"><a class="header-anchor" href="#动态SQL"></a>动态SQL</h3><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</p><h4 id="if"><a class="header-anchor" href="#if"></a>if</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = ‘ACTIVE’<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="choose、when、otherwise"><a class="header-anchor" href="#choose、when、otherwise"></a>choose、when、otherwise</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = ‘ACTIVE’<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>      AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      AND featured = 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="trim、where、set"><a class="header-anchor" href="#trim、where、set"></a>trim、where、set</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG<br>  WHERE<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>    state = #&#123;state&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的例子中，当所有查询条件都不满足时会输出错误的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> BLOG<br><span class="hljs-keyword">WHERE</span><br></code></pre></td></tr></table></figure><p>通过where元素将所有的查询条件包起来解决此问题，where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句；而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>         state = #&#123;state&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>        AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而where元素等价于下面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND |OR &quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>trim元素的 prefixOverrides 属性会忽略通过管道符分隔的文本序列，并且插入 <em>prefix</em> 属性中指定的内容</p><p>set 元素可以用于动态包含需要更新的列，忽略其它不更新的列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span><br>  update Author<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</p><p>可以通过使用trim元素来达到同样的效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="foreach"><a class="header-anchor" href="#foreach"></a>foreach</h4><p>foreach用于遍历的场景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPostIn&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;domain.blog.Post&quot;</span>&gt;</span><br>  SELECT *<br>  FROM POST P<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;ID in (&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">nullable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>          #&#123;item&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="script"><a class="header-anchor" href="#script"></a>script</h4><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&#123;&quot;&lt;script&gt;&quot;,</span><br><span class="hljs-meta">         &quot;update Author&quot;,</span><br><span class="hljs-meta">         &quot;  &lt;set&gt;&quot;,</span><br><span class="hljs-meta">         &quot;    &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">         &quot;    &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">         &quot;    &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">         &quot;    &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">         &quot;  &lt;/set&gt;&quot;,</span><br><span class="hljs-meta">         &quot;where id=#&#123;id&#125;&quot;,</span><br><span class="hljs-meta">         &quot;&lt;/script&gt;&quot;&#125;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAuthorValues</span><span class="hljs-params">(Author author)</span>;<br></code></pre></td></tr></table></figure><h4 id="bind"><a class="header-anchor" href="#bind"></a>bind</h4><p>允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlogsLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span><br>  SELECT * FROM BLOG<br>  WHERE title LIKE #&#123;pattern&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="sql片段"><a class="header-anchor" href="#sql片段"></a>sql片段</h4><p>sql片段可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="缓存机制"><a class="header-anchor" href="#缓存机制"></a>缓存机制</h3><h4 id="MyBatis的一级缓存"><a class="header-anchor" href="#MyBatis的一级缓存"></a>MyBatis的一级缓存</h4><ul><li><p>一级缓存是<code>SqlSession</code>级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p></li><li><p>使一级缓存失效的四种情况：</p><ul><li>不同的SqlSession对应不同的一级缓存</li></ul><ol start="2"><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li></ol><ul><li><p>同一个SqlSession两次查询期间手动清空了缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.clearCache();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="MyBatis的二级缓存"><a class="header-anchor" href="#MyBatis的二级缓存"></a>MyBatis的二级缓存</h4><ul><li>二级缓存是<code>SqlSessionFactory</code>级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</li><li>二级缓存开启的条件（都必须）<ul><li>在核心配置文件中，设置全局配置属性<code>cacheEnabled=&quot;true&quot;</code>，默认为true，不需要设置</li></ul><ol start="2"><li>在映射文件中设置标签<code>&lt;cache/&gt;</code></li><li>二级缓存必须在<code>SqlSession关闭或提交</code>之后有效</li><li>查询的数据所转换的实体类类型必须<code>实现序列化的接口</code></li></ol></li><li>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h4 id="cache元素属性"><a class="header-anchor" href="#cache元素属性"></a>cache元素属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>eviction：清除策略，默认的清除策略是 LRU<ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul></li><li>flushInterval：刷新间隔，可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新</li><li>size：引用数目，属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024</li><li>readOnly：只读，只读的缓存会给所有调用者返回缓存对象的相同实例，默认值是 false</li></ul><h4 id="缓存查询顺序"><a class="header-anchor" href="#缓存查询顺序"></a>缓存查询顺序</h4><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h4 id="整合第三方缓存EHCache"><a class="header-anchor" href="#整合第三方缓存EHCache"></a>整合第三方缓存EHCache</h4><p>第三方缓存替代的是mybatis的二级缓存</p><p>pom中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- slf4j版本和工程现有版本冲突，先排除 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加ehcache配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\tmp\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>mappper.xml中修改二级缓存类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="逆向工程"><a class="header-anchor" href="#逆向工程"></a>逆向工程</h3><p>通过数据库表逆向生成代码</p><p>pom中引入maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加逆向工程的配置文件，文件名必须是：<code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 修改查询类的后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.RenameExampleClassPlugin&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;searchString&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Example$&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;replaceString&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Query&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/tmp?useSSL=false&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zhuweitung.mybatis.model&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zhuweitung.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.zhuweitung.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;UserDemo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--修改Example文件名--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>更新详细地配置可以参考<a href="http://mybatis.org/generator/">MyBatis Generator官方文档</a></p><p>执行maven插件命令</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8262c73739acc202a12883427c4e70cb.png" alt=""></p><p>在对应的目录下会生成文件</p><h3 id="分页插件"><a class="header-anchor" href="#分页插件"></a>分页插件</h3><h4 id="配置"><a class="header-anchor" href="#配置"></a>配置</h4><p>pom中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用"><a class="header-anchor" href="#使用"></a>使用</h4><ul><li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</li><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageHelper</span><span class="hljs-params">()</span> &#123;<br>    Page&lt;User&gt; page = PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>    List&lt;User&gt; users = userMapper.findAll();<br>    System.out.println(users.size());<br>    System.out.println(page);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用PageInfo获取导航"><a class="header-anchor" href="#使用PageInfo获取导航"></a>使用PageInfo获取导航</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageHelper</span><span class="hljs-params">()</span> &#123;<br>    Page&lt;User&gt; page = PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>    List&lt;User&gt; users = userMapper.findAll();<br>    System.out.println(users.size());<br>    PageInfo&lt;User&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(users);<br>    System.out.println(pageInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>常用属性：</p><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li><li>size：当前页显示的真实条数</li><li>total：总记录数</li><li>pages：总页数</li><li>prePage：上一页的页码</li><li>nextPage：下一页的页码</li><li>isFirstPage/isLastPage：是否为第一页/最后一页</li><li>hasPreviousPage/hasNextPage：是否存在上一页/下一页</li><li>navigatePages：导航分页的页码数</li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝ES6</title>
      <link href="/posts/3657735712/"/>
      <url>/posts/3657735712/</url>
      
        <content type="html"><![CDATA[<h2 id="Class和普通构造函数"><a class="header-anchor" href="#Class和普通构造函数"></a>Class和普通构造函数</h2><blockquote><p>class为es6的语法糖；</p><p>总的来说class的语法更接近面向对象，更加已读，对于后端开发来说更容易上手；</p><p>class底层原理还是prototype；</p></blockquote><h3 id="普通构造函数实现"><a class="header-anchor" href="#普通构造函数实现"></a>普通构造函数实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">User</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">login</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;user is logining&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.<span class="hljs-title function_">login</span>();<br></code></pre></td></tr></table></figure><h3 id="class实现"><a class="header-anchor" href="#class实现"></a>class实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-comment">// 类方法</span><br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;user is logining&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.<span class="hljs-title function_">login</span>();<br></code></pre></td></tr></table></figure><h2 id="继承"><a class="header-anchor" href="#继承"></a>继承</h2><h3 id="普通继承实现"><a class="header-anchor" href="#普通继承实现"></a>普通继承实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">eat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eating&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wang</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wangwangwang&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Dog继承Animal</span><br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><span class="hljs-keyword">var</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>dog.<span class="hljs-title function_">wang</span>();<br>dog.<span class="hljs-title function_">eat</span>();<br></code></pre></td></tr></table></figure><h3 id="class实现-v2"><a class="header-anchor" href="#class实现-v2"></a>class实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eating&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>    &#125;<br>    <span class="hljs-title function_">wang</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wangwangwang&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;bog&#x27;</span>);<br>dog.<span class="hljs-title function_">wang</span>();<br>dog.<span class="hljs-title function_">eat</span>();<br></code></pre></td></tr></table></figure><h2 id="var与let作用域"><a class="header-anchor" href="#var与let作用域"></a>var与let作用域</h2><blockquote><p><code>let</code>在es6中用来声明变量，用法类型与<code>var</code></p></blockquote><ul><li><p><code>var</code>的作用域为函数上下文或全局上下文；</p></li><li><p><code>let</code>的作用域由最近的一对<code>&#123;&#125;</code>所限定，及只在局部有效；</p></li><li><p><code>var</code>变量可以重复声明，但是<code>let</code>变量重复声明会报错（SyntaxError）；</p></li><li><p><code>let</code>适合在循环中声明变量；</p></li></ul><h2 id="变量的解构赋值"><a class="header-anchor" href="#变量的解构赋值"></a>变量的解构赋值</h2><blockquote><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p></blockquote><h3 id="数组的解构赋值"><a class="header-anchor" href="#数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-comment">// 为变量赋值，只能直接指定值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// 解构赋值写法</span><br><span class="hljs-comment">// 从数组中提取值，按照对应位置，对变量赋值</span><br><span class="hljs-keyword">var</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 允许嵌套</span><br><span class="hljs-comment">// 这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值</span><br><span class="hljs-keyword">let</span> [foo, [[bar], baz]] = [<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>], <span class="hljs-number">3</span>]];<br><br><span class="hljs-comment">// 如果解构不成功，变量的值就等于undefined</span><br><span class="hljs-keyword">var</span> [foo] = [];<br><span class="hljs-keyword">var</span> [bar, foo] = [<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// 不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组</span><br><span class="hljs-keyword">let</span> [x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 指定默认值</span><br><span class="hljs-keyword">var</span> [foo = <span class="hljs-literal">true</span>] = [];<br><br><span class="hljs-comment">// 默认值可以引用解构赋值的其他变量，但该变量必须已经声明</span><br><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>, y = x] = [];<br></code></pre></td></tr></table></figure><h3 id="对象的解构赋值"><a class="header-anchor" href="#对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组解构赋值是按照顺序，而对象解构赋值则要求变量必须与属性同名，若不一致则需要两边属性名一致</span><br><span class="hljs-keyword">var</span> &#123; <span class="hljs-attr">foo</span>: foo, <span class="hljs-attr">bar</span>: bar &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;bbb&quot;</span> &#125;;<br><span class="hljs-comment">// 以上可以简写为</span><br><span class="hljs-keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;bbb&quot;</span> &#125;;<br><br><span class="hljs-comment">// 同样也可以指定默认值</span><br><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串的解构赋值"><a class="header-anchor" href="#字符串的解构赋值"></a>字符串的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数的解构赋值"><a class="header-anchor" href="#函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x, y]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">add</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 默认值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, 0]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [0, 0]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="变量的解构赋值用途"><a class="header-anchor" href="#变量的解构赋值用途"></a>变量的解构赋值用途</h3><ol><li><p>交换变量的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[x, y] = [y, x];<br></code></pre></td></tr></table></figure></li><li><p>从函数返回多个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回一个数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">var</span> [a, b, c] = <span class="hljs-title function_">example</span>();<br><br><span class="hljs-comment">// 返回一个对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <span class="hljs-number">2</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> &#123; foo, bar &#125; = <span class="hljs-title function_">example</span>();<br></code></pre></td></tr></table></figure></li><li><p>函数参数的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 参数是一组有次序的值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">[x, y, z]</span>) &#123; ... &#125;<br><span class="hljs-title function_">f</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">// 参数是一组无次序的值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">&#123;x, y, z&#125;</span>) &#123; ... &#125;<br><span class="hljs-title function_">f</span>(&#123;<span class="hljs-attr">z</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>提取JSON数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">867</span>, <span class="hljs-number">5309</span>]<br>&#125;;<br><br><span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: number &#125; = jsonData;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, status, number);<br></code></pre></td></tr></table></figure></li><li><p>函数参数的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">jQuery.<span class="hljs-property">ajax</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url, &#123;</span><br><span class="hljs-params">  <span class="hljs-keyword">async</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  beforeSend = <span class="hljs-keyword">function</span> () &#123;&#125;,</span><br><span class="hljs-params">  cache = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  complete = <span class="hljs-keyword">function</span> () &#123;&#125;,</span><br><span class="hljs-params">  crossDomain = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">  <span class="hljs-variable language_">global</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  // ... more config</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-comment">// ... do stuff</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>遍历Map结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; is &quot;</span> + value);<br>&#125;<br><br><span class="hljs-comment">// 获取键名</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 获取键值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [,value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>加载模块的指定方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SourceMapConsumer</span>, <span class="hljs-title class_">SourceNode</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;source-map&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="字符串的扩展"><a class="header-anchor" href="#字符串的扩展"></a>字符串的扩展</h2><h3 id="实用方法"><a class="header-anchor" href="#实用方法"></a>实用方法</h3><ul><li><p><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串；</p></li><li><p><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在源字符串的头部；</p></li><li><p><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在源字符串的尾部；</p></li><li><p>repeat()：方法返回一个新字符串，表示将原字符串重复<code>n</code>次，若n为小数则向下取整，若n为负数或报错；</p></li><li><p>padStart()，padEnd()：字符串补全长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;ababx&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;abax&#x27;</span><br><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xabab&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xaba&#x27;</span><br><br><span class="hljs-comment">// 省略第二个参数，则会用空格补全长度</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &#x27;   x&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &#x27;x   &#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="模板字符串"><a class="header-anchor" href="#模板字符串"></a>模板字符串</h3><blockquote><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><p>模板字符串中嵌入变量，需要将变量名写在<code>$&#123;&#125;</code>之中。</p><p>大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。</p><p>模板字符串之中还能调用函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// js写法</span><br>$(<span class="hljs-string">&#x27;#result&#x27;</span>).<span class="hljs-title function_">append</span>(<br>  <span class="hljs-string">&#x27;There are &lt;b&gt;&#x27;</span> + basket.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;&lt;/b&gt; &#x27;</span> +<br>  <span class="hljs-string">&#x27;items in your basket, &#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;em&gt;&#x27;</span> + basket.<span class="hljs-property">onSale</span> +<br>  <span class="hljs-string">&#x27;&lt;/em&gt; are on sale!&#x27;</span><br>);<br><br><span class="hljs-comment">// 模板字符串写法</span><br>$(<span class="hljs-string">&#x27;#result&#x27;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">`</span><br><span class="hljs-string">  There are &lt;b&gt;<span class="hljs-subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span><br><span class="hljs-string">   in your basket, &lt;em&gt;<span class="hljs-subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span><br><span class="hljs-string">  are on sale!</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-comment">// 模板字符串嵌套</span><br><span class="hljs-keyword">const</span> data = [<br>    &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;&lt;Jane&gt;&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Bond&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Lars&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;&lt;Croft&gt;&#x27;</span> &#125;,<br>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">tmpl</span>(data));<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">tmpl</span> = addrs =&gt; <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;table&gt;</span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;addrs.map(addr =&gt; <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">    &lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">    &lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">  `</span>).join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;</span></span><br><span class="hljs-string">  &lt;/table&gt;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="数组的扩展"><a class="header-anchor" href="#数组的扩展"></a>数组的扩展</h2><ul><li><p>Array.from()：将类似数组的对象（array-like object）和可遍历（iterable）的对象转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;;<br><span class="hljs-comment">// ES6的写法</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">// 常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象</span><br><span class="hljs-comment">// NodeList对象</span><br><span class="hljs-keyword">let</span> ps = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(ps).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br>&#125;);<br><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组</span><br><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>];<br>&#125;<br><span class="hljs-comment">// NodeList对象</span><br>[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)]<br></code></pre></td></tr></table></figure></li><li><p>find()和findIndex()：用于找出第一个符合条件的数组成员或下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>].<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">9</span>;<br>&#125;) <span class="hljs-comment">// 10</span><br><span class="hljs-comment">// find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组</span><br></code></pre></td></tr></table></figure></li><li><p>fill()：填充数组</p></li><li><p>includes()：法返回一个布尔值，表示某个数组是否包含给定的值</p></li></ul><h2 id="扩展运算符"><a class="header-anchor" href="#扩展运算符"></a>扩展运算符</h2><blockquote><p>扩展运算符（spread）是三个点（<code>...</code>），将一个数组转为用逗号分隔的参数序列</p></blockquote><h3 id="用于函数调用"><a class="header-anchor" href="#用于函数调用"></a>用于函数调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>  array.<span class="hljs-title function_">push</span>(...items);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">38</span>];<br><span class="hljs-title function_">add</span>(...numbers) <span class="hljs-comment">// 42</span><br><br><span class="hljs-comment">// 扩展运算符与正常的函数参数可以结合使用，非常灵活</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">v, w, x, y, z</span>) &#123; &#125;<br><span class="hljs-keyword">var</span> args = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br><span class="hljs-title function_">f</span>(-<span class="hljs-number">1</span>, ...args, <span class="hljs-number">2</span>, ...[<span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><h3 id="替代数组的apply方法"><a class="header-anchor" href="#替代数组的apply方法"></a>替代数组的apply方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES5的写法</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>])<br><br><span class="hljs-comment">// ES6的写法</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...[<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>])<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>);<br></code></pre></td></tr></table></figure><h3 id="扩展运算符的应用"><a class="header-anchor" href="#扩展运算符的应用"></a>扩展运算符的应用</h3><ol><li><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES5</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">concat</span>(more)<br><span class="hljs-comment">// ES6</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ...more]<br><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<br><br><span class="hljs-comment">// ES5的合并数组</span><br>arr1.<span class="hljs-title function_">concat</span>(arr2, arr3);<br><span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br><br><span class="hljs-comment">// ES6的合并数组</span><br>[...arr1, ...arr2, ...arr3]<br><span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>first <span class="hljs-comment">// 1</span><br>rest  <span class="hljs-comment">// [2, 3, 4, 5]</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = [];<br>first <span class="hljs-comment">// undefined</span><br>rest  <span class="hljs-comment">// []:</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-string">&quot;foo&quot;</span>];<br>first  <span class="hljs-comment">// &quot;foo&quot;</span><br>rest   <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure></li><li><p>函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dateFields = <span class="hljs-title function_">readDateFields</span>(database);<br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(...dateFields);<br></code></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 扩展运算符还可以将字符串转为真正的数组</span><br>[...<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span><br></code></pre></td></tr></table></figure></li><li><p>实现了Iterator接口的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组</span><br><span class="hljs-keyword">var</span> nodeList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> array = [...nodeList];<br></code></pre></td></tr></table></figure></li><li><p>Map和Set结构，Generator函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;one&#x27;</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;two&#x27;</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;three&#x27;</span>],<br>]);<br><br><span class="hljs-keyword">let</span> arr = [...map.<span class="hljs-title function_">keys</span>()]; <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="箭头函数"><a class="header-anchor" href="#箭头函数"></a>箭头函数</h2><blockquote><p>ES6允许使用“箭头”（<code>=&gt;</code>）定义函数。</p></blockquote><h3 id="基本用法"><a class="header-anchor" href="#基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = v =&gt; v;<br><br><span class="hljs-comment">// 上面的箭头函数等同于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) &#123;<br>  <span class="hljs-keyword">return</span> v;<br>&#125;;<br><br><span class="hljs-comment">// 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-comment">// 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; &#123; <span class="hljs-keyword">return</span> num1 + num2; &#125;<br><br><span class="hljs-comment">// 箭头函数可以与变量解构结合使用</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">full</span> = (<span class="hljs-params">&#123; first, last &#125;</span>) =&gt; first + <span class="hljs-string">&#x27; &#x27;</span> + last;<br></code></pre></td></tr></table></figure><h3 id="使用注意点"><a class="header-anchor" href="#使用注意点"></a>使用注意点</h3><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作Generator函数</li></ul><h2 id="对象的拓展"><a class="header-anchor" href="#对象的拓展"></a>对象的拓展</h2><h3 id="Object-is"><a class="header-anchor" href="#Object-is"></a><a href="http://Object.is">Object.is</a>()</h3><p>它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(&#123;&#125;, &#123;&#125;)<br><span class="hljs-comment">// false</span><br><br>+<span class="hljs-number">0</span> === -<span class="hljs-number">0</span> <span class="hljs-comment">//true</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(+<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign"><a class="header-anchor" href="#Object-assign"></a>Object.assign()</h3><blockquote><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><p>类似于jQuery中的$.extend()方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">var</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">var</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br>target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span><br></code></pre></td></tr></table></figure><h4 id="常见用法"><a class="header-anchor" href="#常见用法"></a>常见用法</h4><ul><li><p>为对象添加属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>, &#123;x, y&#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>为对象添加方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>  <span class="hljs-title function_">someMethod</span>(<span class="hljs-params">arg1, arg2</span>) &#123;<br>    ···<br>  &#125;,<br>  <span class="hljs-title function_">anotherMethod</span>(<span class="hljs-params"></span>) &#123;<br>    ···<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 等同于下面的写法</span><br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">someMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg1, arg2</span>) &#123;<br>  ···<br>&#125;;<br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">anotherMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  ···<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">origin</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, origin);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>合并多个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> =<br>  (<span class="hljs-params">...sources</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, ...sources);<br></code></pre></td></tr></table></figure></li><li><p>为属性指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULTS</span> = &#123;<br>  <span class="hljs-attr">logLevel</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">outputFormat</span>: <span class="hljs-string">&#x27;html&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processContent</span>(<span class="hljs-params">options</span>) &#123;<br>  options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable constant_">DEFAULTS</span>, options);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="属性的遍历"><a class="header-anchor" href="#属性的遍历"></a>属性的遍历</h3><ol><li>for…in</li><li>Object.keys(obj)</li><li>Object.getOwnPropertyNames(obj)</li><li>Object.getOwnPropertySymbols(obj)</li><li>Reflect.ownKeys(obj)</li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现给word文件添加水印</title>
      <link href="/posts/15731478/"/>
      <url>/posts/15731478/</url>
      
        <content type="html"><![CDATA[<p>一开始使用<code>Aspose.words</code>来给word添加水印，尝试后发现会破坏原文件的格式，故放弃。</p><p>经过一系列资料的查找后，确认使用<code>spire.doc for java</code>来实现本功能。</p><h2 id="maven添加依赖"><a class="header-anchor" href="#maven添加依赖"></a>maven添加依赖</h2><blockquote><p>根据<a href="https://www.e-iceblue.cn/licensing/install-spirepdf-for-java-from-maven-repository.html">官方文档</a>引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>com.e-iceblue<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.e-iceblue.cn/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>e-iceblue<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spire.doc.free<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="程序核心代码"><a class="header-anchor" href="#程序核心代码"></a>程序核心代码</h2><blockquote><p>参考<a href="https://www.e-iceblue.cn/doc_java_watermark/java-add-multiple-image-watermarks-to-word-document.html">官方demo</a>的基础上，对水印的间距数量进行了优化，使多个水印能够均匀分布在一个页面上。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpireDocUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWatermark</span><span class="hljs-params">(String srcFileName, String targetFileName, String watermarkText)</span> &#123;<br>        <span class="hljs-comment">//加载示例文档</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Document</span>();<br>        doc.loadFromFile(srcFileName);<br><br>        <span class="hljs-comment">//页边距</span><br>        <span class="hljs-type">Section</span> <span class="hljs-variable">pageSection</span> <span class="hljs-operator">=</span> doc.getSections().get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getTop();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getRight();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">bottom</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getBottom();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getLeft();<br>        <span class="hljs-comment">//纸张宽高</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getPageSize().getWidth();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getPageSize().getHeight();<br><br>        <span class="hljs-comment">//添加水印并设置大小</span><br>        <span class="hljs-type">ShapeObject</span> <span class="hljs-variable">shape</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeObject</span>(doc, ShapeType.Text_Plain_Text);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shapeWidth</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shapeHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        shape.setWidth(shapeWidth);<br>        shape.setHeight(shapeHeight);<br>        <span class="hljs-comment">//设置水印文本内容</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radian</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * Math.PI / <span class="hljs-number">360</span> * <span class="hljs-number">45</span>;<br>        shape.setRotation(-<span class="hljs-number">45</span>);<br>        shape.getWordArt().setFontFamily(<span class="hljs-string">&quot;SimSun&quot;</span>);<br>        shape.getWordArt().setText(watermarkText);<br>        <span class="hljs-comment">//设置水印颜色</span><br>        shape.setFillColor(Color.lightGray);<br>        shape.setStrokeColor(Color.lightGray);<br><br>        <span class="hljs-comment">//水印列数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">colNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//水印行数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-comment">//水印真实宽度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">shapeRealWidth</span> <span class="hljs-operator">=</span> Math.cos(radian) * (shapeWidth + shapeHeight);<br>        <span class="hljs-comment">//水印真实高度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">shapeRealHeight</span> <span class="hljs-operator">=</span> Math.sin(radian) * (shapeWidth + shapeHeight);<br>        <span class="hljs-comment">//水印中心水平间距</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">xGap</span> <span class="hljs-operator">=</span> (width - shapeRealWidth * colNum) / (colNum - <span class="hljs-number">1</span>) + shapeRealWidth;<br>        <span class="hljs-comment">//水印中心垂直间距</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">yGap</span> <span class="hljs-operator">=</span> (height - shapeRealHeight * rowNum) / (rowNum - <span class="hljs-number">1</span>) + shapeRealHeight;<br>        <span class="hljs-comment">//水印水平起始位置</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">startX</span> <span class="hljs-operator">=</span> -left - (shapeWidth - shapeRealWidth) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//水印水平垂直位置</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">startY</span> <span class="hljs-operator">=</span> -Math.cos(radian) * shapeHeight;<br><br>        Section section;<br>        HeaderFooter header;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; n &lt; doc.getSections().getCount(); n++) &#123;<br>            section = doc.getSections().get(n);<br>            <span class="hljs-comment">//获取section的页眉</span><br>            header = section.getHeadersFooters().getHeader();<br>            Paragraph paragraph;<br><br>            <span class="hljs-keyword">if</span> (header.getParagraphs().getCount() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//如果页眉有段落，取它第一个段落</span><br>                paragraph = header.getParagraphs().get(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//否则新增加一个段落到页眉</span><br>                paragraph = header.addParagraph();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; colNum; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rowNum; j++) &#123;<br>                    <span class="hljs-comment">//复制水印并设置多行多列位置</span><br>                    shape = (ShapeObject) shape.deepClone();<br>                    shape.setHorizontalPosition((<span class="hljs-type">float</span>) (startX + xGap * i));<br>                    shape.setVerticalPosition((<span class="hljs-type">float</span>) (startY + yGap * j));<br>                    paragraph.getChildObjects().add(shape);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//保存文档</span><br>        doc.saveToFile(targetFileName, FileFormat.Docx_2013);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最终效果"><a class="header-anchor" href="#最终效果"></a>最终效果</h2><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/efc7aa258a7a4773e9a95ac03c702321.png" alt="demo-out_01"></p>]]></content>
      
      
      <categories>
          
          <category> word </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 水印 </tag>
            
            <tag> word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal及Powershell安装和美化</title>
      <link href="/posts/2820324998/"/>
      <url>/posts/2820324998/</url>
      
        <content type="html"><![CDATA[<h2 id="效果预览"><a class="header-anchor" href="#效果预览"></a>效果预览</h2><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ab5fb5ba92d8d56c954cb30a2a722a17.png" alt="image-20210512191609185"></p><h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><h3 id="安装Windows-Terminal-或-Windows-Terminal-Preview"><a class="header-anchor" href="#安装Windows-Terminal-或-Windows-Terminal-Preview"></a>安装Windows Terminal 或 Windows Terminal Preview</h3><p>可以从下面两种方式进行安装</p><blockquote><ol><li>从<code>GitHub</code><a href="https://github.com/microsoft/terminal/releases">Releases · microsoft/terminal (github.com)</a>中下载文件格式为<code>msixbundle</code>的文件，双击安装；</li><li>从<code>微软商店</code>搜索<a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?rtc=1&amp;activetab=pivot:overviewtab">Windows Terminal</a>或<a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n8g5rfz9xk3?activetab=pivot:overviewtab">Windows Terminal Preview</a>中直接安装；</li></ol></blockquote><h3 id="安装PowerShell-或-PowerShell-Preview"><a class="header-anchor" href="#安装PowerShell-或-PowerShell-Preview"></a>安装PowerShell 或 PowerShell Preview</h3><p>可以从下面两种方式进行安装</p><blockquote><ol><li>从<code>GitHub</code><a href="https://github.com/PowerShell/PowerShell/releases">Releases · PowerShell/PowerShell (github.com)</a>中下载文件格式为<code>msixbundle</code>的文件，双击安装；</li><li>从<code>微软商店</code>搜索<a href="https://www.microsoft.com/zh-cn/p/powershell/9mz1snwt0n5d?activetab=pivot:overviewtab">PowerShell</a>或<a href="https://www.microsoft.com/zh-cn/p/powershell-preview/9p95zzktnrn4?activetab=pivot:overviewtab">PowerShell Preview</a>中直接安装；</li></ol></blockquote><h2 id="离线环境下安装"><a class="header-anchor" href="#离线环境下安装"></a>离线环境下安装</h2><ul><li>将下载到的<code>msixbundle</code>文件的后缀改为<code>zip</code>，并解压</li><li>将解压文件夹内文件名为<code>CascadiaPackage_***_x64.msix</code>的文件后缀改为<code>zip</code>，并解压</li><li>将解压文件夹改名为<code>Windows.TerminalPreview</code>（可随意命名）并放到自己软件安装的常用目录，我放到<code>C:\Program Files\</code>下</li><li>将<code>Open Windows Terminal Here</code>添加到右键菜单</li></ul><h2 id="设置"><a class="header-anchor" href="#设置"></a>设置</h2><ul><li>在<code>Windows Terminal</code>&gt;启动中设置<code>PowerShell</code>为默认配置文件；</li><li>在<code>Windows Terminal</code>&gt;外观中设置主题为深色；</li></ul><h2 id="美化"><a class="header-anchor" href="#美化"></a>美化</h2><h3 id="安装PowerShell模块"><a class="header-anchor" href="#安装PowerShell模块"></a>安装PowerShell模块</h3><p>主要安装<code>Posh-Git</code>、<code>Oh-My-Posh</code>、<code>DirColors</code>、<code>git-aliases</code>这4个模块</p><blockquote><p>Posh-Git作用：显示Git状态摘要信息；</p><p>Oh-My-Posh作用：提供多种shell主题；</p><p>DirColors作用：文件夹和文件以不用颜色区分；</p><p>git-aliases作用：git版本控制快捷键，功能和命令的集合；</p></blockquote><p>通过<code>Windows Terminal</code>打开<code>PowerShell</code>执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Install-Module</span> DirColors<br><span class="hljs-built_in">Install-Module</span> git<span class="hljs-literal">-aliases</span> <span class="hljs-literal">-AllowClobber</span><br></code></pre></td></tr></table></figure><p>安装过程中遇到提示输入<code>Y</code>或<code>A</code></p><h3 id="选择主题"><a class="header-anchor" href="#选择主题"></a>选择主题</h3><p>在<code>PowerShell</code>中执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Get-PoshThemes</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/701f4de6cb8f6b575e4d7a7f5be8833b.png" alt="image-20210513115047899"></p><p>选择自己喜欢的主题，我这里选择了<code>zash</code></p><p>执行以下命令预览效果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-PoshPrompt</span> <span class="hljs-literal">-Theme</span> zash<br></code></pre></td></tr></table></figure><h3 id="修改字体"><a class="header-anchor" href="#修改字体"></a>修改字体</h3><p>安装完主题之后你可能会发现主题有些地方会出现乱码，这是因为当前的字体不支持</p><p>因此需要安装一款适合当前主题的字体。</p><p>这里推荐安装<code>MesloLGM NF</code>字体，从<a href="https://github.91chifun.workers.dev/https://github.com//ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">ryanoasis/nerd-fonts</a>下载。</p><p>下载后解压选择以下8种字体安装：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/4b6609f4e896eef88074429084bc1c12.png" alt="image-20210514214456477"></p><p>在<code>Windows Terminal</code>设置中选择<code>PowerShell</code>，在外观中设置字体为<code>MesloLGM NF</code>，字号<code>10</code></p><h3 id="使配置永久生效"><a class="header-anchor" href="#使配置永久生效"></a>使配置永久生效</h3><p>前面的导入模块和设置主题只是临时的，关闭命令行再打开后所有设置都没有生效。</p><p>因此需要生成并修改<code>PowerShell</code>配置文件，使配置永久生效。</p><p>在 <code>PowerShell</code>中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>在打开的配置文件中写入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Import-Module</span> DirColors<br><span class="hljs-built_in">Import-Module</span> git<span class="hljs-literal">-aliases</span> <span class="hljs-literal">-DisableNameChecking</span><br><span class="hljs-comment"># 设置 PowerShell 主题</span><br><span class="hljs-built_in">Set-PoshPrompt</span> <span class="hljs-literal">-Theme</span> zash<br><span class="hljs-comment"># 设置Tab为菜单补全和 Intellisense</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Tab&quot;</span> <span class="hljs-literal">-Function</span> MenuComplete<br><span class="hljs-comment"># 设置 Ctrl+d 为退出 PowerShell</span><br><span class="hljs-built_in">Set-PSReadlineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Ctrl+d&quot;</span> <span class="hljs-literal">-Function</span> ViExit<br><span class="hljs-comment"># 设置 Ctrl+z 为撤销</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Ctrl+z&quot;</span> <span class="hljs-literal">-Function</span> Undo<br><span class="hljs-comment"># 设置向上键为后向搜索历史记录</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> UpArrow <span class="hljs-literal">-Function</span> HistorySearchBackward<br><span class="hljs-comment"># 设置向下键为前向搜索历史纪录</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> DownArrow <span class="hljs-literal">-Function</span> HistorySearchForward<br><span class="hljs-comment"># 设置ll命令显示目录下所有文件</span><br><span class="hljs-built_in">Set-Alias</span> <span class="hljs-literal">-Name</span> ll <span class="hljs-literal">-Value</span> <span class="hljs-built_in">Get-ChildItem</span><br></code></pre></td></tr></table></figure><p>保存，重启<code>Windows Terminal</code>。</p><h2 id="离线环境下美化"><a class="header-anchor" href="#离线环境下美化"></a>离线环境下美化</h2><ul><li>由于不能联网，需要在能联网的pc重复上面的美化步骤</li><li>将<code>C:\Users\**\Documents\PowerShell</code>内的文件复制到离线环境下</li></ul><p>到此美化完毕~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Terminal </tag>
            
            <tag> Powershell </tag>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各Json序列化反序列化工具比较</title>
      <link href="/posts/3646286038/"/>
      <url>/posts/3646286038/</url>
      
        <content type="html"><![CDATA[<h1 id="各Json序列化与反序列化工具比较"><a class="header-anchor" href="#各Json序列化与反序列化工具比较"></a>各Json序列化与反序列化工具比较</h1><p>本文主要比较Java中<code>fastjson</code>、<code>jackson</code>、<code>gson</code>三个包的序列化与反序列化性能，可拓展性，易用性等。</p><blockquote><p>开发环境：</p><p>jdk:java version “1.8.0_161”</p><p>os:windows10</p><p>cpu:Intel i5-10400 @2.90GHz</p><p>内存：16GB</p></blockquote><ul><li><a href="#">目录</a><ul><li><a href="#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">测试代码</a><ul><li><a href="#fastjson">fastjson</a></li><li><a href="#jackson">jackson</a></li><li><a href="#gson">gson</a></li></ul></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83">序列化与反序列化性能比较</a><ul><li><a href="#1%E4%B8%87%E6%95%B0%E6%8D%AE">1万数据</a></li><li><a href="#10%E4%B8%87%E6%95%B0%E6%8D%AE">10万数据</a></li><li><a href="#100%E4%B8%87%E6%95%B0%E6%8D%AE">100万数据</a></li></ul></li><li><a href="#%E6%97%A5%E6%9C%9F%E5%BA%8F%E5%88%97%E5%8C%96">日期序列化</a><ul><li><a href="#fastjson-1">fastjson</a></li><li><a href="#jackson-1">Jackson</a></li><li><a href="#gson-1">gson</a></li></ul></li><li><a href="#springmvc%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8">SpringMVC消息转换器</a><ul><li><a href="#fastjson-2">fastjson</a></li><li><a href="#jackson-2">jackson</a></li><li><a href="#gson-2">gson</a></li></ul></li></ul></li></ul><h2 id="测试代码"><a class="header-anchor" href="#测试代码"></a>测试代码</h2><h3 id="fastjson"><a class="header-anchor" href="#fastjson"></a>fastjson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(object);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.parseObject(json, clazz);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.parseArray(json, clazz);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="jackson"><a class="header-anchor" href="#jackson"></a>jackson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.readValue(json, clazz);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">CollectionType</span> <span class="hljs-variable">collectionType</span> <span class="hljs-operator">=</span> mapper.getTypeFactory()<br>                    .constructCollectionType(List.class, clazz);<br>            <span class="hljs-keyword">return</span> mapper.readValue(json, collectionType);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="gson"><a class="header-anchor" href="#gson"></a>gson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GsonUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> gson.toJson(object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> gson.fromJson(json, clazz);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">collectType</span> <span class="hljs-operator">=</span> TypeToken.getParameterized(ArrayList.class, clazz).getType();<br>        <span class="hljs-keyword">return</span> gson.fromJson(json, collectType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="序列化与反序列化性能比较"><a class="header-anchor" href="#序列化与反序列化性能比较"></a>序列化与反序列化性能比较</h2><h3 id="1万数据"><a class="header-anchor" href="#1万数据"></a>1万数据</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e50fa316689d080463f73ca2b1242eee.png" alt=""></p><h3 id="10万数据"><a class="header-anchor" href="#10万数据"></a>10万数据</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d768d9e8cacf92a65e2f5454b3deefae.png" alt=""></p><h3 id="100万数据"><a class="header-anchor" href="#100万数据"></a>100万数据</h3><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/bdb833bbd84f8d5ff785a9786d4108b1.png" alt=""></p><h2 id="日期序列化"><a class="header-anchor" href="#日期序列化"></a>日期序列化</h2><h3 id="fastjson-v2"><a class="header-anchor" href="#fastjson-v2"></a>fastjson</h3><p>加上<code>@JSONField</code>注解，设定日期序列化格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(format = &quot;yyyy年M月d日H时m分s秒&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><h3 id="Jackson"><a class="header-anchor" href="#Jackson"></a>Jackson</h3><p>加上<code>@JsonFormat</code>注解，设定日期序列化格式，<code>timezone</code>属性设置时区（默认太平洋时间），可以通过配置设置全局时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy年M月d日H时m分s秒&quot;, timezone=&quot;GMT+8&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><h3 id="gson-v2"><a class="header-anchor" href="#gson-v2"></a>gson</h3><p>加上<code>@JsonAdapter</code>注解，<code>DateAdapter</code>为自己写的日期转换适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonAdapter(DateAdapter.class)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><p><code>DateAdapter</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeAdapter</span>&lt;Date&gt; &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年M月d日H时m分s秒&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(JsonWriter jsonWriter, Date date)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        jsonWriter.value(sdf.format(date));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">read</span><span class="hljs-params">(JsonReader in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (in.peek() == JsonToken.NULL) &#123;<br>            in.nextNull();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.deserializeToDate(in.nextString());<br>            <span class="hljs-keyword">return</span> date;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">deserializeToDate</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (sdf) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> sdf.parse(s);<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException ignored) &#123;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> sdf.parse(s);<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException ignored) &#123;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> ISO8601Utils.parse(s, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParsePosition</span>(<span class="hljs-number">0</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSyntaxException</span>(s, e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringMVC消息转换器"><a class="header-anchor" href="#SpringMVC消息转换器"></a>SpringMVC消息转换器</h2><h3 id="fastjson-v3"><a class="header-anchor" href="#fastjson-v3"></a>fastjson</h3><p>将<code>FastJsonHttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>实现<code>SerializeFilter</code>、<code>AfterFilter</code>等接口，再将实现类加入转换参数中</p><h3 id="jackson-v2"><a class="header-anchor" href="#jackson-v2"></a>jackson</h3><p>将<code>MappingJackson2HttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>jackson自定义序列化提供<code>JsonSerializer</code>和<code>StdSerializer</code>两个抽象类</p><h3 id="gson-v3"><a class="header-anchor" href="#gson-v3"></a>gson</h3><p>将<code>GsonHttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>不满足序列化要求时，需要继承<code>GsonHttpMessageConverter</code>重写一个自己的消息转换器，使用<code>GsonBuilder()</code>设置序列化的一些参数</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastjson </tag>
            
            <tag> jackson </tag>
            
            <tag> gson </tag>
            
            <tag> 序列化 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis主从+哨兵模式搭建</title>
      <link href="/posts/1518701644/"/>
      <url>/posts/1518701644/</url>
      
        <content type="html"><![CDATA[<h2 id="redis安装"><a class="header-anchor" href="#redis安装"></a>redis安装</h2><h3 id="rpm或deb包安装"><a class="header-anchor" href="#rpm或deb包安装"></a>rpm或deb包安装</h3><p>略</p><h3 id="源码安装"><a class="header-anchor" href="#源码安装"></a>源码安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#加压缩</span><br>tar -zxvf redis-5.0.10.tar.gz<br><br><span class="hljs-comment">#编译和编译安装</span><br><span class="hljs-built_in">cd</span> redis-5.0.10<br>make &amp;&amp; make install<br><br><span class="hljs-comment">#移动编译结果和配置文件到/usr/local/redis目录下</span><br><span class="hljs-built_in">mkdir</span> -p /usr/local/redis<br><span class="hljs-built_in">cp</span> src/mkreleasehdr.sh /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-benchmark /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-aof /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-rdb /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-cli /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-sentinel /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-server /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-trib.rb /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-rdb /usr/local/redis/<br><span class="hljs-built_in">cp</span> redis.conf /usr/local/redis/<br><span class="hljs-built_in">cp</span> sentinel.conf /usr/local/redis/<br></code></pre></td></tr></table></figure><h3 id="注册为服务"><a class="header-anchor" href="#注册为服务"></a>注册为服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/init.d/redis<br><br><span class="hljs-comment">#！/bin/sh</span><br><span class="hljs-comment"># chkconfig: 2345 10 90</span><br><span class="hljs-comment"># description: Start and Stop redis</span><br><br>PORT=6379<br>REDISDIR=/usr/local/redis<br>EXEC=<span class="hljs-variable">$REDISDIR</span>/redis-server<br>REDIS_CLI=<span class="hljs-variable">$REDISDIR</span>/redis-cli<br>CONF=<span class="hljs-variable">$REDISDIR</span>/redis.conf<br>PASSWD=<span class="hljs-string">&quot;***&quot;</span><br>PIDFILE=/var/run/redis_6379.pid<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span> <br>        start)<br>                <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$PIDFILE</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PIDFILE</span> exists, process is already running or crashed.&quot;</span><br>                <span class="hljs-keyword">else</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting Redis server...&quot;</span><br>                        <span class="hljs-variable">$EXEC</span> <span class="hljs-variable">$CONF</span><br>                <span class="hljs-keyword">fi</span><br>                <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$?&quot;</span>=<span class="hljs-string">&quot;0&quot;</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Redis is running...&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                ;;<br>        stop)<br>                <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$PIDFILE</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PIDFILE</span> exists, process is not running.&quot;</span><br>                <span class="hljs-keyword">else</span><br>                        PID=$(<span class="hljs-built_in">cat</span> <span class="hljs-variable">$PIDFILE</span>)<br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stopping...&quot;</span><br>                       <span class="hljs-variable">$REDIS_CLI</span> -p <span class="hljs-variable">$PORT</span> -a <span class="hljs-variable">$PASSWD</span> SHUTDOWN<br>                       <span class="hljs-built_in">sleep</span> 2<br>                       <span class="hljs-keyword">while</span> [ -x <span class="hljs-variable">$PIDFILE</span> ]<br>                       <span class="hljs-keyword">do</span><br>                                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Waiting for Redis to shutdown...&quot;</span><br>                               <span class="hljs-built_in">sleep</span> 1<br>                        <span class="hljs-keyword">done</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Redis stopped&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                ;;<br>        restart|force-reload)<br>                <span class="hljs-variable">$&#123;0&#125;</span> stop<br>                <span class="hljs-variable">$&#123;0&#125;</span> start<br>                ;;<br>        *)<br>               <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot;</span> &gt;&amp;2<br>                <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>赋权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /etc/init.d/redis<br></code></pre></td></tr></table></figure><h3 id="开机自启"><a class="header-anchor" href="#开机自启"></a>开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chkconfig redis on<br></code></pre></td></tr></table></figure><h2 id="修改redis-conf"><a class="header-anchor" href="#修改redis-conf"></a>修改redis.conf</h2><ol><li><p><code>主从服务器</code>的<code>redis.conf</code>文件都需要修改以下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">#后台运行<br><span class="hljs-deletion">- daemonize no</span><br><span class="hljs-addition">+ daemonize yes</span><br><br>#关闭保护模式，允许远程访问<br><span class="hljs-deletion">- protected-mode yes</span><br><span class="hljs-addition">+ protected-mode no</span><br><br>#注释ip绑定<br><span class="hljs-deletion">- bind 127.0.0.1</span><br><span class="hljs-addition">+ #bind 127.0.0.1</span><br><br>#连接密码（可不填<br><span class="hljs-addition">+ requirepass ***</span><br><br>#master密码（若填了连接密码时需要填写<br><span class="hljs-addition">+ masterauth ***</span><br></code></pre></td></tr></table></figure></li><li><p><code>从服务器</code>的<code>redis.conf</code>文件在上面的修改基础上还需要修改以下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ replicaof 主服务器ip 6379</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="修改sentinel-conf"><a class="header-anchor" href="#修改sentinel-conf"></a>修改sentinel.conf</h2><p>备份<code>sentinel.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> sentinel.conf sentinel.conf.bak<br></code></pre></td></tr></table></figure><p>新建<code>sentinel.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi sentinel.conf<br></code></pre></td></tr></table></figure><p>编辑<code>主从服务器</code>上的<code>sentinel.conf</code>文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">daemonize yes<br>port 26379<br>protected-mode no<br>sentinel monitor redis-master 主服务器ip 6379 1<br>sentinel down-after-milliseconds redis-master 30000<br>sentinel failover-timeout redis-master 180000<br>sentinel parallel-syncs redis-master 1<br>#若redis设置了密码则进行下面的设置<br>sentinel auth-pass redis-master ***<br></code></pre></td></tr></table></figure><h2 id="启动主从服务器"><a class="header-anchor" href="#启动主从服务器"></a>启动主从服务器</h2><p>在<code>主从服务器</code>上分别执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-server redis.conf<br>./redis-sentinel sentinel.conf<br></code></pre></td></tr></table></figure><p>检查<code>主服务器</code>集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-cli <br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.10.10.5,port=6379,state=online,offset=17460264,lag=1<br></code></pre></td></tr></table></figure><p>检查<code>从服务器</code>集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-cli <br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:10.10.10.4<br>master_port:6379<br>master_link_status:up<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC知识回顾及查漏补缺</title>
      <link href="/posts/3435866348/"/>
      <url>/posts/3435866348/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringMVC简介"><a class="header-anchor" href="#SpringMVC简介"></a>SpringMVC简介</h3><h4 id="什么是MVC"><a class="header-anchor" href="#什么是MVC"></a>什么是MVC</h4><p>MVC是一种软件架构的思想，将软件按照模型、识图、控制器来划分</p><p>M为Model，模型层，指工程中的Javabean，作用是处理数据</p><p>Javabean分为两类：</p><ul><li>实体类bean：专门存储业务数据的</li><li>业务处理bean：指service或dao对象，专门用于处理业务逻辑和数据访问</li></ul><p>V为View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C为Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><h5 id="MVC的工作流程"><a class="header-anchor" href="#MVC的工作流程"></a>MVC的工作流程</h5><p>用户通过视图层发送请求到服务器，在服务器中请求被控制层接收，控制层调用响应的模型层处理请求，处理完毕将结果返回到控制层，控制层再根据请求处理的结果找到相应的视图，渲染数据后最终响应给浏览器</p><p><em>注：三层架构分为表述层（表示层）、业务逻辑层、数据访问层，表述层表示前端页面和后端servlet</em></p><h4 id="什么是SpringMVC"><a class="header-anchor" href="#什么是SpringMVC"></a>什么是SpringMVC</h4><p>SpringMVC是Spring的一个后续产品，是它的一个子项目</p><p>SpringMVC是Spring为表述层开发提供一套完备的解决方案</p><h4 id="特点"><a class="header-anchor" href="#特点"></a>特点</h4><ul><li>Spring家族原生产品，与IOC容器等基础设施无缝对接</li><li>基于原生的servlet，通过功能强大的DispatcherServlet，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li><li>代码清晰简洁，大幅度提高开发效率</li><li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li><li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li></ul><h3 id="环境配置"><a class="header-anchor" href="#环境配置"></a>环境配置</h3><h4 id="web-xml"><a class="header-anchor" href="#web-xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- classpath:表示从类路径下查找配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath*:spring/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 将DispatcherServlet的启动时间提前到工程启动时 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="SpringMVC配置文件"><a class="header-anchor" href="#SpringMVC配置文件"></a>SpringMVC配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhuweitung.springmvc&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 配置JSP视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="基础功能"><a class="header-anchor" href="#基础功能"></a>基础功能</h3><h4 id="RequestMapping注解"><a class="header-anchor" href="#RequestMapping注解"></a>@RequestMapping注解</h4><h5 id="功能"><a class="header-anchor" href="#功能"></a>功能</h5><p>将请求和处理请求的控制器方法关联起来，建立映射关系</p><h5 id="位置"><a class="header-anchor" href="#位置"></a>位置</h5><ul><li><p>标识一个类：设置映射请求的请求路径的初始信息</p></li><li><p>标识一个方法：设置映射请求的请求路径的具体信息</p></li></ul><h5 id="属性"><a class="header-anchor" href="#属性"></a>属性</h5><ul><li>name：映射名称标识</li><li>value/path：请求路径，用数组可以表示多个请求路径，请求路径不匹配时不会报404错误</li><li>method：请求方式，GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE，请求方式不匹配时会报405错误<ul><li>@GetMapping：get请求方式的RequestMapping的派生注解</li><li>@PostMapping：post请求方式的RequestMapping的派生注解</li><li>@PutMapping：put请求方式的RequestMapping的派生注解</li><li>@DeleteMapping：delete请求方式的RequestMapping的派生注解</li></ul></li><li>params：通过请求的请求参数来匹配请求映射，可以通过四种表达式设置请求参数和请求映射的匹配关系，请求参数不匹配时会报400错误<ul><li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li><li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</li><li>“param=value”：要求请求映射所匹配的请求必须携带param请求参数，且参数值为value</li><li>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数，且参数值不为value</li></ul></li><li>headers：通过请求的请求头信息匹配请求映射，可以通过四种表达式设置请求头信息和请求映射的匹配关系，请求头信息不匹配时不会报404错误<ul><li>“header”：要求请求映射所匹配的请求必须携带header请求头信息</li><li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</li><li>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息，且信息为value</li><li>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息，且信息不为value</li></ul></li></ul><h5 id="Ant风格路径"><a class="header-anchor" href="#Ant风格路径"></a>Ant风格路径</h5><ul><li>?：表示任意单个字符（除?和/），如@GetMapping(“he?lo”)可以匹配 /hello、/healo等路径</li><li>*：表示0个若多个字符</li><li>**：表示任意的一层或多层目录，只能使用/**/xxx的方式</li></ul><h5 id="路径占位符"><a class="header-anchor" href="#路径占位符"></a>路径占位符</h5><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>@RequestMapping注解的value属性中通过占位符<code>&#123;xxx&#125;</code>表示传输的数据，再通过<code>@PathVariable</code>注解，将占位符所表示的数据复制给控制其方法的形参，当请求携带占位符数量不一致时会报404错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;demo/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@PathVariable</span> String id, <span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringMVC获取请求参数"><a class="header-anchor" href="#SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h4><h5 id="通过ServletAPI获取"><a class="header-anchor" href="#通过ServletAPI获取"></a>通过ServletAPI获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getParam&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParam</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    System.out.println(request.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>    System.out.println(Arrays.toString(request.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="通过控制器形参获取"><a class="header-anchor" href="#通过控制器形参获取"></a>通过控制器形参获取</h5><p>请求参数名必须和形参名称保持一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getParam2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParam2</span><span class="hljs-params">(String id, String name, String[] hobby)</span> &#123;<br>    System.out.println(id);<br>    System.out.println(name);<br>    System.out.println(Arrays.toString(hobby));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequestParam注解"><a class="header-anchor" href="#RequestParam注解"></a>@RequestParam注解</h5><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><ul><li>value：指定为形参赋值的请求参数的参数名</li><li>required：设置是否必须传输此请求参数，默认为true，默认情况下当value所指定的请求参数没有传输且未设置默认值时会报400错误</li><li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输时，则使用默认值为形参赋值</li></ul><h5 id="RequestHeader注解"><a class="header-anchor" href="#RequestHeader注解"></a>@RequestHeader注解</h5><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解的属性和用法与@RequestParam注解一致</p><h5 id="CookieValue注解"><a class="header-anchor" href="#CookieValue注解"></a>@CookieValue注解</h5><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解的属性和用法与@RequestParam注解一致</p><h5 id="通过POJO获取请求参数"><a class="header-anchor" href="#通过POJO获取请求参数"></a>通过POJO获取请求参数</h5><p>可以在控制器方法的形参位置设置一个实体类型的形参，若浏览器传输的请求参数和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><h5 id="解决获取请求参数的乱码问题"><a class="header-anchor" href="#解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h5><p>get请求乱码需要修改tomcat的配置，<code>conf/server.xml</code>中给对应的Connector标签增加<code>URIEncoding=&quot;UTF-8&quot;</code>属性；</p><p>post请求乱码需要在在DispatcherServlet调度请求之前处理请求的编码问题，所以需要在Filter中做处理</p><p>在web.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置字符集过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="域对象共享数据"><a class="header-anchor" href="#域对象共享数据"></a>域对象共享数据</h4><h5 id="使用ServletAPI向request域对象共享数据"><a class="header-anchor" href="#使用ServletAPI向request域对象共享数据"></a>使用ServletAPI向request域对象共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;demo/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@PathVariable</span> String id, <span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>    request.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, id);<br>    request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用ModelAndView向request域对象共享数据"><a class="header-anchor" href="#使用ModelAndView向request域对象共享数据"></a>使用ModelAndView向request域对象共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;modelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">modelAndView</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    view.addObject(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;model&quot;</span>);<br>    view.addObject(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;view&quot;</span>);<br>    view.setViewName(<span class="hljs-string">&quot;demo&quot;</span>);<br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用Model向request域对象共享数据"><a class="header-anchor" href="#使用Model向request域对象共享数据"></a>使用Model向request域对象共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;model&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">model</span><span class="hljs-params">(Model model)</span> &#123;<br>    model.addAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用Map向request域对象共享数据"><a class="header-anchor" href="#使用Map向request域对象共享数据"></a>使用Map向request域对象共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;map&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">map</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>    map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用ModelMap向request域对象共享数据"><a class="header-anchor" href="#使用ModelMap向request域对象共享数据"></a>使用ModelMap向request域对象共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;modelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">modelMap</span><span class="hljs-params">(ModelMap modelMap)</span> &#123;<br>    modelMap.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);<br>    modelMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;modelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Model、ModelMap、Map的关系"><a class="header-anchor" href="#Model、ModelMap、Map的关系"></a>Model、ModelMap、Map的关系</h5><p>运行类型都是BindingAwareModelMap</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/a1ff87be57f83f7acbe9126776e28e5f.png" alt=""></p><p>以上几种向request域共享对象的方法最终都会在DispatcherServlet的doDispatch方法中被处理为ModelAndView</p><h5 id="向session域共享数据"><a class="header-anchor" href="#向session域共享数据"></a>向session域共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;session&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">session</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>    session.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="向application域共享数据"><a class="header-anchor" href="#向application域共享数据"></a>向application域共享数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;application&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">application</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>);<br>    application.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringMVC的视图"><a class="header-anchor" href="#SpringMVC的视图"></a>SpringMVC的视图</h4><p>SpingMVC中的视图是View接口，视图的作用是渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h5 id="转发视图"><a class="header-anchor" href="#转发视图"></a>转发视图</h5><p>SpringMVC中默认的转发视图是<code>InternalResourceView</code>（当配置的视图解析器不为InternalResourceViewResolver时可以debug看到差别，不然都是InternalResourceView）</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以&quot;forward:&quot;为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀&quot;forward:&quot;去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;forward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">forward</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/view/default&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="重定向视图"><a class="header-anchor" href="#重定向视图"></a>重定向视图</h5><p>SpringMVC中默认的重定向视图是<code>RedirectView</code></p><p>当控制器方法中所设置的视图名称以&quot;redirect:&quot;为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀&quot;redirect:&quot;去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/view/default&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="视图控制器"><a class="header-anchor" href="#视图控制器"></a>视图控制器</h5><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 访问testView的请求跳转到success页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RESTful"><a class="header-anchor" href="#RESTful"></a>RESTful</h3><h4 id="简介"><a class="header-anchor" href="#简介"></a>简介</h4><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移</p><h4 id="RESTful的实现"><a class="header-anchor" href="#RESTful的实现"></a>RESTful的实现</h4><p>HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id=1</td><td>user/1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id=1</td><td>user/1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h4 id="通过过滤器处理delete和put请求"><a class="header-anchor" href="#通过过滤器处理delete和put请求"></a>通过过滤器处理delete和put请求</h4><p>由于浏览器只支持发送get和post方式的请求，发送put和delete请求需要使用SpringMVC 提供的<code>HiddenHttpMethodFilter</code>将 POST 请求转换为 DELETE 或 PUT 请求</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/25c95ff144ecc582dd87ea63e09c7667.png" alt=""></p><p>web.xml中配置过滤器（需要配置在字符集过滤器后面，否则字符集过滤器就会失效）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置HiddenHttpMethodFilter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="静态资源访问"><a class="header-anchor" href="#静态资源访问"></a>静态资源访问</h4><p>在spring配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开放对静态资源的访问 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>第一个配置表示开启默认的Servlet请求处理器，而对静态资源的访问就是通过容器默认servlet处理（DefaultServletHttpRequestHandler）的，资源的请求过程为：先到DispatcherServlet处理，发现无法处理，就到默认Servlet处理</p><p>当开启第一个配置之后@RequestMapping注解方式配置的处理器就会失效，这时就需要加上第二个配置，让MVC注解生效</p><h3 id="扩展功能"><a class="header-anchor" href="#扩展功能"></a>扩展功能</h3><h4 id="HttpMessageConverter"><a class="header-anchor" href="#HttpMessageConverter"></a>HttpMessageConverter</h4><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity</p><h5 id="RequestBody"><a class="header-anchor" href="#RequestBody"></a>@RequestBody</h5><p>@RequestBody可以获取<code>请求体</code>，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><h5 id="ResponseBody"><a class="header-anchor" href="#ResponseBody"></a>@ResponseBody</h5><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的<code>响应体</code>响应到浏览器</p><p>处理Json的步骤</p><ul><li>引入json依赖，如jackson、fastjson</li><li>在spring配置文件中开启mvc注解驱动（&lt;mvc:annotation-driven/&gt;）</li><li>HandlerAdaptor中会自动装配一个消息转换器，如引入的是jackson，则为MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为json格式的字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;user/&#123;name&#125;&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">updateName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> userService.findAllByName(name);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequestEntity"><a class="header-anchor" href="#RequestEntity"></a>RequestEntity</h5><p>RequestEntity封装<code>请求报文</code>的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><h5 id="ResponseEntity"><a class="header-anchor" href="#ResponseEntity"></a>ResponseEntity</h5><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的<code>响应报文</code></p><h5 id="RestController"><a class="header-anchor" href="#RestController"></a>@RestController</h5><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h4 id="文件上传和下载"><a class="header-anchor" href="#文件上传和下载"></a>文件上传和下载</h4><h5 id="文件下载"><a class="header-anchor" href="#文件下载"></a>文件下载</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;download&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;logo.png&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/static/img/&quot;</span> + filename;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ctx.getResourceAsStream(filePath);<br>    <span class="hljs-comment">// 通过响应头设置返回数据类型</span><br>    response.setContentType(ctx.getMimeType(filePath));<br>    <span class="hljs-comment">// 通过响应头设置数据用于下载</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">headerFilename</span> <span class="hljs-operator">=</span> filename;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ua</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br>    <span class="hljs-keyword">if</span> (ua.toLowerCase().contains(<span class="hljs-string">&quot;firefox&quot;</span>)) &#123;<br>        <span class="hljs-comment">// 火狐浏览器，文件名base64编码防止乱码</span><br>        headerFilename = <span class="hljs-string">&quot;=?utf-8?B?&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">BASE64Encoder</span>().encode(filename.getBytes(StandardCharsets.UTF_8)) + <span class="hljs-string">&quot;?=&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// IE、谷歌浏览器，文件名url编码防止乱码</span><br>        headerFilename = URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>    &#125;<br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + headerFilename);<br>    IOUtils.copy(is, response.getOutputStream());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="文件上传"><a class="header-anchor" href="#文件上传"></a>文件上传</h5><p>在spring配置文件中配置文件上传解析器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置文件上传解析器 id必须为multipartResolver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(HttpServletRequest request, MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">extName</span> <span class="hljs-operator">=</span> FileUtil.extName(originalFilename);<br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(extName)) &#123;<br>        extName = <span class="hljs-string">&quot;.&quot;</span> + extName;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.fastUUID().toString(<span class="hljs-literal">true</span>) + extName;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> request.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uploadFilePath</span> <span class="hljs-operator">=</span> ctx.getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>) + File.separator + DateUtil.today() + File.separator + fileName;<br>    FileUtil.mkParentDirs(uploadFilePath);<br>    file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFilePath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="拦截器"><a class="header-anchor" href="#拦截器"></a>拦截器</h4><p>过滤器作用于浏览器请求到DispatcherServlet之间</p><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在Spring的配置文件中进行配置</p><h5 id="拦截器的配置"><a class="header-anchor" href="#拦截器的配置"></a>拦截器的配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对DispatcherServlet所处理的所有请求进行拦截 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;bean class=&quot;com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注册为组件后可以使用此方式，效果与上面的方式一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;globalHandlerInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对指定请求路径进行拦截配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/admin/hello&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;adminHandlerInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="抽象方法"><a class="header-anchor" href="#抽象方法"></a>抽象方法</h5><p>拦截器有三个抽象方法：</p><ul><li><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p></li><li><p>postHandle：控制器方法执行之后执行postHandle()</p></li><li><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p></li></ul><h5 id="执行顺序"><a class="header-anchor" href="#执行顺序"></a>执行顺序</h5><p>若每个拦截器执行preHandle都放行：</p><p>多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs log">com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor preHandle<br>com.zhuweitung.springmvc.interceptor.AdminHandlerInterceptor preHandle<br>com.zhuweitung.springmvc.interceptor.AdminHandlerInterceptor postHandle<br>com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor postHandle<br>com.zhuweitung.springmvc.interceptor.AdminHandlerInterceptor afterCompletion<br>com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor afterCompletion<br></code></pre></td></tr></table></figure><p>若某个拦截器执行preHandle没有放行：</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor preHandle<br>com.zhuweitung.springmvc.interceptor.AdminHandlerInterceptor preHandle<br>com.zhuweitung.springmvc.interceptor.GlobalHandlerInterceptor afterCompletion<br></code></pre></td></tr></table></figure><p>HandlerExecutionChain相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPreHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>HandlerInterceptor[] interceptors = getInterceptors();<br><span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;<br>        <span class="hljs-comment">// 拦截器正序执行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; interceptors.length; i++) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> interceptors[i];<br><span class="hljs-keyword">if</span> (!interceptor.preHandle(request, response, <span class="hljs-built_in">this</span>.handler)) &#123;<br>                <span class="hljs-comment">// 拦截器执行preHandle返回false后直接执行afterCompletion</span><br>triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>            <span class="hljs-comment">// 记录当前拦截器索引</span><br><span class="hljs-built_in">this</span>.interceptorIndex = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">applyPostHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> ModelAndView mv)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 所有拦截器preHandle都返回true才会到这里</span><br>HandlerInterceptor[] interceptors = getInterceptors();<br><span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;<br>        <span class="hljs-comment">// 拦截器倒序遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> interceptors.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> interceptors[i];<br>interceptor.postHandle(request, response, <span class="hljs-built_in">this</span>.handler, mv);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">triggerAfterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, <span class="hljs-meta">@Nullable</span> Exception ex)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br>HandlerInterceptor[] interceptors = getInterceptors();<br><span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;<br>        <span class="hljs-comment">// 从记录的拦截器索引位置开始倒序遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorIndex; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">HandlerInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> interceptors[i];<br><span class="hljs-keyword">try</span> &#123;<br>interceptor.afterCompletion(request, response, <span class="hljs-built_in">this</span>.handler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex2) &#123;<br>logger.error(<span class="hljs-string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h4><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e3928ff80f1e36ce9dc13557f35ebd03.png" alt=""></p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver</p><h5 id="基于配置的异常处理"><a class="header-anchor" href="#基于配置的异常处理"></a>基于配置的异常处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自定义异常处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;com.zhuweitung.springmvc.exception.SimpleException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="基于注解的异常处理"><a class="header-anchor" href="#基于注解的异常处理"></a>基于注解的异常处理</h5><p>@ControllerAdvice：将当前类标识为异常处理的组件</p><p>@ExceptionHandler：用于设置所标识方法处理的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleExceptionAdvice</span> &#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = &#123;SimpleException.class&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleSimpleException</span><span class="hljs-params">(Exception exception, Model model)</span> &#123;<br>        model.addAttribute(<span class="hljs-string">&quot;exception&quot;</span>, exception);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="注解配置SpringMVC"><a class="header-anchor" href="#注解配置SpringMVC"></a>注解配置SpringMVC</h3><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h4 id="初始化类代替web-xml"><a class="header-anchor" href="#初始化类代替web-xml"></a>初始化类代替web.xml</h4><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ec1332e00d59d8cac1110ce9bc6e423a.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring配置类</span><br><span class="hljs-comment">     * 指定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC配置类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置过滤器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-comment">// 配置字符集过滤器</span><br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">characterEncodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 配置HiddenHttpMethodFilter</span><br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;characterEncodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringConfig配置类代替spring配置文件"><a class="header-anchor" href="#SpringConfig配置类代替spring配置文件"></a>SpringConfig配置类代替spring配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span>    <span class="hljs-comment">// 开启事务</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:hikari.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSourceClassName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dataSourceClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSource.driverClassName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSource.jdbcUrl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String jdbcUrl;<br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSource.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;dataSource.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;minimumIdle&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer minimumIdle;<br>    <span class="hljs-meta">@Value(&quot;$&#123;maximumPoolSize&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer maximumPoolSize;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">hikariDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.put(<span class="hljs-string">&quot;dataSourceClassName&quot;</span>, dataSourceClassName);<br>        properties.put(<span class="hljs-string">&quot;dataSource.driverClassName&quot;</span>, driverClassName);<br>        properties.put(<span class="hljs-string">&quot;dataSource.jdbcUrl&quot;</span>, jdbcUrl);<br>        properties.put(<span class="hljs-string">&quot;dataSource.username&quot;</span>, username);<br>        properties.put(<span class="hljs-string">&quot;dataSource.password&quot;</span>, password);<br>        properties.put(<span class="hljs-string">&quot;minimumIdle&quot;</span>, minimumIdle);<br>        properties.put(<span class="hljs-string">&quot;maximumPoolSize&quot;</span>, maximumPoolSize);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariConfig</span>(properties));<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DataSource hikariDataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(hikariDataSource);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">dataSourceTransactionManager</span><span class="hljs-params">(DataSource hikariDataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(hikariDataSource);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WebConfig配置类代替SpringMVC配置文件"><a class="header-anchor" href="#WebConfig配置类代替SpringMVC配置文件"></a>WebConfig配置类代替SpringMVC配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span>   <span class="hljs-comment">// 开启mvc注解驱动</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.zhuweitung.springmvc&quot;)</span>  <span class="hljs-comment">// 组件扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置JSP视图解析器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> InternalResourceViewResolver <span class="hljs-title function_">internalResourceViewResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalResourceViewResolver</span>(<span class="hljs-string">&quot;/WEB-INF/&quot;</span>, <span class="hljs-string">&quot;.jsp&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置文件上传解析器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开放对静态资源的访问</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置拦截器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalHandlerInterceptor</span>());<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminHandlerInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/admin/**&quot;</span>).exclude<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SpringMVC执行流程"><a class="header-anchor" href="#SpringMVC执行流程"></a>SpringMVC执行流程</h3><h4 id="SpringMVC常用组件"><a class="header-anchor" href="#SpringMVC常用组件"></a>SpringMVC常用组件</h4><ul><li><p>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</li></ul></li><li><p>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：根据请求的url、method等信息查找Handler，即控制器方法</li></ul></li><li><p>Handler：<strong>处理器</strong>（Controller），需要工程师开发</p><ul><li>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</li></ul></li><li><p>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</li></ul></li><li><p>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</p><ul><li>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</li></ul></li><li><p>View：<strong>视图</strong></p><ul><li>作用：将模型数据通过页面展示给用户</li></ul></li></ul><h4 id="DispatcherServlet初始化过程"><a class="header-anchor" href="#DispatcherServlet初始化过程"></a>DispatcherServlet初始化过程</h4><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期，DispatcherServlet的初始化入口也是init(ServletConfig config)方法</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/197f02fb408f95ff31dfbf3c1d3426b2.png" alt=""></p><p>首先DispatcherServlet中没有重写<code>init(ServletConfig config)</code>方法，向上找它的父类，发现由<code>GenericServlet</code>实现了，里面调用了<code>init()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    <span class="hljs-built_in">this</span>.config = config;<br>    <span class="hljs-comment">// 该处理为空实现，留给子类</span><br>    <span class="hljs-built_in">this</span>.init();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HttpServletBean</code>重写了<code>init()</code>方法，然后调用了<code>initServletBean()</code>方法，进行<strong>封装初始化参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><span class="hljs-comment">// Set bean properties from init parameters.</span><br>    <span class="hljs-comment">// 解析web.xml中init-param 并封装至pvs中</span><br><span class="hljs-type">PropertyValues</span> <span class="hljs-variable">pvs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletConfigPropertyValues</span>(getServletConfig(), <span class="hljs-built_in">this</span>.requiredProperties);<br><span class="hljs-keyword">if</span> (!pvs.isEmpty()) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> PropertyAccessorFactory.forBeanPropertyAccess(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResourceLoader</span>(getServletContext());<br>bw.registerCustomEditor(Resource.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceEditor</span>(resourceLoader, getEnvironment()));<br>            <span class="hljs-comment">// 该处理为空实现，留给子类，使用模板模式</span><br>initBeanWrapper(bw);<br>            <span class="hljs-comment">// 属性的注入</span><br>bw.setPropertyValues(pvs, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isErrorEnabled()) &#123;<br>logger.error(<span class="hljs-string">&quot;Failed to set bean properties on servlet &#x27;&quot;</span> + getServletName() + <span class="hljs-string">&quot;&#x27;&quot;</span>, ex);<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Let subclasses do whatever initialization they like.</span><br>    <span class="hljs-comment">// 初始化Servlet对象，模板模式留给子类扩展</span><br>initServletBean();<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initServletBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FrameworkServlet</code>重写了<code>initServletBean()</code>方法，里面调用了<code>initWebApplicationContext()</code>方法，进行对<strong>WebApplicationContext的初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Srping的IOC容器</span><br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-comment">// SpringMVC的IOC容器</span><br><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-comment">// 根据contextAttribute属性加载</span><br>wac = findWebApplicationContext();<br>&#125;<br><span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 创建IOC容器</span><br>wac = createWebApplicationContext(rootContext);<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新容器，该处理为空实现，留给子类</span><br>onRefresh(wac);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br><span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>getServletContext().setAttribute(attrName, wac);<br>&#125;<br><span class="hljs-keyword">return</span> wac;<br>&#125;<br><br><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>Class&lt;?&gt; contextClass = getContextClass();<br><span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br><span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br><span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br><span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>&#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br><span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br>wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 将Spring的IOC容器设置为父容器</span><br>wac.setParent(parent);<br><span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br><span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>wac.setConfigLocation(configLocation);<br>&#125;<br>    <span class="hljs-comment">// 初始化Spring环境加载配置文件</span><br>configureAndRefreshWebApplicationContext(wac);<br><span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DispatcherServlet</code>重写了<code>onRefresh</code>方法，方法里面会初始化策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRefresh</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>initStrategies(context);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>   <span class="hljs-comment">// 初始化文件上传解析器</span><br>initMultipartResolver(context);<br>initLocaleResolver(context);<br>initThemeResolver(context);<br>    <span class="hljs-comment">// 初始化处理器映射器</span><br>initHandlerMappings(context);<br>    <span class="hljs-comment">// 初始化处理器适配器</span><br>initHandlerAdapters(context);<br>    <span class="hljs-comment">// 初始化异常处理器</span><br>initHandlerExceptionResolvers(context);<br>initRequestToViewNameTranslator(context);<br>    <span class="hljs-comment">// 初始化视图解析器</span><br>initViewResolvers(context);<br>initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DispatcherServlet调用组件处理请求"><a class="header-anchor" href="#DispatcherServlet调用组件处理请求"></a>DispatcherServlet调用组件处理请求</h4><p>首先DispatcherServlet中没有实现service(ServletRequest req, ServletResponse res)方法，从它的父类找，发现<code>HttpServlet</code>实现了，里面又调用了<code>service(HttpServletRequest req, HttpServletResponse resp)</code></p><p>这个方法被<code>FrameworkServlet</code>重写，里面又调用<code>processRequest</code>方法，processRequest方法中调用了<code>doService</code>方法，该方法为空方法，被<code>DispatcherServlet</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>logRequest(request);<br><span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br><span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br><span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br><span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>&#125;<br>request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>doDispatch(request, response);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br><span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br><span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>restoreAttributesAfterInclude(request, attributesSnapshot);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>doService方法中调用了<code>doDispatch</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>processedRequest = checkMultipart(request);<br>multipartRequestParsed = (processedRequest != request);<br><span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">// 拦截器调用链</span><br>mappedHandler = getHandler(processedRequest);<br><span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>noHandlerFound(processedRequest, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// Determine handler adapter for the current request.</span><br>            <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br><span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>applyDefaultViewName(processedRequest, mv);<br>             <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>        <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图</span><br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>doDispatch方法中调用了<code>processDispatchResult</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params"><span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>mv = processHandlerException(request, response, handler, exception);<br>errorView = (mv != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// Did the handler return a view to render?</span><br><span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>render(mv, request, response);<br><span class="hljs-keyword">if</span> (errorView) &#123;<br>WebUtils.clearErrorRequestAttributes(request);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br><span class="hljs-comment">// Concurrent handling started during a forward</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringMVC执行流程-v2"><a class="header-anchor" href="#SpringMVC执行流程-v2"></a>SpringMVC执行流程</h4><ul><li>用户向服务器发送请求，请求被前端控制器DispatcherServlet捕获</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射<ul><li>若映射不存在<ul><li>判断是否配置了mvc:default-servlet-handler</li><li>若没配置，客户端显示404错误</li><li>若有配置，则访问目标资源（一般为静态资源），找不目标资源时客户端显示404错误</li></ul></li><li>若映射存在<ul><li>根据该URI，调用HandlerMapping获取该Handler配置的所有相关对象（Handler对象以及对于的拦截器），最后以HandlerExecutionChain执行链对象的形式返回</li><li>DispatcherServlet得到Handler，获取HandlerAdapter</li><li>获得HandlerAdapter后，执行拦截器的preHandler方法</li><li>提取请求中的模型数据，填充到Handler入参，执行Handler（Controller）方法，处理请求<ul><li>填充数据模型到入参时，spring还做了下面工作</li><li>HttpMessageConveter：将请求消息转换为一个对象</li><li>数据类型转换：如将String转换为Integer</li><li>数据格式化：如将字符串转换成格式化数字或格式化日期等</li><li>数据验证：验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li></ul></li><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象</li><li>开始执行拦截器的postHandle方法</li><li>根据返回的ModelAndView选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图<ul><li>此时会判断是否存在异常，如果存在异常，则执行HandlerExceptionResolver进行异常处理</li></ul></li><li>渲染视图完毕执行拦截器的afterCompletion方法</li><li>将渲染结果返回给客户端</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5知识回顾及查漏补缺</title>
      <link href="/posts/2217974762/"/>
      <url>/posts/2217974762/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h3><ul><li><p>Spring是一个轻量级的开源的JavaEE框架</p></li><li><p>Srping可以解决企业应用开发的复杂性</p></li><li><p>Spring有两个核心部分：IOC和AOP</p><ul><li>IOC：控制反转，把创建对象的过程交给Spring进行管理</li><li>AOP：面向切面</li></ul></li><li><p>Spring特点：</p><ul><li>方便解耦，简化开发</li><li>AOP编程支持</li><li>方便程序测试</li><li>方便集成其他框架</li><li>降低JavaEE API开发使用难度</li><li>方便进行事务操作</li></ul></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/cb30cff19100a2150fb451e40d8e1d5c.png" alt=""></p><h3 id="IOC容器"><a class="header-anchor" href="#IOC容器"></a>IOC容器</h3><h4 id="底层原理"><a class="header-anchor" href="#底层原理"></a>底层原理</h4><p>用到xml解析、工厂模式、反射技术</p><h4 id="IOC容器实现方式"><a class="header-anchor" href="#IOC容器实现方式"></a>IOC容器实现方式</h4><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>Spring提供IOC容器实现两种方式：BeanFactory、ApplicationContext</p><h5 id="BeanFactory"><a class="header-anchor" href="#BeanFactory"></a>BeanFactory</h5><p>IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用</p><p>特点：</p><p>加载配置文件时不会创建对象，在使用对象时才创建对象</p><h5 id="ApplicationContext"><a class="header-anchor" href="#ApplicationContext"></a>ApplicationContext</h5><p>BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</p><p>特点：</p><p>加载配置文件时就会将配置文件中的对象进行创建</p><p>ApplicationContext接口的主要实现类有：</p><ul><li>FileSystemXmlApplicationContext</li><li>ClassPathXmlApplicationContext</li></ul><h4 id="什么是Bean管理"><a class="header-anchor" href="#什么是Bean管理"></a>什么是Bean管理</h4><ul><li>Spring创建对象</li><li>Spring注入属性</li></ul><h4 id="基于xml管理bean"><a class="header-anchor" href="#基于xml管理bean"></a>基于xml管理bean</h4><h5 id="方式一"><a class="header-anchor" href="#方式一"></a>方式一</h5><p>无参构造+属性set方式创建：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.spring5.mvc.model.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wangwu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;文字&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认执行无参构造来创建对象</p><h5 id="方式二"><a class="header-anchor" href="#方式二"></a>方式二</h5><p>有参构造创建：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.spring5.mvc.model.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lisi&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="常用标签及属性解释"><a class="header-anchor" href="#常用标签及属性解释"></a>常用标签及属性解释</h5><ul><li>bean：指一个对象<ul><li>id：唯一标识</li><li>class：类全路径</li><li>scope：作用域<ul><li>singleton：单实例，默认值，spring加载配置文件时就会创建对象</li><li>prototype：多实例，加载配置文件时不创建对象，调用getBean时创建对象</li></ul></li></ul></li><li>property：指对象的属性<ul><li>name：属性名</li><li>value：属性值</li><li>ref：关联其他bean</li></ul></li><li>null：设置属性值为null</li><li>constructor-arg：指类的构造器<ul><li>name：构造器中参数名</li><li>value：参数值</li></ul></li></ul><h5 id="属性值包含特殊字符解决方式"><a class="header-anchor" href="#属性值包含特殊字符解决方式"></a>属性值包含特殊字符解决方式</h5><ul><li>将特殊字符转义</li><li>使用&lt;![CDATA[]]&gt;包裹属性值</li></ul><h5 id="自动装配"><a class="header-anchor" href="#自动装配"></a>自动装配</h5><p>根据指定装配规则（属性名或者属性类型），不需要明确指定属性名或属性类型，Spring自动将匹配的属性值注入；</p><p>使用到bean标签的<code>autowire</code>属性</p><ul><li>byName：根据属性名称注入</li><li>byType：根据属性类型注入</li></ul><h4 id="FactoryBean"><a class="header-anchor" href="#FactoryBean"></a>FactoryBean</h4><p>Spring有两种bean，一种普通bean，另外一种工厂bean（FactoryBean）</p><ul><li>普通bean：在配置文件中定义的bean类型就是返回类型</li><li>工厂bean：在配置文件中定义bean类型可以和返回类型不一样，实现FactoryBean接口</li></ul><h4 id="Bean生命周期"><a class="header-anchor" href="#Bean生命周期"></a>Bean生命周期</h4><ul><li>通过构造器创建bean实例（无参构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>把bean实例传递给bean的后置处理器方法（BeanPostProcessor接口的postProcessBeforeInitialization）</li><li>调用bean的初始化方法（需要进行配置）</li><li>把bean实例传递给bean的后置处理器方法（BeanPostProcessor接口的postProcessAfterInitialization）</li><li>bean可以使用了</li><li>当容器关闭时，调用bean的销毁方法（需要进行配置销毁的方法）</li></ul><h4 id="基于注解管理bean"><a class="header-anchor" href="#基于注解管理bean"></a>基于注解管理bean</h4><p>需要引入spring-aop依赖，开启组件扫描（配置文件或注解方式）</p><p>配置文件方式开启组件扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhuweitung&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注解方式开启组件扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 作为配置类，替代xml配置文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.zhuweitung&quot;)</span>    <span class="hljs-comment">// 开启组件扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="对象创建"><a class="header-anchor" href="#对象创建"></a>对象创建</h5><ul><li>@Component：一般用在组件</li><li>@Service：一般用在service层</li><li>@Controller：一般用在controller层</li><li>@Repository：一般用在dao层</li></ul><p>上面四个注解功能是一样的，都可以用来创建Bean实例</p><h5 id="属性注入"><a class="header-anchor" href="#属性注入"></a>属性注入</h5><ul><li>@Autowired：根据属性类型自动装配</li><li>@Qualifier：根据属性名称进行注入，需要和@Autowired一起使用，当接口有多个实现类时用此注解指定实现类名称</li><li>@Resource：可以根据类型注入，也可以根据名称注入，它是javax包中的</li><li>@Value：注入普通类型属性</li></ul><h3 id="AOP"><a class="header-anchor" href="#AOP"></a>AOP</h3><h4 id="底层原理-v2"><a class="header-anchor" href="#底层原理-v2"></a>底层原理</h4><p>底层使用动态代理，分为两种情况：</p><ul><li><p>有接口时，使用JDK动态代理（创建接口实现类的代理对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculateProxy</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ICalculate</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (ICalculate) getProxyInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PlusCalculate</span>());<br>        System.out.println(o.calculate(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>        <span class="hljs-comment">// invoke执行前...</span><br><span class="hljs-comment">// calculate方法执行...</span><br><span class="hljs-comment">// invoke执行后...</span><br><span class="hljs-comment">// 3</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculateInvocationHandler</span>(target));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculateInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>        <span class="hljs-keyword">private</span> Object target;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculateInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>            <span class="hljs-built_in">this</span>.target = target;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            System.out.println(<span class="hljs-string">&quot;invoke执行前...&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>            System.out.println(<span class="hljs-string">&quot;invoke执行后...&quot;</span>);<br>            <span class="hljs-keyword">return</span> o;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICalculate</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PlusCalculate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICalculate</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;calculate方法执行...&quot;</span>);<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>没接口时，使用CGLIB动态代理（创建当前类子类的代理对象）</p></li></ul><h4 id="术语"><a class="header-anchor" href="#术语"></a>术语</h4><ul><li>连接点（Join point）：类中可以增强的方法</li><li>切点（Pointcut）：通过切点表达式匹配接入点</li><li>通知（增强，Advice）：实际增强的逻辑部分<ul><li>前置通知：切入方法执行前做通知，@Before</li><li>后置通知：切入方法执行后做通知，@AfterReturning</li><li>环绕通知：切入方法执行前后做通知，@Around</li><li>异常通知：切入方法执行抛异常做通知，@AfterThrowing</li><li>最终通知：切入方法执行不管有无异常都做通知（类似finally），@After</li></ul></li><li>切面（Aspect）：由一系列切点、增强和引入组成的模块对象，可定义优先级，从而影响增强和引入的执行顺序</li></ul><h4 id="切入点表达式"><a class="header-anchor" href="#切入点表达式"></a>切入点表达式</h4><p>execution([权限修饰符] [返回类型] [类全路径] [方法名称] [参数列表])</p><h4 id="AspectJ注解方式"><a class="header-anchor" href="#AspectJ注解方式"></a>AspectJ注解方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculateEnhance</span> &#123;<br><br>    <span class="hljs-comment">// 前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeCalculate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;beforeCalculate...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 后置通知</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningCalculate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturningCalculate...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundCalculate</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;aroundBeforeCalculate...&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;aroundAfterCalculate...&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br><br>    <span class="hljs-comment">// 异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingCalculate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowingCalculate...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCalculate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCalculate...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//aroundBeforeCalculate...</span><br><span class="hljs-comment">//beforeCalculate...</span><br><span class="hljs-comment">//calculate方法执行...</span><br><span class="hljs-comment">//afterReturningCalculate...</span><br><span class="hljs-comment">//afterCalculate...</span><br><span class="hljs-comment">//aroundAfterCalculate...</span><br></code></pre></td></tr></table></figure><h5 id="其他注意事项"><a class="header-anchor" href="#其他注意事项"></a>其他注意事项</h5><p>将可以重复使用的表达式提取出来，放到切入点，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 公共接入点</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-comment">// 前置通知</span><br><span class="hljs-meta">@Before(value = &quot;pointcut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeCalculate</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;beforeCalculate...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个方法被多个增强类切入时，可以在增强了上加上<code>@Order</code>注解来设置优先级</p><h4 id="AspectJ配置文件方式"><a class="header-anchor" href="#AspectJ配置文件方式"></a>AspectJ配置文件方式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;plusCalculate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.spring5.aop.PlusCalculate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;calculateEnhance&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.spring5.aop.CalculateEnhance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切入点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.zhuweitung.spring5.aop.ICalculate.calculate(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;calculateEnhance&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前置通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeCalculate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后置通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningCalculate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-returning</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 环绕通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundCalculate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:around</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 异常通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingCalculate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after-throwing</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最终通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterCalculate&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JdbcTemplate"><a class="header-anchor" href="#JdbcTemplate"></a>JdbcTemplate</h3><p>Spring框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库操作</p><h4 id="JdbcTemplate对象的创建和属性注入"><a class="header-anchor" href="#JdbcTemplate对象的创建和属性注入"></a>JdbcTemplate对象的创建和属性注入</h4><h5 id="使用注解方式"><a class="header-anchor" href="#使用注解方式"></a>使用注解方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">hikariDataSource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;dataSourceClassName&quot;</span>, dataSourceClassName);<br>    properties.put(<span class="hljs-string">&quot;dataSource.jdbcUrl&quot;</span>, jdbcUrl);<br>    properties.put(<span class="hljs-string">&quot;dataSource.username&quot;</span>, username);<br>    properties.put(<span class="hljs-string">&quot;dataSource.password&quot;</span>, password);<br>    properties.put(<span class="hljs-string">&quot;minimumIdle&quot;</span>, minimumIdle);<br>    properties.put(<span class="hljs-string">&quot;maximumPoolSize&quot;</span>, maximumPoolSize);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariConfig</span>(properties));<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DataSource hikariDataSource)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(hikariDataSource);<br>&#125;<br></code></pre></td></tr></table></figure><p>在dao层引入并使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-keyword">return</span> jdbcTemplate.update(<span class="hljs-string">&quot;INSERT INTO `user` (`name`, `password`) VALUES (?, ?)&quot;</span>, user.getName(), user.getPassword());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h4><ul><li><p>update(sql, args…)：执行增删改操作</p></li><li><p>queryForObject(sql, class, args…)：查询返回单列，如count查询</p><ul><li>class未返回单列的类型</li></ul></li><li><p>queryForObject(sql, rowmapper, args…)：查询返回单个对象</p><ul><li>第一个参数是sql语句</li><li>第二参数是RowMapper接口实现类的实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbcTemplate.queryForObject(<span class="hljs-string">&quot;select * from user where id = ?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class), id);<br></code></pre></td></tr></table></figure><ul><li>第三个参数是sql语句值，是可变参数列表</li></ul></li><li><p>query(sql, rowmapper, args…)：查询多个对象的集合</p><ul><li>第一个参数是sql语句</li><li>第二个参数是RowMapper接口实现类的实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbcTemplate.query(<span class="hljs-string">&quot;select * from user where name like concat(&#x27;%&#x27;, ? &#x27;%&#x27;)&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class), name);<br></code></pre></td></tr></table></figure><ul><li>第三个参数是sql语句值，是可变参数列表</li></ul></li><li><p>batchUpdate(sql, list)：批量增删改</p><ul><li>第二个参数 List&lt;Object[]&gt; batchArgs ，每个Object[]表示添加一行数据的sql语句值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] batchAdd(List&lt;User&gt; users) &#123;<br>    List&lt;Object[]&gt; batchArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    users.forEach(u -&gt; &#123;<br>        batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;u.getName(), u.getPassword()&#125;);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> jdbcTemplate.batchUpdate(<span class="hljs-string">&quot;INSERT INTO user (`name`, `password`) VALUES (?, ?)&quot;</span>, batchArgs);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="事务管理"><a class="header-anchor" href="#事务管理"></a>事务管理</h3><p>Spring进行事务管理有两种方式：</p><ul><li>编程式事务管理：使用比较麻烦</li><li>声明式事务管理：使用方便<ul><li>基于注解方式</li><li>基于xml配置文件方式</li></ul></li></ul><p>Spring进行声明式事务管理，底层使用AOP原理</p><h4 id="Spring事务管理API"><a class="header-anchor" href="#Spring事务管理API"></a>Spring事务管理API</h4><p>PlatformTransactionManager接口针对不同的框架有不同的实现类</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1a59184c865e5e6c03f05eaff5ddae2e.png" alt=""></p><h4 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h4><p>Spring配置类上加上<code>@EnableTransactionManagement</code>注解开启事务</p><p>继续在配置类中创建事务管理器对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title function_">dataSourceTransactionManager</span><span class="hljs-params">(DataSource hikariDataSource)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>(hikariDataSource);<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要事务操作的方法上加上<code>@Transactional</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(Object... args)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="声明式事务管理参数配置"><a class="header-anchor" href="#声明式事务管理参数配置"></a>声明式事务管理参数配置</h4><p>即@Transactional的属性</p><ul><li>propagation：事务传播行为，描述当一个事务方法被另一个事务方法调用时，这个事务该如何进行<ul><li><strong>REQUIRED：若有事务在运行当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</strong></li><li>SUPPORTS：若有事务正在运行，当前方法就在这个事务内运行，否则他可以不允许在事务中</li><li>MANDATORY：当前方法必须运行在事务内部，若没有正在运行的事务，就抛出异常</li><li><strong>REQUIRES_NEW：当前方法必须启动新事务，并在自己的事务内运行，若有其他事务正在运行，应该将它挂起</strong></li><li>NOT_SUPPORTED：当前方法不应该运行在事务中，若有运行的事务，将它挂起</li><li>NEVER：当前方法不应该运行在事务中，若有运行的事务，就抛出异常</li><li>NESTED：若有事务在运行，当前方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行</li></ul></li><li>isolation：配置事务隔离级别，三个读问题：脏读、不可重复度、幻读<ul><li>DEFAULT：数据库默认隔离级别</li><li>READ_UNCOMMITTED：读未提交，会出现脏读、不可重复度、幻读</li><li>READ_COMMITTED：读已提交，会出现不可重复度、幻读</li><li>REPEATABLE_READ：可重复读，特殊情况下会出现幻读</li><li>SERIALIZABLE：可串行化</li></ul></li><li>timeout：超时时间，以秒为单位（默认为-1，表示不使用），事务需要在一定时间内提交，否则会回滚</li><li>readOnly：是否只读，开启后只能查询，不能增删改</li><li>rollbackFor：回滚，表示出现哪些异常后进行回滚</li><li>noRollbackFor：不回滚，表示出现哪些异常后不进行回滚</li></ul><h3 id="Spring5新特性"><a class="header-anchor" href="#Spring5新特性"></a>Spring5新特性</h3><ul><li><p>自带了通用的日志封装</p></li><li><p>核心容器支持@Nullable注解</p><ul><li>可以使用在方法、属性、参数上面，表示方法返回、属性值、参数值可以为空</li></ul></li><li><p>核心容器支持函数式风格</p></li><li><p>支持整合JUnit5、JUnit4</p><ul><li>JUnit4单元测试加上下面的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><br><span class="hljs-meta">@Test</span> <span class="hljs-comment">// org.junit.Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>JUnit5单元测试加上下面的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ExtendWith(SpringExtension.class)</span><br><span class="hljs-comment">//@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-meta">@SpringJUnitConfig(SpringConfig.class)</span><span class="hljs-comment">// 可以用这一个注解代替上面两个注解</span><br><br><span class="hljs-meta">@Test</span> <span class="hljs-comment">// org.junit.jupiter.api.Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="SpringWebFlux"><a class="header-anchor" href="#SpringWebFlux"></a>SpringWebFlux</h3><h4 id="基本概念-v2"><a class="header-anchor" href="#基本概念-v2"></a>基本概念</h4><p>Spring5添加的新模块，用于web开发，功能与SpingMVC类似，WebFlux是使用响应式编程的一种框架；</p><p>SpringMVC是基于Servlet容器的框架，而WebFlux是一种异步非阻塞的框架（Servlet3.1之后才支持异步非阻塞），核心是基于Reactor的相关API实现的</p><h5 id="异步非阻塞"><a class="header-anchor" href="#异步非阻塞"></a>异步非阻塞</h5><p>异步和同步是针对调用者，调用者发送请求后，不等待回应就去进行其他操作为异步，反之为同步</p><p>非阻塞和阻塞是针对被调用者，被调用者收到请求后，马上做出反馈再去执行操作为非阻塞，反之为阻塞</p><h5 id="特点"><a class="header-anchor" href="#特点"></a>特点</h5><ul><li>非阻塞式：在有限的资源下，提高系统吞吐量和伸缩性，基于Reactor实现响应式编程</li><li>函数式编程：WebFlux使用函数式编程实现路由请求</li></ul><h5 id="与SpingMVC比较"><a class="header-anchor" href="#与SpingMVC比较"></a>与SpingMVC比较</h5><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-framework-choice">Spring MVC or WebFlux?</a><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1a21c76adfa5f0b28c3e7575112cd363.png" alt=""></p><ul><li>都可以使用注解</li><li>都可以运行在tomcat</li><li>SpingMVC采用命令式编程</li><li>WebFlux采用异步响应式编程</li></ul><h4 id="响应式编程"><a class="header-anchor" href="#响应式编程"></a>响应式编程</h4><p>响应式编程是一种面向数据流和变化传播的编程范式，这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p><p>如，excel中公式“=B1+C1”，包含该公式的单元格值会随着其他单元格值的变化而变化。</p><h5 id="观察者模式类"><a class="header-anchor" href="#观察者模式类"></a>观察者模式类</h5><p>Java8及其之前版本提供Observer接口和Observable类；</p><p>实现Observer接口的是观察者，监听被观察者的变化；</p><p>继承Observable类的类是可观察的，即被观察者；</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ObserverDemo</span> <span class="hljs-variable">observer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObserverDemo</span>();<br>        <span class="hljs-comment">// 添加观察者</span><br>        observer.addObserver((o, arg) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;观察者1号观察到变化...&quot;</span>);<br>        &#125;);<br>        observer.addObserver((o, arg) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;观察者2号观察到变化...&quot;</span>);<br>        &#125;);<br>        <span class="hljs-comment">// 设置发生改变</span><br>        observer.setChanged();<br>        <span class="hljs-comment">// 通知观察者</span><br>        observer.notifyObservers();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java9使用Flow类替代观察者模式</p><h5 id="响应式-Reactor-编程实现"><a class="header-anchor" href="#响应式-Reactor-编程实现"></a>响应式(Reactor)编程实现</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/997616f00cb919a565a0ad7594b68695.png" alt=""></p><p>两个核心类，Mono和Flux，这两个类实现Publisher接口，提供丰富操作符；</p><p>Flux对象实现发布者，可以返回N个元素，Mono对象实现发布者，返回0或1个元素；</p><h6 id="Mono和Flux的特点"><a class="header-anchor" href="#Mono和Flux的特点"></a>Mono和Flux的特点</h6><ul><li><p>都可以发出三种数据信号：元素值、错误信号、完成信号</p></li><li><p>错误信号和完成信号都是终止信号，告诉订阅者数据流结束了，错误信号还会吧错误信息传递给订阅者</p></li><li><p>若没有发送任何元素值，而是直接发送终止信号，表示是空数据流</p></li><li><p>若没有终止信号，表示是无线数据流</p></li></ul><h6 id="使用示例"><a class="header-anchor" href="#使用示例"></a>使用示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 调用just方法直接声明，调用subscribe方法进行订阅，触发数据流</span><br>Flux.just(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>).subscribe(System.out::println);<br>Mono.just(<span class="hljs-number">1</span>).subscribe(System.out::println);<br><span class="hljs-comment">// 其他方法</span><br>Integer[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>Flux.fromArray(arr);<br>Flux.fromIterable(Arrays.asList(arr));<br>Flux.fromStream(Arrays.stream(arr));<br></code></pre></td></tr></table></figure><h6 id="常用操作符"><a class="header-anchor" href="#常用操作符"></a>常用操作符</h6><ul><li>map：将元素映射为新元素</li><li>flatMap：将元素映射为流</li></ul><h4 id="执行流程和核心API"><a class="header-anchor" href="#执行流程和核心API"></a>执行流程和核心API</h4><p>SpringWebFlux基于Reactor，默认使用容器是Netty，Netty是高性能的NIO（异步非阻塞）框架</p><h5 id="执行过程相关类"><a class="header-anchor" href="#执行过程相关类"></a>执行过程相关类</h5><p>核心控制器DispatcherHandler，实现接口WebHandler</p><ul><li><p>DispatcherHandler：负责请求的处理</p></li><li><p>HandlerMapping：负责查询处理请求的方法</p></li><li><p>HandlerAdapter：负责实现请求处理</p></li><li><p>HandlerResultHandler：负责对响应结果的处理</p></li></ul><h5 id="实现函数式编程相关类"><a class="header-anchor" href="#实现函数式编程相关类"></a>实现函数式编程相关类</h5><ul><li>RouterFunction接口：路由处理</li><li>HandlerFunction接口：处理函数</li></ul><h4 id="基于注解编程模型"><a class="header-anchor" href="#基于注解编程模型"></a>基于注解编程模型</h4><p>与SpringMVC差不多，也使用@Controller、@Service、@Repository</p><h4 id="基于函数式编程模型"><a class="header-anchor" href="#基于函数式编程模型"></a>基于函数式编程模型</h4><p>与基于注解编程模型的区别主要在控制层（对外提供接口）的实现上不一样</p><p>围绕两个核心接口：RouterFunction（实现路由功能，将请求转发给对应的handler）和HandlerFunction（处理请求生成响应的函数）;</p><p>请求和响应不再是ServletRequest和ServletResponse，而是ServerRequest和ServerResponse</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识回顾及查漏补缺</title>
      <link href="/posts/3001875945/"/>
      <url>/posts/3001875945/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h3><p>JavaWeb是指所有通过Java语言编写的，可以通过浏览器访问的程序的总称；</p><p>JavaWeb是基于请求和响应来开发的；</p><h4 id="什么是请求"><a class="header-anchor" href="#什么是请求"></a>什么是请求</h4><p>请求是指客户端给服务器发送数据</p><h4 id="什么是响应"><a class="header-anchor" href="#什么是响应"></a>什么是响应</h4><p>响应是指服务器给客户端回传数据</p><h4 id="请求和响应的关系"><a class="header-anchor" href="#请求和响应的关系"></a>请求和响应的关系</h4><p>请求和响应是成对出现的，有请求就有响应</p><h3 id="Tomcat"><a class="header-anchor" href="#Tomcat"></a>Tomcat</h3><h4 id="安装目录详解"><a class="header-anchor" href="#安装目录详解"></a>安装目录详解</h4><ul><li>bin：用来存放Tomcat服务器的可执行程序</li><li>conf：用来存放Tomcat服务器的配置文件</li><li>lib：用来存放Tomcat服务器的jar包</li><li>logs：用来存放Tomcat服务器运行时输出的日志信息</li><li>temp：用来存放Tomcat运行时产生的临时数据</li><li>webapps：用来存放部署的web工程</li><li>work：是Tomcat工作时的目录，用来存放Tomcat运行时jsp翻译为servlet的源码，和session钝化的目录</li></ul><h3 id="Servlet"><a class="header-anchor" href="#Servlet"></a>Servlet</h3><h4 id="基本概念-v2"><a class="header-anchor" href="#基本概念-v2"></a>基本概念</h4><ul><li>Servlet是JavaEE规范之一，是一个接口</li><li>Servlet是Javaweb三大组件之一，三大组件分别是：Servlet程序，Filter过滤器，Listener监听器</li><li>Servlet是运行在服务器上的一个Java程序，它可以接受客户端发送过来的请求，并响应数据给客户端</li></ul><h4 id="访问地址配置"><a class="header-anchor" href="#访问地址配置"></a>访问地址配置</h4><ul><li><p>xml方式：在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- servlet标签给Tomcat配置servlet程序 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给servlet程序起唯一标志名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>CustomServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- servlet程序类的全路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhuweitung.javaweb.custom.CustomServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 给servlet程序配置访问地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 关联上面的唯一标志名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>CustomServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置访问地址 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/custom<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注解方式：在Servlet实现类上添加<code>@WebServlet</code>注解，value属性为访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;CustomServlet&quot;, value = &quot;/custom&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="生命周期"><a class="header-anchor" href="#生命周期"></a>生命周期</h4><ul><li>执行Servlet构造器方法：若没有配置自动加载，在第一次请求servlet时调用</li><li>执行init初始化方法：若没有配置自动加载，在第一次请求servlet时调用</li><li>执行service方法</li><li>执行destroy销毁方法</li></ul><h4 id="继承体系"><a class="header-anchor" href="#继承体系"></a>继承体系</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2753266bb2bede5772f734b232e53b03.png" alt=""></p><ul><li><p>Servlet：接口，只负责定义Servlet程序的规范</p></li><li><p>ServletConfig：Servlet程序的配置信息类</p><ul><li>获取Servlet程序唯一标识名</li><li>获取初始化参数 getInitParameter</li><li>获取ServletContext对象</li></ul></li><li><p>GenericServlet：抽象类，做了一些空实现，并持有一个ServletConfig类的引用</p></li><li><p>ServletContext：接口，表示Servlet的上下文，一个web工程只有一个ServletContext对象实例（是一个域对象），在工程启动时创建，工程停止时销毁</p><ul><li><p>获取web.xml中配置的上下文参数 context-param</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>jdbcUrl<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> ctx.getInitParameter(<span class="hljs-string">&quot;jdbcUrl&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取当前工程路径（发布名）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> ctx.getContextPath();<br></code></pre></td></tr></table></figure></li><li><p>获取工程部署后再服务器上的绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> ctx.getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>像Map类一样存取数据，setAttribute、getAttribute、removeAttribute</p></li></ul></li><li><p>HttpServlet：抽象类，实现了service方法，并实现了请求的分发处理</p></li><li><p>继承HttpServlet的类根据需要实现doGet和doPost方法</p></li></ul><h3 id="HTTP协议"><a class="header-anchor" href="#HTTP协议"></a>HTTP协议</h3><h4 id="请求的HTTP协议格式"><a class="header-anchor" href="#请求的HTTP协议格式"></a>请求的HTTP协议格式</h4><p>GET请求报文示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /custom HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">8123</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">110.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">110</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1587</span>.<span class="hljs-number">56</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Referer</span>: http://localhost:<span class="hljs-number">8123</span>/custom<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,ja;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">Cookie</span>: xxx<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><br><br></code></pre></td></tr></table></figure><p>POST请求报文示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/x/click-interface/web/heartbeat</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.bilibili.com<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/plain, */*<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.56<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>https://www.bilibili.com<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://www.bilibili.com/video/xxx<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,ja;q=0.6<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>336<br><br><span class="language-apache"><span class="hljs-attribute">start_ts</span>=<span class="hljs-number">1677388143</span>&amp;mid=<span class="hljs-number">1861509</span></span><br></code></pre></td></tr></table></figure><h5 id="报文格式"><a class="header-anchor" href="#报文格式"></a>报文格式</h5><ul><li><p>请求行</p><ul><li>请求方式：POST/GET</li><li>请求的资源路径[?请求参数]，如 /custom?id=1</li><li>请求的协议的版本号，如 HTTP/1.1</li></ul></li><li><p>请求头：键值对形式，常见键如下</p><ul><li>Accept：告诉服务器，客户端可以接收的数据类型</li><li>Accept-Encoding：告诉服务器，客户端可以接收的数据编码格式</li><li>Accept-Language：告诉服务器，客户端可以接收的语言类型</li><li>User-Agent：浏览器信息</li><li>Host：请求的服务器ip端口或域名</li><li>Connection：告诉服务器请求连接如何处理<ul><li>keep-alive：回传数据不要马上关闭，保持一小段时间的连接</li><li>closed：马上关闭</li></ul></li><li>Cache-Control：表示如何控制缓存，no-cache表示不缓存</li><li>Cookie</li><li>Referer：请求发起时浏览器地址栏中的地址（请求来源）</li><li>Content-Type：表示发送的数据的类型，格式为 type/subtype;parameter;<ul><li>application/x-www-form-urlencoded：提交的数据格式为 name=value&amp;name=value，然后对其进行url编码</li><li>multipart/form-data：表示以多段的形式提交数据给服务器（以流的形式提交，用于上传）</li><li>application/json：提交的数据以json形式传输，会将数据序列化为json字符串放进请求体中</li></ul></li><li>Content-Length：表示请求体的长度</li></ul></li><li><p>空行，这个空行属于请求头</p></li><li><p>请求体：发送给服务器的数据，若没有数据也是<strong>空行</strong></p></li></ul><h4 id="响应的HTTP协议格式"><a class="header-anchor" href="#响应的HTTP协议格式"></a>响应的HTTP协议格式</h4><p>报文示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Tue, 5 Jun 2021 05:23:05 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json; charset=utf-8<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>https://www.bilibili.com<br><span class="hljs-attribute">Access-Control-Allow-Credentials</span><span class="hljs-punctuation">: </span>true<br><span class="hljs-attribute">Access-Control-Allow-Headers</span><span class="hljs-punctuation">: </span>Origin,No-Cache,X-Requested-With,If-Modified-Since,Pragma,Last-Modified,Cache-Control,Expires,Content-Type,Access-Control-Allow-Credentials,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Cache-Webcdn,x-bilibili-key-real-ip,x-backend-bili-real-ip,x-risk-header<br><span class="hljs-attribute">Cross-Origin-Resource-Policy</span><span class="hljs-punctuation">: </span>cross-origin<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>32<br><br><span class="language-css">&#123;&quot;<span class="hljs-selector-tag">code</span>&quot;:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;ttl&quot;</span>:<span class="hljs-number">1</span>&#125;</span><br></code></pre></td></tr></table></figure><h5 id="报文格式-v2"><a class="header-anchor" href="#报文格式-v2"></a>报文格式</h5><ul><li>响应行<ul><li>协议和版本号，如 HTTP/1.1</li><li>响应状态码，如 200</li><li>响应状态描述符。如 OK</li></ul></li><li>响应头：键值对形式，常见键如下<ul><li>Date：响应时间</li><li>Content-Type：表示响应数据的类型，格式为 type/subtype;parameter;</li><li>Content-Length：响应体的长度</li></ul></li><li>空行，这个空行属于响应头</li><li>响应体</li></ul><h5 id="常见响应码"><a class="header-anchor" href="#常见响应码"></a>常见响应码</h5><ul><li>200：请求成功</li><li>302：重定向</li><li>404：服务器收到请求，但是请求的资源不存在</li><li>500：服务器收到请求，但是服务器内部错误（代码错误）</li></ul><h3 id="HttpServlet"><a class="header-anchor" href="#HttpServlet"></a>HttpServlet</h3><h4 id="HttpServletRequest"><a class="header-anchor" href="#HttpServletRequest"></a>HttpServletRequest</h4><p>继承ServletRequest接口</p><h5 id="作用"><a class="header-anchor" href="#作用"></a>作用</h5><p>当有请求进入tomcat服务器时，tomcat服务器就会把请求过来的http协议信息解析好封装到request对象中；</p><p>然后传递到Servlet的service方法中；</p><p>通过HttpServletRequest对象可以获取到所有请求的信息；</p><h5 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h5><ul><li>getRequestURI：获取请求的资源路径</li><li>getRequestURL：获取请求的统一资源定位符（绝对路径）</li><li>getRemoteHost：客户端的ip地址</li><li>getHeader：获取请求头</li><li>getParameter：获取请求参数</li><li>getParameterValues：获取请求参数，多值</li><li>getMethod：获取请求方式，POST/GET</li><li>setAttribute：设置属性</li><li>getAttribute：获取属性</li><li>removeAttribute：移除属性</li></ul><h5 id="乱码问题解决"><a class="header-anchor" href="#乱码问题解决"></a>乱码问题解决</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="请求转发"><a class="header-anchor" href="#请求转发"></a>请求转发</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getRequestDispatcher(<span class="hljs-string">&quot;/other&quot;</span>).forward(req, resp);<br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>地址栏不发生变化</li><li>只有一次请求</li><li>转发地址中不需要加上下文地址</li><li>请求域中的数据不会丢失</li><li>是服务端行为</li><li>不能访问工程以外的资源</li></ul><h4 id="HttpServletResponse"><a class="header-anchor" href="#HttpServletResponse"></a>HttpServletResponse</h4><p>继承ServletResponse接口</p><h5 id="作用-v2"><a class="header-anchor" href="#作用-v2"></a>作用</h5><p>通过HttpServletResponse对象来设置需要响应给客户端的数据</p><h5 id="输出流"><a class="header-anchor" href="#输出流"></a>输出流</h5><ul><li>字节流：响应二进制数据，常用于下载</li><li>字符流：响应字符数据</li></ul><p>一个响应同时只能使用一个流</p><h5 id="乱码问题解决-v2"><a class="header-anchor" href="#乱码问题解决-v2"></a>乱码问题解决</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置服务器字符集</span><br>response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-comment">// 通过响应头设置浏览器使用的字符集</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8;&quot;</span>);<br><span class="hljs-comment">// 同时设置服务器和浏览器使用的字符集，等价于上面两行代码，此方法必须在获取输出流之前调用才有效</span><br>response.setContentType(<span class="hljs-string">&quot;text/html; charset=utf-8;&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="请求重定向"><a class="header-anchor" href="#请求重定向"></a>请求重定向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.sendRedirect(<span class="hljs-string">&quot;/other&quot;</span>);<br></code></pre></td></tr></table></figure><p>特点：</p><ul><li>地址栏中地址变为重定向后的地址</li><li>请求两次（客户端第一次请求后响应<code>302</code>状态，再请求重定向地址）</li><li>重定向地址中需要加上下文地址以保证路径的正确</li><li>请求域中的数据丢失</li><li>是客户端行为</li></ul><h3 id="JSP"><a class="header-anchor" href="#JSP"></a>JSP</h3><h4 id="基本概念-v3"><a class="header-anchor" href="#基本概念-v3"></a>基本概念</h4><p>JSP全称为 Java server pages；</p><p>JSP的主要作用是代替servlet程序回传html页面的数据；</p><h4 id="本质"><a class="header-anchor" href="#本质"></a>本质</h4><p>JSP页面本质上是一个servlet程序；</p><p>当第一次访问JSP页面的时候，tomcat服务器会把JSP页面翻译为一个Java源文件（.java文件），并将它编译为字节码文件（.class文件）；具体的文件可以在tomcat的work目录下查看到；</p><p>index.jsp翻译的Java源文件示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.HttpJspBase<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.JspSourceDependent,<br>                 org.apache.jasper.runtime.JspSourceImports &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中HttpJspBase类继承自HttpServlet类</p><h4 id="语法"><a class="header-anchor" href="#语法"></a>语法</h4><h5 id="page指令"><a class="header-anchor" href="#page指令"></a>page指令</h5><p>page指令可以修改JSP页面中一些重要的属性或者行为</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><ul><li>contentType：响应数据类型，是 response.setContentType() 方法的参数值</li><li>pageEncoding：JSP页面本身字符集</li><li>language：JSP翻译后的文件格式，暂时只支持Java</li><li>import：导入包、类</li><li>autoFlush：设置输出流缓冲区满了之后，是否自动刷新缓冲区，默认为true</li><li>buffer：设置输出流缓冲区大小，默认8kb</li><li>errorPage：设置当前JSP页面出错时，自动跳转去的错误页面路径</li><li>isErrorPage：设置当前JSP页面是否错误信息页面，默认是false，若为true可以获取异常信息</li><li>session：设置当前JSP页面是否会创建HttpSession对象，默认是ture</li><li>extends：设置JSP页面翻译出来的Java类默认继承的类</li></ul><h5 id="常用脚本"><a class="header-anchor" href="#常用脚本"></a>常用脚本</h5><ul><li><p>声明脚本：&lt;%!%&gt;，其中写的内容将来会直接翻译在Servlet类中，可以声明类、方法、属性、全局变量</p></li><li><p>代码脚本：&lt;%%&gt;</p><ul><li><p>代码脚本会被翻译在_jspService方法中</p></li><li><p>可以使用声明中的局部变量或者方法以及_jspService方法中能访问的对象</p></li><li><p>可以和表达式脚本组合使用</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;ul&gt;<br>  &lt;%<span class="hljs-keyword">for</span> (User user : users) &#123;%&gt;<br>  &lt;li&gt;<br>    &lt;%=user.name%&gt;,&lt;%=user.age%&gt;<br>  &lt;/li&gt;<br>  &lt;%&#125;%&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>表达式脚本：&lt;%=%&gt;，将已经声明的变量或者表达式输出到网页上</p><ul><li>所有表达式脚本都会被翻译到_jspService方法中</li><li>表达式脚本都会被翻译成为out.write()输出到页面上</li><li>表达式脚本中可以使用_jspService方法中能访问的对象</li><li>表达式脚本中的表达式不能以分号结束</li></ul></li></ul><h4 id="内置对象"><a class="header-anchor" href="#内置对象"></a>内置对象</h4><ul><li>request：HttpServletRequest，请求对象</li><li>response：HttpServletResponse，响应对象</li><li>pageContext：PageContext，上下文对象</li><li>session：HttpSession，会话对象</li><li>application：ServletContext对象</li><li>config：ServletConfig对象</li><li>out：JspWriter，输出流对象</li><li>page：Object，指向当前jsp的对象</li><li>exception：Throwable，异常对象，isErrorPage开启后才有</li></ul><h5 id="域对象"><a class="header-anchor" href="#域对象"></a>域对象</h5><p>内置对象中request、pageContext、session、application为域对象</p><p>四大域对象都可以像Map一样存取数据，功能一样，但对数据的存取范围不一样</p><ul><li><p>pageContext：jsp页面范围内</p></li><li><p>request：一次请求内</p></li><li><p>session：一个会话内</p></li><li><p>application：整个工程范围内（只要web工程不停止，数据都在）</p></li></ul><h5 id="response与out对象"><a class="header-anchor" href="#response与out对象"></a>response与out对象</h5><p>这两个对象都可以向页面输出内容，并且各自持有一个缓冲区</p><p>当jsp页面代码执行完成后会依次执行</p><ul><li><p>执行out.flush()操作，会把out缓冲区中的数据追加写入到response缓冲区</p></li><li><p>会执行response的刷新操作，把全部数据写给客户端</p></li></ul><p>所以当out没有手动调用out.flush()方法时，它输出的内容都在response输出内容的后面</p><h4 id="常用标签"><a class="header-anchor" href="#常用标签"></a>常用标签</h4><h5 id="静态包含"><a class="header-anchor" href="#静态包含"></a>静态包含</h5><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;header.jsp&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>特点</p><ul><li>不会翻译被包含的jsp页面</li><li>静态包含其实是把被包含的jsp页面的代码拷贝到包含的位置执行输出</li></ul><h5 id="动态包含"><a class="header-anchor" href="#动态包含"></a>动态包含</h5><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:include page=<span class="hljs-string">&quot;header2.jsp&quot;</span>&gt;&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure><p>特点：</p><ul><li><p>会将被包含的jsp页面也翻译为Java代码</p></li><li><p>底层使用如下代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="hljs-string">&quot;header2.jsp&quot;</span>, out, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure></li></ul><h5 id="转发标签"><a class="header-anchor" href="#转发标签"></a>转发标签</h5><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;page2.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><h3 id="Listener监听器"><a class="header-anchor" href="#Listener监听器"></a>Listener监听器</h3><p>作用是监听变化，然后通过回调函数反馈给程序去做一些处理</p><h4 id="ServletContextListener"><a class="header-anchor" href="#ServletContextListener"></a>ServletContextListener</h4><p>ServletContextListener对象可以监听ServletContext对象的创建和销毁</p><h5 id="接口包含方法"><a class="header-anchor" href="#接口包含方法"></a>接口包含方法</h5><ul><li>contextInitialized：在ServletContext对象创建之后马上调用，做初始化</li><li>contextDestroyed：在ServletContext对象对象销毁之后调用</li></ul><h5 id="使用方式"><a class="header-anchor" href="#使用方式"></a>使用方式</h5><ul><li><p>编写一个类去实现ServletContextListener接口，并实现需要的方法</p></li><li><p>在实现类上加上<code>@WebListener</code>注解或者在web.xml中加上以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.zhuweitung.javaweb.listener.WebServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="EL表达式"><a class="header-anchor" href="#EL表达式"></a>EL表达式</h3><p>EL表达式主要是代替jsp页面中表达式脚本在jsp页面中进行数据的输出；</p><p>主要是输出域对象中的数据；</p><p>若四个域中都存入了相同key的数据，则按pageContext&gt;request&gt;session&gt;application的顺序取，找到就输出；</p><h4 id="隐含对象"><a class="header-anchor" href="#隐含对象"></a>隐含对象</h4><table><thead><tr><th>变量</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContextImpl</td><td>可以获取jsp中的九大内置对象</td></tr><tr><td>pageScope</td><td>Map&lt;String, Object&gt;</td><td>可以获取pageContext域中的数据</td></tr><tr><td>requestScope</td><td>Map&lt;String, Object&gt;</td><td>可以获取request域中的数据</td></tr><tr><td>sessionScope</td><td>Map&lt;String, Object&gt;</td><td>可以获取session域中的数据</td></tr><tr><td>applicationScope</td><td>Map&lt;String, Object&gt;</td><td>可以获取application域中的数据</td></tr><tr><td>param</td><td>Map&lt;String, String&gt;</td><td>可以获取请求参数的值</td></tr><tr><td>paramValues</td><td>Map&lt;String, String[]&gt;</td><td>可以获取请求参数的值，值为数组</td></tr><tr><td>header</td><td>Map&lt;String, String&gt;</td><td>可以获取请求头的信息</td></tr><tr><td>headerValues</td><td>Map&lt;String, String[]&gt;</td><td>可以获取请求头的信息，值为数组</td></tr><tr><td>cookie</td><td>Map&lt;String, Cookie&gt;</td><td>可以获取当前请求的Cookie信息</td></tr><tr><td>initParam</td><td>Map&lt;String, String&gt;</td><td>可以获取在web.xml中配置的上下文参数</td></tr></tbody></table><h3 id="JSTL标签库"><a class="header-anchor" href="#JSTL标签库"></a>JSTL标签库</h3><p>标签库为了替代代码脚本，可以使整个页面变得更加简洁</p><table><thead><tr><th>功能范围</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>核心标签库</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr><tr><td>数据库（不使用）</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML（不使用）</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr></tbody></table><h4 id="使用方式-v2"><a class="header-anchor" href="#使用方式-v2"></a>使用方式</h4><ul><li><p>导入依赖（引入jar包）</p></li><li><p>页面引入</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><h4 id="核心标签库常用标签"><a class="header-anchor" href="#核心标签库常用标签"></a>核心标签库常用标签</h4><table><thead><tr><th>标签</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>c:set</td><td>往域中保存数据</td><td>&lt;c:set scope=“page” var=“key” value=“value”/&gt;</td></tr><tr><td>c:if</td><td>做if判断</td><td>&lt;c:if test=“${ true or false }”&gt;&lt;/c:if&gt;</td></tr><tr><td>c:choose c:when c:otherwise</td><td>做多路判断</td><td>&lt;c:choose&gt;&lt;c:when test=${confition}&gt;&lt;/c:when&gt;&lt;c:otherwise&gt;&lt;/c:otherwis&gt;&lt;/c:choose&gt;</td></tr><tr><td>c:forEach</td><td>遍历输出</td><td>&lt;c:forEach items=“${list}” var=“item” varStatus=“status”&gt;${<a href="http://item.name">item.name</a>}&lt;/c:forEach&gt;</td></tr></tbody></table><h3 id="文件上传"><a class="header-anchor" href="#文件上传"></a>文件上传</h3><h4 id="上传报文解析"><a class="header-anchor" href="#上传报文解析"></a>上传报文解析</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8686b17267f6a50ec0dc863358d53207.png" alt=""></p><h4 id="Servlet处理"><a class="header-anchor" href="#Servlet处理"></a>Servlet处理</h4><p>思路就是从request中获取字节输入流，然后将输入流数据写入到输出流，保存到服务器；</p><p>常规开发可以使用现有工具类；</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (ServletFileUpload.isMultipartContent(request)) &#123;<br>    <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">servletFileUpload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>());<br>    <span class="hljs-keyword">try</span> &#123;<br>        List&lt;FileItem&gt; fileItems = servletFileUpload.parseRequest(request);<br>        <span class="hljs-keyword">for</span> (FileItem item : fileItems) &#123;<br>            <span class="hljs-keyword">if</span> (item.isFormField()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;表单项&quot;</span> + item.getFieldName() + <span class="hljs-string">&quot;值为&quot;</span> + item.getString(<span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                item.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\tmp\\upload\\&quot;</span> + item.getName()));<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileUploadException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件下载"><a class="header-anchor" href="#文件下载"></a>文件下载</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> getServletContext();<br><span class="hljs-comment">// 获取下载文件</span><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;图.jpg&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/file/&quot;</span> + fileName;<br><span class="hljs-comment">// 读取要下载的文件内容</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ctx.getResourceAsStream(filePath);<br><span class="hljs-comment">// 通过响应头设置返回数据类型</span><br>response.setContentType(ctx.getMimeType(filePath));<br><span class="hljs-comment">// 通过响应头设置数据用于下载</span><br><span class="hljs-type">String</span> <span class="hljs-variable">headerFilename</span> <span class="hljs-operator">=</span> fileName;<br><span class="hljs-type">String</span> <span class="hljs-variable">ua</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br><span class="hljs-keyword">if</span> (ua.toLowerCase().contains(<span class="hljs-string">&quot;firefox&quot;</span>)) &#123;<br>    <span class="hljs-comment">// 火狐浏览器，文件名base64编码防止乱码</span><br>    headerFilename = <span class="hljs-string">&quot;=?utf-8?B?&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">BASE64Encoder</span>().encode(fileName.getBytes(StandardCharsets.UTF_8)) + <span class="hljs-string">&quot;?=&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// IE、谷歌浏览器，文件名url编码防止乱码</span><br>    headerFilename = URLEncoder.encode(fileName, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>&#125;<br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + headerFilename);<br><span class="hljs-comment">// 获取响应的输出流</span><br><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><span class="hljs-comment">// 复制输入流到输出流</span><br>IOUtils.copy(is, os);<br></code></pre></td></tr></table></figure><h3 id="Cookie"><a class="header-anchor" href="#Cookie"></a>Cookie</h3><p>Cookie是服务器通知客户端保存键值对数据的一种技术；</p><p>客户端有了Cookie后，每次请求都发送给服务器；</p><p>每个Cookie的大小不能超过4kb；</p><h4 id="Cookie的创建"><a class="header-anchor" href="#Cookie的创建"></a>Cookie的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.addCookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;cookieKey&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>));<br></code></pre></td></tr></table></figure><p>浏览器收到的响应头中包含<code>Set-Cookie</code>属性</p><h4 id="服务器获取客户端的Cookie"><a class="header-anchor" href="#服务器获取客户端的Cookie"></a>服务器获取客户端的Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure><h4 id="修改Cookie"><a class="header-anchor" href="#修改Cookie"></a>修改Cookie</h4><h5 id="方式一"><a class="header-anchor" href="#方式一"></a>方式一</h5><p>服务器重新创建一个同名Cookie</p><h5 id="方式二"><a class="header-anchor" href="#方式二"></a>方式二</h5><p>从request中获取需要修改的Cookie，调用 setValue() 方法设置新值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.setValue(<span class="hljs-string">&quot;newValue&quot;</span>);<br>response.addCookie(cookie);<br></code></pre></td></tr></table></figure><h4 id="生命周期控制"><a class="header-anchor" href="#生命周期控制"></a>生命周期控制</h4><p>通过 setMaxAge() 方法来设置Cookie最大生存时间，以秒为单位</p><ul><li>正数：表示cookie在经过该秒数后过期</li><li>负数：表示cookie不会被持久存储，在浏览器退出时删除，也就是session级别的cookie</li><li>0：删除cookie</li></ul><h4 id="Path属性"><a class="header-anchor" href="#Path属性"></a>Path属性</h4><p>path属性可以有效的过滤哪些cookie可以发送给服务器；</p><p>path属性是通过请求的地址来进行有效的过滤；</p><h3 id="Session"><a class="header-anchor" href="#Session"></a>Session</h3><p>Session是一个接口，HttpSession是它的实现类；</p><p>用来维护一个客户端和服务器之间关联的一种技术；</p><p>每个客户端都有自己的一个session；</p><p>每个session都有一个唯一的标识；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> session.getId();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isNew</span> <span class="hljs-operator">=</span> session.isNew();<br>session.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br></code></pre></td></tr></table></figure><p>jsp页面可以从session域中获取已设置的值</p><h4 id="生命周期控制-v2"><a class="header-anchor" href="#生命周期控制-v2"></a>生命周期控制</h4><p>通过 setMaxInactiveInterval() 方法来设置Session超时时间，以秒为单位，默认为30分钟；</p><ul><li>正数表示设定session超时时长</li><li>负数表示永不超时</li></ul><p>通过 invalidate() 方法立即销毁session；</p><p>可以通过修改tomcat配置文件中的web.xml或者工程的web.xml文件来更改默认超时时长；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>session的超时指的是，客户端两次请求的最大间隔时长；</p><h4 id="浏览器与Session关联的原理"><a class="header-anchor" href="#浏览器与Session关联的原理"></a>浏览器与Session关联的原理</h4><p>浏览器请求服务器后，服务器创建session（存储在内存中），并创建一个cookie对象，这个cookie对象的key值永远为<code>JSESSIONID</code>，value值为新创建的session的id；</p><p>服务器再把cookie信息通过响应发给客户端；</p><p>客户端有了cookie后，每次请求都会吧session的id以cookie的形式发给服务器；</p><p>服务器通过session的id在内存中查找对应的session对象；</p><h3 id="Filter过滤器"><a class="header-anchor" href="#Filter过滤器"></a>Filter过滤器</h3><p>作用是拦截请求，过滤响应</p><h4 id="拦截请求常见场景"><a class="header-anchor" href="#拦截请求常见场景"></a>拦截请求常见场景</h4><ul><li>权限检查</li><li>日志记录</li><li>事务管理</li></ul><h4 id="使用方式-v3"><a class="header-anchor" href="#使用方式-v3"></a>使用方式</h4><ul><li><p>编写一个类去实现Filter接口，并实现需要的方法</p></li><li><p>在实现类上加上<code>@WebFilter</code>注解或者在web.xml中加上以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.zhuweitung.javaweb.filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 拦截资源路径的匹配规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h5><p>若开发使用4.x以上版本的serlvet-api，而tomcat的serlvet-api的版本是3.x，需要重写Filter的init方法和destroy方法；</p><p>因为4.x后这两个方法有default关键字修饰，而3.x版本没有；</p><h4 id="生命周期-v2"><a class="header-anchor" href="#生命周期-v2"></a>生命周期</h4><ul><li>构造器</li><li>init初始化方法，在工程启动后执行</li><li>doFilter方法，每次拦截到请求就会执行</li><li>destroy方法，停止工程就会执行</li></ul><h4 id="FilterConfig"><a class="header-anchor" href="#FilterConfig"></a>FilterConfig</h4><p>用于获取filter过滤器的配置内容</p><ul><li>getFilterName()：获取过滤器名称</li><li>getServletContext()：获取上下文</li><li>getInitParameter(String name)：获取初始化参数</li><li>getInitParameterNames()：获取初始化参数，Enumeration&lt;String&gt;格式</li></ul><h4 id="FilterChain"><a class="header-anchor" href="#FilterChain"></a>FilterChain</h4><p>作用是执行下一个过滤器，直到没有过滤器为止，再返回请求资源；</p><p>所有filter和目标资源默认都执行在同一个线程中；</p><p>所有filter都使用同一个request对象；</p><h5 id="执行顺序"><a class="header-anchor" href="#执行顺序"></a>执行顺序</h5><ul><li>若使用web.xml方式配置过滤器，则按照xml中配置的顺序执行</li><li>若使用@WebFilter 注解方式配置，按过滤器名称自然排序</li></ul><h4 id="拦截路径匹配模式"><a class="header-anchor" href="#拦截路径匹配模式"></a>拦截路径匹配模式</h4><ul><li>精确匹配，如 /module/index.jsp</li><li>目录匹配，如 /module/*</li><li>后缀名匹配，如 *.htm</li></ul><p>过滤器不检测资源是否存在，且匹配模式不能混合使用</p><h4 id="其他用法"><a class="header-anchor" href="#其他用法"></a>其他用法</h4><ul><li>使用过滤器+ThreadLocal可以实现全局事务提交和回滚<ul><li>过滤器和请求的资源在同一个线程，将业务中的jdbc连接存储在ThreadLocal，用过滤器捕获全局异常</li><li>当过滤器没有捕获异常时，获取当前线程的jdbc连接并提交事务</li><li>出现异常时，获取当前线程的jdbc连接并回滚事务</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解http协议</title>
      <link href="/posts/2409515937/"/>
      <url>/posts/2409515937/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解http协议"><a class="header-anchor" href="#深入理解http协议"></a>深入理解http协议</h2><h3 id="概念"><a class="header-anchor" href="#概念"></a>概念</h3><p>http协议：超文本传输协议，基于socket与tcp协议。</p><ul><li>请求<ul><li>请求行</li><li>请求头</li><li>请求内容</li><li>请求体（只能在post请求中）</li></ul></li><li>响应<ul><li>响应行</li><li>响应内容</li><li>响应体</li></ul></li></ul><h3 id="防盗链"><a class="header-anchor" href="#防盗链"></a>防盗链</h3><p>原理：通过请求头中的referer值进行判断，若不等于本站域名说明就是其他网站在请求。</p><p>使用过滤器获取每次请求来源，并进行判断。</p><p><strong>静态资源防盗链过滤器</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态资源防盗链过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020/9/19 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(filterName = &quot;RefererFilter&quot;, urlPatterns = &#123;&quot;static/*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefererFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServerRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServerRequest) servletRequest;<br>        <span class="hljs-comment">//请求域名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">referer</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;referer&quot;</span>);<br>        <span class="hljs-comment">//服务器域名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serverName</span> <span class="hljs-operator">=</span> servletRequest.getServerName();<br><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(referer) || !referer.contains(serverName)) &#123;<br>            <span class="hljs-comment">//显示错误图片</span><br>            servletRequest.getRequestDispatcher(<span class="hljs-string">&quot;static/error.png&quot;</span>).forward(servletRequest, servletResponse);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//放行</span><br>            filterChain.doFilter(servletRequest, servletResponse);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="重定向实现原理"><a class="header-anchor" href="#重定向实现原理"></a>重定向实现原理</h3><p>服务端收到请求后设置响应状态为302，将重定向地址放入响应头的<code>Location</code>中，客户端收到响应浏览器判断状态为302并自动跳转到Location值的地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/servlet1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//302为重定向状态码</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置重定向地址</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, getServletContext().getContextPath() + <span class="hljs-string">&quot;servlet2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/servlet2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;this is servlet2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="https与http的区别"><a class="header-anchor" href="#https与http的区别"></a>https与http的区别</h3><ul><li>https协议需要到ca申请证书，一般证书都需要收费</li><li>http中的数据是明文传输，而https则是具有安全性的ssl加密传输协议</li><li>http与https使用的是完全不同的连接方式，http一般使用80端口，https一般使用443端口</li><li>http的连接很简单，是无状态的，而hhtps协议是由ssl+http协议构建的，可进行加密传输、身份认证的网络协议，比http协议安全，但效率低</li></ul><h3 id="模拟http请求技术"><a class="header-anchor" href="#模拟http请求技术"></a>模拟http请求技术</h3><ul><li>后端：<ul><li>HttpClient</li><li>HttpUrl</li></ul></li><li>前端：<ul><li>ajax</li></ul></li><li>工具<ul><li>postman</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session与cookie</title>
      <link href="/posts/3265766969/"/>
      <url>/posts/3265766969/</url>
      
        <content type="html"><![CDATA[<h2 id="session与cookie"><a class="header-anchor" href="#session与cookie"></a>session与cookie</h2><h3 id="cookie"><a class="header-anchor" href="#cookie"></a>cookie</h3><p>会话数据保存再客户端，不能跨浏览器。</p><ul><li><p>服务端给客户端设置cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//自定义cookie</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-comment">//cookie发送给客户端</span><br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器请求的响应头中会带有设置cookie的信息</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/aef480db700613f37dae4689dcaa73b6.png" style="display:inline-block"/></li><li><p>服务端获取客户端的cookie（同一浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    Cookie[] cookies = req.getCookies();<br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;username&quot;</span>.equals(cookies[i].getName())) &#123;<br>                username = cookies[i].getValue();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        resp.getWriter().write(<span class="hljs-string">&quot;the value of username in cookie is &quot;</span> + username);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;the cookie is null&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器的请求头中会带有cookie信息</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/b3e05cbbb14cca9dbf83560766245ffb.png" style="display:inline-block"/></li><li><p>设置cookie有效时长</p><p>默认关闭浏览器后cookie失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置cookie时长 为负数时浏览器关闭就失效，正数以秒为单位</span><br>cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="cookie的局限"><a class="header-anchor" href="#cookie的局限"></a>cookie的局限</h4><ul><li>cookie只能存字符串类型，不能保存对象</li><li>只能存非中文</li><li>1个cookie的容量不超过4kb</li></ul><h3 id="session"><a class="header-anchor" href="#session"></a>session</h3><p>会话数据保存再服务器端，内存中，客户端与服务端之间通讯使用<code>sessionid</code>。</p><p>自定义session</p><p><strong>Cache</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span> &#123;<br>    <br>    <span class="hljs-meta">@MetaData(name = &quot;键&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-meta">@MetaData(name = &quot;值&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Object value;<br>    <span class="hljs-meta">@MetaData(name = &quot;有效期&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Long timeout;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CacheManager</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheManager</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Cache&gt; cacheMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value, Long timeout)</span> &#123;<br>        <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>        cache.setKey(key);<br>        cache.setValue(value);<br>        <span class="hljs-keyword">if</span> (timeout != <span class="hljs-literal">null</span>) &#123;<br>            cache.setTimeout(System.currentTimeMillis() + timeout);<br>        &#125;<br>        cacheMap.put(key, cache);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        put(key, value, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cacheMap.containsKey(key)) &#123;<br>            <span class="hljs-keyword">return</span> cacheMap.get(key).getValue();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cacheMap.containsKey(key)) &#123;<br>            cacheMap.remove(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//检查并移除超期缓存</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkValidityData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Cache&gt; entry : cacheMap.entrySet()) &#123;<br>            <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> entry.getValue();<br>            <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> cache.getTimeout();<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-keyword">if</span> (now &gt; timeout) &#123;<br>                remove(entry.getKey());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TokenUtil</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> UUID.randomUUID().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SessionUtil</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheManager</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">setAtttibute</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> TokenUtil.getToken();<br>        cacheManager.put(sessionId, value);<br>        <span class="hljs-keyword">return</span> sessionId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getAtttibute</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> cacheManager.get(key);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解servlet</title>
      <link href="/posts/3236163550/"/>
      <url>/posts/3236163550/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解servlet"><a class="header-anchor" href="#深入理解servlet"></a>深入理解servlet</h2><h3 id="web项目目录结构"><a class="header-anchor" href="#web项目目录结构"></a>web项目目录结构</h3><p>webapp</p><ul><li>static：静态资源</li><li>WEB-INF：Tomcat无法访问此目录<ul><li>classes：字节码文件（后端java代码）</li><li>lib：项目依赖类库</li><li>web.xml：核心web配置，后端代码的入口</li></ul></li></ul><h3 id="静态资源和动态资源的区别"><a class="header-anchor" href="#静态资源和动态资源的区别"></a>静态资源和动态资源的区别</h3><ul><li><p>静态资源每次访问源代码不会发生改变</p></li><li><p>动态资源每次访问代码都有可能会发生改变</p><ul><li><p>servlet其实就是动态资源开发技术（Java）</p><p>继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 接收get请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, &quot;</span> + DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet自定义名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet对应类路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhuweitung.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--servlet路径映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--对外暴露的地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或使用注解<code>@WebServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 接收get请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/14</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, &quot;</span> + DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="servlet的生命周期"><a class="header-anchor" href="#servlet的生命周期"></a>servlet的生命周期</h3><ul><li>init()：只会执行一次，执行初始化操作</li><li>service()：处理请求，执行doGet或doPost</li><li>destroy()：只执行一次，执行销毁操作</li></ul><p>servlet只会初始化一次，多个请求同时访问servlet时只会实例化一次，即**servlet是单例（懒汉式）**的。</p><p>证明：由于servlet是通过xml配置文件或注解来生成的，所以是通过反射并调用servlet实现类的无参构造实例化的，只要在无参构造函数中输出即可证明</p><h3 id="servlet自动加载"><a class="header-anchor" href="#servlet自动加载"></a>servlet自动加载</h3><p>由于servlet是懒汉式单例模式的，当有请求时servlet才会被实例化，若要实现自动加载可以使用一下方法：</p><ul><li><p>在xml中配置<code>load-on-startup</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet自定义名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet对应类路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhuweitung.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自动加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在注解<code>@WebServlet</code>中加上<code>loadOnStartup = 1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(value = &quot;/hello2&quot;, loadOnStartup = 1)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="servlet线程不安全"><a class="header-anchor" href="#servlet线程不安全"></a>servlet线程不安全</h3><p>证明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 共享变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloServlet2 doGet&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, 第&quot;</span> + count + <span class="hljs-string">&quot;次访问&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个浏览器进行访问，结果都显示第一次访问。</p><p>加锁解决线程安全问题。</p><p><em>注：使用servlet时不要使用共享全局变量。</em></p><h3 id="servlet上下文"><a class="header-anchor" href="#servlet上下文"></a>servlet上下文</h3><p>ServletContext也叫做“公共区域”，在同一个WEB应用程序中，所有的Servlet和JSP都可以共享同一个区域。</p><p>ServletContext在WEB服务器启动时创建，服务器关闭时销毁。</p><h3 id="转发与重定向"><a class="header-anchor" href="#转发与重定向"></a>转发与重定向</h3><h4 id="转发"><a class="header-anchor" href="#转发"></a>转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>);<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/test&quot;</span>).forward(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>转发的特点</strong>:</p><ul><li>地址栏不发生变化</li><li>只有一次请求</li><li>转发地址中不需要加上下文地址</li><li>请求域中的数据不会丢失</li><li>是服务端行为</li><li>效率高</li></ul><h4 id="重定向"><a class="header-anchor" href="#重定向"></a>重定向</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;redirect&quot;</span>);<br>    resp.sendRedirect(<span class="hljs-string">&quot;/test&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重定向的特点</strong>：</p><ul><li>地址栏中地址变为重定向后的地址</li><li>请求两次（客户端第一次请求后响应<code>302</code>状态，再请求重定向地址）</li><li>重定向地址中需要加上下文地址以保证路径的正确</li><li>请求域中的数据丢失</li><li>是客户端行为</li><li>效率低</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程之Socket</title>
      <link href="/posts/349534411/"/>
      <url>/posts/349534411/</url>
      
        <content type="html"><![CDATA[<h2 id="Java网络编程之Socket"><a class="header-anchor" href="#Java网络编程之Socket"></a>Java网络编程之Socket</h2><h3 id="什么是Socket"><a class="header-anchor" href="#什么是Socket"></a>什么是Socket</h3><p>通常也称作”套接字“，用于描述<code>IP地址</code>和<code>端口</code>，是一个通信链的句柄。应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p><h3 id="TCP与UDP的区别"><a class="header-anchor" href="#TCP与UDP的区别"></a>TCP与UDP的区别</h3><ul><li>TCP是一种面向连接的保证可靠传输的协议，可靠，效率稍低；</li><li>UDP是一种无连接的协议，不可靠，效率高；</li><li>建立起一个TCP连接需要经过“三次握手”；</li><li>TCP传输数据没有大小限制；</li><li>UDP的每个数据报中都给出了完整的地址信息；</li><li>UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内；</li></ul><h4 id="TCP连接的三次握手"><a class="header-anchor" href="#TCP连接的三次握手"></a>TCP连接的三次握手</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/72b077bdb756d3c357a1be5a1c2395d0.png" alt=""></p><h4 id="Java-Udp实现"><a class="header-anchor" href="#Java-Udp实现"></a>Java Udp实现</h4><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UdpServer</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;UDP服务端启动&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br>        <span class="hljs-comment">//等待客户端发送内容，若客户端不发送则一直等待，阻塞效果</span><br>        socket.receive(packet);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), packet.getLength());<br>        System.out.println(<span class="hljs-string">&quot;服务端收到数据：&quot;</span> + data);<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UdpClient</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(String targetIp, Integer targetPort)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;UDP客户端启动&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data.getBytes(), data.getBytes().length, InetAddress.getByName(targetIp), targetPort);<br>        System.out.println(<span class="hljs-string">&quot;UDP客户端发送消息&quot;</span>);<br>        socket.send(packet);<br>        socket.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">serverPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">15367</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">clientPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">15369</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">UdpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UdpServer</span>(serverPort);<br>            server.start();<br>        &#125;<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">UdpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UdpClient</span>(clientPort);<br>            client.start(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, serverPort);<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Java-Tcp实现"><a class="header-anchor" href="#Java-Tcp实现"></a>Java Tcp实现</h4><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TcpServer</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tcp服务端启动&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//等待客户端连接，阻塞状态</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> accept.getInputStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> is.read(bytes);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len);<br>            System.out.println(<span class="hljs-string">&quot;服务端接收到数据：&quot;</span> + data);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            serverSocket.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;服务端ip&quot;)</span><br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-meta">@MetaData(name = &quot;服务端端口&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TcpClient</span><span class="hljs-params">(String ip, Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ip = ip;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tcp客户端启动&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-built_in">this</span>.ip, <span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Tcp客户端发送消息&quot;</span>);<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>            os.write(data.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            socket.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">16487</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">TcpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TcpServer</span>(port);<br>            server.start();<br>        &#125;<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">TcpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TcpClient</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port);<br>            client.start();<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用设计模式</title>
      <link href="/posts/511749417/"/>
      <url>/posts/511749417/</url>
      
        <content type="html"><![CDATA[<h2 id="常用设计模式"><a class="header-anchor" href="#常用设计模式"></a>常用设计模式</h2><h3 id="设计模式六大原则"><a class="header-anchor" href="#设计模式六大原则"></a>设计模式六大原则</h3><ul><li>开闭原则：对拓展开放，对修改关闭。（接口和抽象类）</li><li>里氏替换原则：任何基类可以出现的地方，子类一定可以出现。</li><li>依赖倒转原则：面向接口编程，依赖于抽象而不依赖与具体。</li><li>接口隔离原则：使用多个隔离的接口比使用单个接口要好，降低类之间的耦合。</li><li>迪米特原则（最少知识原则）：一个软件实体应当尽可能少的与其他实体发生相互作用。</li><li>合成复用原则：尽量采用合成/聚合的方式，而不是使用继承。</li></ul><h3 id="单例模式"><a class="header-anchor" href="#单例模式"></a>单例模式</h3><h4 id="懒汉式"><a class="header-anchor" href="#懒汉式"></a>懒汉式</h4><p>当需要时才会被实例化，没实例化时节约内存。</p><p>需要使用synchronized关键字实现同步来解决线程不安全问题，会降低效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy01</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy01 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy01</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> SingletonLazy01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy01</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-优化"><a class="header-anchor" href="#懒汉式-优化"></a>懒汉式-优化</h4><p>上面的案例使用静态同步函数来进行同步，导致每次调用 getInstance() 方法时，都需要进行线程锁定判断，在多线程高并发访问情况下，将会导致系统性能大幅度降低。将静态同步函数改为同步代码块来提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy02</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy02 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy02</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonLazy02 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonLazy02.class) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy02</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-双重检查锁定"><a class="header-anchor" href="#懒汉式-双重检查锁定"></a>懒汉式-双重检查锁定</h4><p>上面的案例中，当两个线程都进入getInstance()方法并通过instance == null判断后，线程1拿到锁进行实例化，实例化完成后线程2也拿到锁又会再次实例化导致线程不安全。因此需要再进行一次判断保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy03</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy03 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy03</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonLazy03 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonLazy03.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy03</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="饿汉式"><a class="header-anchor" href="#饿汉式"></a>饿汉式</h4><p>当class被加载时就会初始化，天生线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHungry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingletonHungry</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonHungry</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonHungry</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonHungry <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a class="header-anchor" href="#工厂模式"></a>工厂模式</h3><p>实现创建者和调用者分离。</p><h4 id="简单工厂模式"><a class="header-anchor" href="#简单工厂模式"></a>简单工厂模式</h4><p>该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。该模式通过向工厂传递类型来指定要创建的对象，其UML类图如下：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/51e8f342f33126df2ca00d0a9fd4bd4c.png" alt=""></p><p>以下通过火箭发射案例来说明该模式：</p><p><strong>火箭抽象类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFight</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;名称&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@MetaData(name = &quot;型号&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String model;<br>    <span class="hljs-meta">@MetaData(name = &quot;高度&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double height;<br>    <span class="hljs-meta">@MetaData(name = &quot;重量&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double weight;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>神舟火箭类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocket</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;是否载人&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isManned;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot;--- fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>长征火箭类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CZRocket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocket</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;有效载荷&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double payload;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot;--- fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>火箭发射工厂</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketLaunchSimpleFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rocketType 火箭类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 发射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/10</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">launch</span><span class="hljs-params">(String rocketType)</span> &#123;<br>        <span class="hljs-type">IFight</span> <span class="hljs-variable">rocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (rocketType) &#123;<br>            <span class="hljs-keyword">case</span> ROCKET_TYPE_SZ:<br>                rocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ROCKET_TYPE_CZ:<br>                rocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CZRocket</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        rocket.fly();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发射！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">RocketLaunchSimpleFactory</span> <span class="hljs-variable">rocketSimpleFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RocketLaunchSimpleFactory</span>();<br>    rocketSimpleFactory.launch(RocketLaunchSimpleFactory.ROCKET_TYPE_SZ);<br>    rocketSimpleFactory.launch(RocketLaunchSimpleFactory.ROCKET_TYPE_CZ);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂方法模式"><a class="header-anchor" href="#工厂方法模式"></a>工厂方法模式</h4><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其UML类图如下：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/67fdcf24ca11cc9c88d6babb7f783782.png" alt=""></p><p><strong>火箭创建抽象工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> AbstractRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>神舟火箭创建工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocketCreateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SZRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>长征火箭创建工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocketCreateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SZRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发射！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">AbstractRocketCreateFactory</span> <span class="hljs-variable">szFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocketCreateFactory</span>();<br>    <span class="hljs-type">AbstractRocketCreateFactory</span> <span class="hljs-variable">czFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CZRocketCreateFactory</span>();<br>    szFactory.create().fly();<br>    czFactory.create().fly();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a class="header-anchor" href="#抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/378b5e851763502c266739f4340e7f1e.png" alt=""></p><h3 id="代理模式"><a class="header-anchor" href="#代理模式"></a>代理模式</h3><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/b7d01dc623c2ab6cfc51ed002f9dd6a7.png" alt=""></p><p>SpringAOP基于代理模式实现（JDK动态代理和CGLIB代理）。</p><h4 id="静态代理"><a class="header-anchor" href="#静态代理"></a>静态代理</h4><p>需要自己写代理类。在程序运行之前，代理类.class文件就已经被创建了。</p><p>使用下面的案例来说明：</p><p><strong>卖房接口类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房东类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseOwner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;房东卖房&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房屋中介类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br><br>    <span class="hljs-keyword">private</span> HouseOwner houseOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseProxy</span><span class="hljs-params">(HouseOwner houseOwner)</span> &#123;<br>        <span class="hljs-built_in">this</span>.houseOwner = houseOwner;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介介入&quot;</span>);<br>        houseOwner.sell();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HouseProxy</span> <span class="hljs-variable">houseProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseOwner</span>());<br>    houseProxy.sell();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态代理"><a class="header-anchor" href="#动态代理"></a>动态代理</h4><p>动态代理是在程序运行时通过反射机制动态创建的。</p><h5 id="JDK动态代理"><a class="header-anchor" href="#JDK动态代理"></a>JDK动态代理</h5><p>通过Java的反射机制实现代理类</p><p>使用下面的案例来说明：</p><p><strong>JDK动态代理类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdkDynamicProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;JDK动态代理&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkDynamicProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HouseOwner</span> <span class="hljs-variable">houseOwner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseOwner</span>();<br>    <span class="hljs-type">JdkDynamicProxy</span> <span class="hljs-variable">jdkDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicProxy</span>(houseOwner);<br>    <span class="hljs-comment">//JDK动态代理通过反射机制生成代理</span><br>    <span class="hljs-type">ISellHouse</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (ISellHouse) Proxy.newProxyInstance(houseOwner.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ISellHouse.class&#125;, jdkDynamicProxy);<br>    proxyInstance.sell();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意Proxy.newProxyInstance()方法接受三个参数：</p><ul><li><code>ClassLoader loader</code>：指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li><li><code>Class&lt;?&gt;[] interfaces</code>：指定目标对象实现的接口的类型,使用泛型方式确认类型</li><li><code>InvocationHandler</code>：指定<code>动态处理器</code>，执行目标对象的方法时,会触发事件处理器的方法</li></ul></blockquote><h5 id="CGLIB代理"><a class="header-anchor" href="#CGLIB代理"></a>CGLIB代理</h5><p>其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对<strong>final</strong>修饰的类进行代理。</p><p><strong>CGLIB动态代理类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;CGLIB动态代理&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invokeSuper</span> <span class="hljs-operator">=</span> methodProxy.invokeSuper(o, args);<br>        <span class="hljs-keyword">return</span> invokeSuper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglibDynamicProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">CglibDynamicProxy</span> <span class="hljs-variable">cglibDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibDynamicProxy</span>();<br>    <span class="hljs-comment">//使用asm框架生成代理类</span><br>    <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>    enhancer.setSuperclass(HouseOwner.class);<br>    enhancer.setCallback(cglibDynamicProxy);<br>    <span class="hljs-type">ISellHouse</span> <span class="hljs-variable">sellHouse</span> <span class="hljs-operator">=</span> (ISellHouse) enhancer.create();<br>    sellHouse.sell();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>CGLIB创建的动态代理对象比JDK创建的动态代理对象的性能更高，但是CGLIB创建代理对象时所花费的时间却比JDK多得多。</p></li><li><p>对于单例的对象，因为无需频繁创建对象，用CGLIB合适，反之使用JDK方式要更为合适一些。</p></li><li><p>由于CGLib由于是采用动态创建子类的方法，对于final修饰的方法无法进行代理。</p></li></ul></blockquote><p><em>注：ASM是Java字节码控制</em></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC</title>
      <link href="/posts/839291940/"/>
      <url>/posts/839291940/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringIOC"><a class="header-anchor" href="#SpringIOC"></a>SpringIOC</h2><h3 id="什么是Java反射"><a class="header-anchor" href="#什么是Java反射"></a>什么是Java反射</h3><p>就是正在运行，动态获取这个类的所有信息。</p><p>通过反射机制可以访问Java对象的属性，方法，构造方法等。</p><h3 id="反射机制的应用场景"><a class="header-anchor" href="#反射机制的应用场景"></a>反射机制的应用场景</h3><ul><li>JDBC加载驱动</li><li>SpringIOC实现</li></ul><h3 id="什么是SpringIOC"><a class="header-anchor" href="#什么是SpringIOC"></a>什么是SpringIOC</h3><p>spring ioc指的是控制反转，IOC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。交由Spring容器统一进行管理，从而实现松耦合。</p><h3 id="IOC实现原理"><a class="header-anchor" href="#IOC实现原理"></a>IOC实现原理</h3><p>反射机制+XML读取解析技术</p><ul><li>读取xml文件</li><li>获取xml文件中的bean配置信息</li><li>通过bean中的class值反射并实例化对象</li><li>通过反射api未私有属性赋值</li></ul><p>SpringIOC模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟SpringIOC</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020/9/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringIOCDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 获取bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/9</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanId)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//读取xml文件</span><br>        <span class="hljs-comment">//获取xml文件中的bean配置信息</span><br>        <span class="hljs-comment">//通过bean中的class反射并实例化对象，再通过反射api为私有属性赋值</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(SpringIOCDemo.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;user.xml&quot;</span>));<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        List&lt;Element&gt; elements = root.elements();<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">beanElement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>            <span class="hljs-keyword">if</span> (element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>).equals(beanId)) &#123;<br>                beanElement = element;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (beanElement != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(beanElement.attributeValue(<span class="hljs-string">&quot;class&quot;</span>));<br>            <span class="hljs-comment">//通过反射实例化对象</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>            List&lt;Element&gt; propertys = beanElement.elements();<br>            <span class="hljs-comment">//获取bean的属性</span><br>            <span class="hljs-keyword">for</span> (Element element : propertys) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> element.attributeValue(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fieldValue</span> <span class="hljs-operator">=</span> element.attributeValue(<span class="hljs-string">&quot;value&quot;</span>);<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">if</span> (field.getType() == Integer.class) &#123;<br>                    field.set(obj, Integer.parseInt(fieldValue));<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (field.getType() == String.class) &#123;<br>                    field.set(obj, fieldValue);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> (User) obj;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/posts/2730732825/"/>
      <url>/posts/2730732825/</url>
      
        <content type="html"><![CDATA[<h2 id="Java多线程"><a class="header-anchor" href="#Java多线程"></a>Java多线程</h2><h3 id="线程与进程"><a class="header-anchor" href="#线程与进程"></a>线程与进程</h3><p>进程是所有线程的集合，每一个线程是进程中的一条执行路径。</p><h3 id="多线程应用场景"><a class="header-anchor" href="#多线程应用场景"></a>多线程应用场景</h3><p>多线程提高程序效率。</p><p>如迅雷多线程下载、分批发送短信等。</p><h3 id="多线程创建方式"><a class="header-anchor" href="#多线程创建方式"></a>多线程创建方式</h3><ul><li>继承Thread类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Thread01.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能描述: 线程执行的任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/2</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread01</span>().start();<br></code></pre></td></tr></table></figure><ul><li>实现Runable接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Thread02.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread02</span>()).start();<br></code></pre></td></tr></table></figure><ul><li>继承Thread类好还是实现Runable接口好？</li></ul><blockquote><p>接口好，接口可以实现多个，而继承只能继承一个</p></blockquote><ul><li>使用匿名内部类方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能描述: 匿名内部类方式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startThread03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>            &#125;<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注：在run方法中不能抛出异常</em></p><h3 id="线程常用API"><a class="header-anchor" href="#线程常用API"></a>线程常用API</h3><table><thead><tr><th>方法</th><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>sleep</td><td>毫秒</td><td>让当前线程从运行状态变为休眠状态，到时间再变为运行状态。不能释放锁，多线程之间实现同步</td><td>Thread.sleep(1000);</td></tr><tr><td>getId</td><td></td><td>获取当前线程id</td><td></td></tr><tr><td>getName</td><td></td><td>获取当前线程名称，在实现runable接口的线程类中使用Thread.currentThread()来调用</td><td></td></tr><tr><td>join</td><td></td><td>让其他线程等待，只有当前线程执行完毕才会释放资格</td><td></td></tr></tbody></table><h3 id="线程生命周期"><a class="header-anchor" href="#线程生命周期"></a>线程生命周期</h3><blockquote><p>线程从创建、运行到结束总是处于五个状态之中：新建状态、就绪状态、阻塞状态、运行状态、死亡状态</p></blockquote><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e2f36e28ec1156e3ff5d76fe5d8a6ccd.png" alt=""></p><p>新建状态：线程实例化但没有调用start()状态；</p><p>就绪状态：线程调用了start()方法，但没有得到cpu分配的资源；</p><p>运行状态：线程在执行run()方法；</p><p>死亡状态：run()方法运行完；一个未捕获的异常终止了run方法导致线程猝死；</p><p>阻塞状态：调用sleep()方法；线程调用一个在I/O上被阻塞的操作；线程试图得到一个锁，而该锁正被其他线程持有；线程在等待某个触发条件；</p><h3 id="线程安全"><a class="header-anchor" href="#线程安全"></a>线程安全</h3><ul><li>为什么会有线程安全问题？</li></ul><p>当多个线程同时写一个共享全局变量时，可能会发生数据冲突问题，也就是线程安全问题。</p><ul><li><p>线程安全问题怎么解决？</p><ul><li><p>synchronized</p><ul><li><p>同步代码块：将可能发生线程安全问题的代码，给包括起来（有问题的写操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 同步代码块</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronizedCodeBlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//synchronized包裹的代码一次只能有一个线程执行</span><br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), count);<br>                count--;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>同步函数：synchronized 关键字修饰在方法上，相当于使用this锁的同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 同步函数</span><br><span class="hljs-comment"> * synchronized 关键字修饰在方法上</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronizedFunction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), count);<br>        count--;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 同步函数相当于使用this锁的同步代码块</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">synchronizedFunction2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//synchronized包裹的代码一次只能有一个线程执行</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), count);<br>                count--;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态同步函数：static、synchronized关键字修饰在方法上，相当于使用当前线程类.class锁的同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 静态同步函数</span><br><span class="hljs-comment"> * static、synchronized关键字修饰在方法上</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticSynchronizedFunction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (staticCount &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), staticCount);<br>        staticCount--;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 静态同步函数相当于使用当前线程类.class锁的同步代码块</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticSynchronizedFunction2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (staticCount &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//synchronized包裹的代码一次只能有一个线程执行</span><br>        <span class="hljs-keyword">synchronized</span> (Thread04.class) &#123;<br>            <span class="hljs-keyword">if</span> (staticCount &gt; <span class="hljs-number">0</span>) &#123;<br>                log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), staticCount);<br>                staticCount--;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>适合场景：单个jvm环境下，集群中不可行</p></li></ul></li><li><p>lock</p></li></ul></li><li><p>多线程死锁：同步中嵌套同步，导致锁无法释放</p></li></ul><h3 id="线程间的通讯"><a class="header-anchor" href="#线程间的通讯"></a>线程间的通讯</h3><ul><li>wait：可以让当前线程由运行状态变为阻塞状态，可以释放锁，与synchronized一起使用，且使用同一个锁</li><li>notify：唤醒另一个线程（由阻塞状态变为运行状态 ），一般和wait一起使用</li><li>Lock接口：配合Condition接口实现等待/通知模式，常用lock()、unlock()方法，常用实现类ReentrantLock</li><li>Condition接口：依赖于Lock对象，常用await()、signal()方法</li></ul><p>线程的停止方法：</p><ul><li>使用退出标志，是线程正常退出，也就是当run方法执行完成后线程终止</li><li>使用stop()方法强行终止线程（不建议使用stop()方法，因为没有异常处理，可能会出现不可预料的结果）</li><li>使用interrupt()方法中断线程</li></ul><h3 id="守护线程"><a class="header-anchor" href="#守护线程"></a>守护线程</h3><blockquote><p>线程分为两类：用户线程（前台线程）和守护线程（后台线程）；</p></blockquote><p>守护线程（deamon）是为我们创建的用户线程提供服务的线程，如jvm的gc等；</p><ul><li>当用户线程运行结束的时候,daemon线程将会自动退出</li></ul><h3 id="线程的三大特性"><a class="header-anchor" href="#线程的三大特性"></a>线程的三大特性</h3><h4 id="原子性"><a class="header-anchor" href="#原子性"></a>原子性</h4><p>即一个或多个操作，要么全部执行并执行的过程不会被任何元素打断，要么就都不执行；</p><p>使用同步和lock来确保这个特性。</p><p>原子性其实就是保证数据一致，线程安全一部分。</p><h4 id="可见性"><a class="header-anchor" href="#可见性"></a>可见性</h4><p>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><h4 id="有序性"><a class="header-anchor" href="#有序性"></a>有序性</h4><p>程序执行的顺序按照代码的先后顺序执行。</p><p><em>注：线程安全包括两个方面：可见性，原子性</em></p><h3 id="Java内存模型"><a class="header-anchor" href="#Java内存模型"></a>Java内存模型</h3><p>共享内存模型就是Java内存模型（简称JMM，JMM决定一个线程对共享变量的写入时，能对另一个线程可见）。线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2224c0e96baab4410ccb657444433005.png" alt=""></p><p><em>注：与Java内存结构（方法区，堆，栈等）要区分概念</em></p><h3 id="Volatile"><a class="header-anchor" href="#Volatile"></a>Volatile</h3><p>作用：变量在多个线程之间可见，强制线程每次读取volatile关键字修饰的变量时都去主内存中取值。</p><p><em>注：不能解决原子性问题，在高并发下i++无法保证原子性，往往会出现问题，所以引入了AtomicInteger类。synchronized不仅保证可见性，而且保证原子性</em></p><h3 id="ThreadLocal"><a class="header-anchor" href="#ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal中填充的变量属于<strong>当前</strong>线程，该变量对其他线程而言是隔离的，线程之间互不影响。</p><p>ThreadLocal底层用Map实现，key:当前线程，value：值。</p><h3 id="强引用、软引用、弱引用、虚引用"><a class="header-anchor" href="#强引用、软引用、弱引用、虚引用"></a>强引用、软引用、弱引用、虚引用</h3><p>Java中4种引用的级别由高到低依次为：</p><p>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</p><p>他们之间在垃圾回收时的区别：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d76d97c50580900b6df28eccbcedd488.png" alt=""></p><p>各引用间的区别：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/f59e14112b2e0e52b2d10af7af7e2142.png" alt=""></p><h3 id="线程池"><a class="header-anchor" href="#线程池"></a>线程池</h3><p>为什么使用线程池？</p><p>因为启动或停止一个线程非常耗资源，将线程交给线程池来管理可以节约内存。</p><p>Java通过Executors（jdk1.5并发包）提供四种线程池，分别为：</p><ul><li><strong>newCachedThreadPool</strong> 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收线程，则新建线程</li><li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li><li>newScheduledThreadPool 创建一个定长的线程池。支持定时及周期性任务执行</li><li>newSingleThreadExecutor  创建一个<strong>单线程</strong>化线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础知识回顾及查漏补缺</title>
      <link href="/posts/2966935704/"/>
      <url>/posts/2966935704/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java标准版=Java SE=J2SE（提供了完整的Java核心API）</p><p>Java企业版=Java EE=J2EE（该技术体系中包含如Servlet、Jsp等，主要针对Web应用程序开发）</p><p>Java小型版=Java ME=J2ME（支持Java程序运行在移动终端，对Java API有所精简，Android出来后就没什么人用了）</p></blockquote><h3 id="Java的重要特点"><a class="header-anchor" href="#Java的重要特点"></a>Java的重要特点</h3><ul><li>是面向对象的：OOP</li><li>是健壮的：强类型机制、异常处理、垃圾回收等</li><li>是跨平台的：一次编译，到处运行（前提是平台上有JVM）</li><li>是解释型的：编译后的代码，不能直接被机器执行，需要有解释器来执行</li></ul><h3 id="Java的运行机制"><a class="header-anchor" href="#Java的运行机制"></a>Java的运行机制</h3><h4 id="JVM"><a class="header-anchor" href="#JVM"></a>JVM</h4><p>核心机制：Java虚拟机（JVM）</p><ul><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。包含在JDK中。</li><li>JVM屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ul><h4 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h4><ul><li>全称为Java开发工具包，JDK=JRE+Java的开发工具（java、javac、javadoc、javap等工具）<ul><li>JRE（Java runtime environment）Java运行环境，JRE=JVM+JavaSE（Java核心类库）</li><li>想要运行一个开发号的Java程序，计算机中只需要安装JRE即可</li></ul></li><li>JDK提供给开发人员使用，其中包含Java的开发工具，也包含了JRE</li></ul><h4 id="运行机制"><a class="header-anchor" href="#运行机制"></a>运行机制</h4><p>使用javac工具将编写的.java文件编译为.class文件（字节码文件），JVM执行.class文件，输出结果</p><h3 id="数据类型"><a class="header-anchor" href="#数据类型"></a>数据类型</h3><p>1字节=8bit</p><h4 id="基本数据类型"><a class="header-anchor" href="#基本数据类型"></a>基本数据类型</h4><h5 id="数值型"><a class="header-anchor" href="#数值型"></a>数值型</h5><p>数值型包括整型和浮点类型，浮点数=符号位+指数位+尾数位</p><p>小数的相等判断：以两个数差值的绝对值在某个精度范围内为相等依据</p><ul><li>byte：1字节，-128~127</li><li>short：2字节，-2<sup>15~2</sup>15-1</li><li>int：4字节，-2<sup>31~2</sup>31-1</li><li>long：8字节，-2<sup>63~2</sup>63-1</li><li>float：4字节，-3.40E38 ~ 3.40E38<ul><li>除十进制表示外，还可用科学计数法表示，如 5.12e2=5.12*10<sup>2、5.12e-2=5.12/10</sup>2</li></ul></li><li>double：8字节，-1.79E308 ~ 1.79E308，浮点数默认为double，后加f或F声明为float类型</li></ul><h5 id="字符型"><a class="header-anchor" href="#字符型"></a>字符型</h5><ul><li>char：2字节，存放单个字符，本质是一个整数，是unicode码对应的字符（&amp;#数字;）<ul><li>ASCII：1字节，可以表示256个字符，但只用了128个</li><li>Unicode：2字节，字母和汉字都是用2字节表示</li><li>utf-8：大小可变的编码，字母使用1字节，汉字使用3字节</li><li>gbk：可以表示汉字，范围广但小于utf-8，字母使用1字节，汉字使用2字节</li><li>gb2312：可以表示汉字，范围小于gbk</li><li>big5：繁体中文</li></ul></li></ul><h5 id="布尔型"><a class="header-anchor" href="#布尔型"></a>布尔型</h5><ul><li>boolean：1字节</li></ul><h4 id="基本类型精度顺序"><a class="header-anchor" href="#基本类型精度顺序"></a>基本类型精度顺序</h4><ul><li>char &gt; int &gt; long &gt; float &gt; double</li><li>byte &gt; short &gt; int &gt; long &gt; float &gt; double</li></ul><h4 id="自动类型转换细节"><a class="header-anchor" href="#自动类型转换细节"></a>自动类型转换细节</h4><ul><li><p>容量（精度）小的类型可以自动转换为容量大的类型</p></li><li><p>（byte、short）和char之间不会互相自动转换</p></li><li><p>自动提升原则：多种类型的数据混合运算时，系统自动将所有数据转换为容量最大的那种数据类型，然后在进行计算</p></li><li><p>byte、short、char三种类型可以混合运算（单类型或多类型），在计算时会先转换为int</p></li><li><p>boolean不参与类型自动转换</p></li></ul><h4 id="强制类型转换细节"><a class="header-anchor" href="#强制类型转换细节"></a>强制类型转换细节</h4><ul><li>可能会造成精度损失或数据溢出</li><li>强转符号只针对于最近的操作数有效，使用小括号提升优先级</li><li>byte和short类型在进行运算时，当做int类型处理</li></ul><h4 id="基本数据类型与String类型转换"><a class="header-anchor" href="#基本数据类型与String类型转换"></a>基本数据类型与String类型转换</h4><ul><li>基本数据类型转String类型：基本类型的值 + “” 即可</li><li>String转基本数据类型：通过基本类型的包装类调用<code>parseXXX</code>方法即可</li></ul><h4 id="引用数据类型"><a class="header-anchor" href="#引用数据类型"></a>引用数据类型</h4><h5 id="类"><a class="header-anchor" href="#类"></a>类</h5><h5 id="接口"><a class="header-anchor" href="#接口"></a>接口</h5><h5 id="数组"><a class="header-anchor" href="#数组"></a>数组</h5><h3 id="进制"><a class="header-anchor" href="#进制"></a>进制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 二进制以0b开头</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b1010</span>;<br><span class="hljs-comment">// 十进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1010</span>;<br><span class="hljs-comment">// 八进制以0开头</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">01010</span>;<br><span class="hljs-comment">// 十六进制以0x开头</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x101</span>;<br></code></pre></td></tr></table></figure><h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3><h3 id="类变量和类方法"><a class="header-anchor" href="#类变量和类方法"></a>类变量和类方法</h3><h4 id="对象分配机制"><a class="header-anchor" href="#对象分配机制"></a>对象分配机制</h4><ul><li>类信息（类的属性信息、方法信息）会加载到<code>方法区</code></li><li>在<code>堆</code>中分配空间（地址）存放对象，对象中的字符串属性会存放到<code>方法区</code>的<code>常量池</code>中</li><li>对象名（对象引用）存放到<code>栈</code>中，它的值是一个地址，地址指向堆中的对象</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ac27cfe27b41983ac71fbf15fc2d7955.svg" alt=""></p><h4 id="方法调用机制"><a class="header-anchor" href="#方法调用机制"></a>方法调用机制</h4><ul><li>当程序执行到方法时，会开辟一个独立的栈空间</li></ul><h4 id="方法传参机制"><a class="header-anchor" href="#方法传参机制"></a>方法传参机制</h4><ul><li>基本数据类型传递的是值，形参的改变不会影响实参</li><li>引用类型传递的是地址（其实也是值，只是值为地址），形参改变会影响实参（形参地址的改变不会影响实参）</li></ul><h4 id="方法可变参数"><a class="header-anchor" href="#方法可变参数"></a>方法可变参数</h4><ul><li>可变参数的实参可以为0个或任意多个</li><li>可变参数的实参可以为数组</li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li><li>一个形参列表中只能出现一个可变参数</li></ul><h4 id="变量作用域"><a class="header-anchor" href="#变量作用域"></a>变量作用域</h4><ul><li>属性和局部变量可以重名，访问时遵循就近原则</li><li>在同一个作用域中，两个局部变量不能重名</li><li>属性生命周期较长，与对象的创建和销毁同步。局部变量生】】命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而死亡，即在一次方法调用过程中</li><li>全局变量可以被本类使用，也可以被其他类通过对象调用来使用；局部变量只能在本类中对应的方法中使用</li><li>全局变量可以加修饰符；局部变量不可以加修饰符</li></ul><h3 id="构造方法"><a class="header-anchor" href="#构造方法"></a>构造方法</h3><ul><li>构造方法可以重载</li><li>构造方法与类名相同</li><li>构造方法无返回值</li><li>构造方法是完成对象的初始化，并不是创建对象</li><li>在创建对象时，系统自动调用该类的构造方法</li><li>若没有定义构造方法，系统编译时会自动给类生成一个无参构造</li><li>若定义了构造方法，系统就不会再自动生成一个无参构造，需要自己在代码中定义</li></ul><h4 id="对象创建流程"><a class="header-anchor" href="#对象创建流程"></a>对象创建流程</h4><ul><li>加载类信息，只会加载一次</li><li>在堆中分配空间（地址）</li><li>完成对象初始化<ul><li>默认初始化：属性赋值对应类型的默认值（如int默认是0，String默认是null）</li><li>显式初始化：属性显式的赋值（如 int age = 100;）</li><li>构造方法初始化</li></ul></li><li>把对象在堆中的地址返回给对象名（对象引用）</li></ul><h3 id="访问修饰符"><a class="header-anchor" href="#访问修饰符"></a>访问修饰符</h3><ul><li>公开级别：用<code>public</code>修饰，对外公开</li><li>受保护级别：用<code>protected</code>修饰，对子类或同一个包中的类公开</li><li>默认级别：没有修饰符，对同一个包中的类公开</li><li>私有级别：用<code>private</code>修饰，只有类本身可以访问，不对外公开</li></ul><h3 id="面向对象"><a class="header-anchor" href="#面向对象"></a>面向对象</h3><p>面向对象编程三大特征：封装、继承和多态</p><h4 id="封装"><a class="header-anchor" href="#封装"></a>封装</h4><p>封装就是把抽象出的数据（属性）和对数据的操作（方法）封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作（方法），才能对数据进行操作。</p><h5 id="封装的优点"><a class="header-anchor" href="#封装的优点"></a>封装的优点</h5><ul><li>隐藏实现细节</li><li>可以对数据进行验证，保证安全合理</li></ul><h4 id="继承"><a class="header-anchor" href="#继承"></a>继承</h4><p>继承可以解决代码复用。当多个类存在相同的属性和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过<code>extends</code>来声明继承父类即可。</p><h5 id="继承的优点"><a class="header-anchor" href="#继承的优点"></a>继承的优点</h5><ul><li>代码的复用性提高了</li><li>代码的扩展性和维护性提高了</li></ul><h5 id="继承的细节"><a class="header-anchor" href="#继承的细节"></a>继承的细节</h5><ul><li>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过公共的方法去访问</li><li>子类必须调用父类的构造器，完成父类的初始化（编译器会自动生成）</li><li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用<code>super</code>去指定使用父类的哪个构造器完成父类的初始化工作，否则，编译不通过</li><li>若希望指定去调用父类的某个构造器，则显示的调用一下</li><li><code>super</code>在使用时，需要放在构造器第一行（super只能在构造器中使用）</li><li><code>super</code>和<code>this</code>都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</li><li>所有类都是Object类的子类</li><li>父类构造器的调用不限于直接父类，一直往上追溯知道Object类</li><li>子类最多只能继承一个父类（直接继承）</li><li>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</li></ul><h5 id="子类创建的内存布局"><a class="header-anchor" href="#子类创建的内存布局"></a>子类创建的内存布局</h5><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fa&quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;son&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码的内存布局如下：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6328bc8cd4e61db567ab48101c8e1bbb.svg" alt=""></p><h5 id="子类创建过程"><a class="header-anchor" href="#子类创建过程"></a>子类创建过程</h5><ul><li>按子类的继承关系从上到下，将类加载到方法区</li><li>在堆中分配子类对象的空间</li><li>按子类的继承关系从上到下，初始化各类的属性</li><li>子类对象名指向对象地址</li></ul><h5 id="子类对象属性查询规则"><a class="header-anchor" href="#子类对象属性查询规则"></a>子类对象属性查询规则</h5><ul><li>按继承关系<strong>从下向上</strong>查找第一个<strong>可以被访问</strong>的该属性，并返回</li></ul><h4 id="多态"><a class="header-anchor" href="#多态"></a>多态</h4><p>多态：方法或对对象具有多种形态，多态是建立在封装和继承基础之上的</p><h5 id="多态的具体体现"><a class="header-anchor" href="#多态的具体体现"></a>多态的具体体现</h5><ul><li>方法的多态：重写和重载</li><li>对象的多态<ul><li>一个对象的编译类型（父类）和运行类型（子类）可以不一致</li><li>编译类型在定义对象时就确定了，不能改变</li><li>运行类型是可以变化的</li><li>编译类型：定义时 = 号的左边，运行类型：= 号的右边</li></ul></li></ul><h5 id="多态的注意事项及细节"><a class="header-anchor" href="#多态的注意事项及细节"></a>多态的注意事项及细节</h5><ul><li>多态的前提是：两个对象（类）存在继承关系</li><li>多态的向上转型<ul><li>本质：父类的引用指向了子类的对象</li><li>语法：父类类型 引用名 = new 子类类型();</li><li>特点：编译类型看左边，运行类型看右边；可以调用父类中的所有成员（需遵守访问权限），不能调用子类中特有成员，最终运行效果看子类的具体实现</li></ul></li><li>多态的向下转型<ul><li>语法：子类类型 引用名 = (子类类型) 父类引用;</li><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向的是当前目标类型的对象（编译类型和运行类型都为子类类型）</li><li>当向下转型后，可以调用子类类型中的所有成员</li></ul></li><li>属性没有重写之说，属性的值看编译类型（比如父类和子类相同属性默认值不同时，父类 引用名 = 子类，引用名.属性 = 父类的默认值，即动态绑定机制）</li><li>instanceOf 用于判断对象的类型是否为XX类型或XX类型的子类型</li></ul><h3 id="动态绑定机制"><a class="header-anchor" href="#动态绑定机制"></a>动态绑定机制</h3><ul><li>当调用对象方法时，该方法会和该对象的内存地址（运行类型）绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用（编译类型）</li></ul><h3 id="static关键字"><a class="header-anchor" href="#static关键字"></a>static关键字</h3><h4 id="类变量"><a class="header-anchor" href="#类变量"></a>类变量</h4><ul><li>类中用static关键字修饰的变量称为类变量（静态变量）</li><li>类的类变量是所有对象实例共享的，所有的访问和修改都是同一个变量</li><li>Java7之前，类变量存放在方法区，之后，存放在堆中</li><li>类变量在类加载时就被分配空间</li></ul><h4 id="类方法"><a class="header-anchor" href="#类方法"></a>类方法</h4><p>类中用static关键字修饰的方法称为类方法（静态方法）</p><h5 id="经典使用场景"><a class="header-anchor" href="#经典使用场景"></a>经典使用场景</h5><ul><li>当方法中不涉及到任何和对象相关的成员，则可以将方法设计为静态方法，提高发开效率</li><li>工具类</li></ul><h5 id="使用注意事项和细节"><a class="header-anchor" href="#使用注意事项和细节"></a>使用注意事项和细节</h5><ul><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区，类方法中无this的参数</li><li>类方法可以通过类名调用，也可以通过对象名调用</li><li>普通方法和对象相关，需要通过对象名调用，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如this和super</li><li>类方法中只能访问类变量或类方法</li><li>普通成员方法既可以访问普通变量和方法，也可以方法类变量和方法</li></ul><h3 id="理解main方法"><a class="header-anchor" href="#理解main方法"></a>理解main方法</h3><ul><li>main方法由jvm调用，所以该方法的访问权限必须是public</li><li>jvm在执行main方法时不必创建对象，所以该方法必须是static</li><li>在main方法中，可以直接调用该main方法所在类的类变量和类方法</li></ul><h3 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h3><h4 id="基本介绍"><a class="header-anchor" href="#基本介绍"></a>基本介绍</h4><ul><li><p>代码块又称为初始化块，属于类成员，类似于方法，可以将逻辑语句封装在方法体内，通过<code>&#123;&#125;</code>包围起来</p></li><li><p>和方法不同，没有方法名，没有返回，没有参数，只有方法体，不能通过对象或类名显式调用，而是在类加载时，或创建对象时隐式调用</p></li><li><p>代码块在构造器之前执行</p></li><li><p>语法如下（加修饰符的话，只能加static）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-keyword">static</span>]&#123;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="使用注意事项和细节-v2"><a class="header-anchor" href="#使用注意事项和细节-v2"></a>使用注意事项和细节</h4><ul><li>静态代码块，作用就是对类进行初始化，它随着类的加载而执行，并且只会执行一次。普通代码块，每创建一个对象就执行</li><li>类什么时候被加载<ul><li>创建对象实例时（new）</li><li>创建子类对象实例，父类也会被加载</li><li>使用类的静态成员时（静态属性，静态方法）</li></ul></li><li>如果只使用类的静态成员，普通代码块并不会执行</li><li>创建一个对象时，在一个类调用顺序是：<ul><li>调用静态代码块和静态属性初始化（优先级一致，按定义的顺序调用）</li><li>调用普通代码块和普通属性的初始化（优先级一致，按定义顺序调用）</li><li>调用构造方法</li></ul></li><li>构造方法的最前面其实隐含了super()和调用普通代码块</li><li>创建一个子类时的调用顺序<ul><li>父类静态代码块和静态属性初始化</li><li>子类静态代码块和静态属性初始化</li><li>父类普通代码块和普通属性初始化</li><li>父类构造方法</li><li>普通代码块和普通属性初始化</li><li>子类构造方法</li></ul></li><li>静态代码块只能调用类变量和类方法</li></ul><h3 id="final关键字"><a class="header-anchor" href="#final关键字"></a>final关键字</h3><p>final关键字可以修饰类、属性、方法和局部变量</p><h4 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h4><ul><li>当不希望类被继承时</li><li>当不希望父类的某个方法被子类覆盖/重写时</li><li>当不希望类的某个属性的值被修改时</li><li>当不希望某个局部变量被修改时</li></ul><h4 id="使用注意事项和细节-v3"><a class="header-anchor" href="#使用注意事项和细节-v3"></a>使用注意事项和细节</h4><ul><li>final修饰的属性在定义时，必须赋初始值，并且以后不能再修改<ul><li>定义时（等号右侧赋值）</li><li>构造器中赋值</li><li>代码块中赋值</li></ul></li><li>若final修饰的属性是静态的，则初始化的位置只能是定义时和静态代码块</li><li>final类不能被继承，但是可以实例化对象</li><li>若类不是final类，但含有final方法，则该方法虽不能重写，但是可以被继承</li><li>一般来说，若一个类已经是final类了，就没有必要再将方法修饰成final方法</li><li>final不能修饰构造方法</li><li>final和static往往搭配使用，不会导致类加载，效率更高，底层编译器做了优化处理</li><li>包装类、String也是final类</li></ul><h3 id="抽象类"><a class="header-anchor" href="#抽象类"></a>抽象类</h3><h4 id="使用注意事项和细节-v4"><a class="header-anchor" href="#使用注意事项和细节-v4"></a>使用注意事项和细节</h4><ul><li>用abstract关键字修饰一个类时，该类就是抽象类</li><li>用abstract关键字修饰一个方法时，该方法就是抽象方法</li><li>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类</li><li>抽象类可以有任意成员</li><li>抽象方法不能有方法主体</li><li>若一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类</li></ul><h3 id="接口-v2"><a class="header-anchor" href="#接口-v2"></a>接口</h3><p>接口就是给出一些没有实现的方法，封装到一起，到某一个类要使用的时候，在根据具体情况把这些方法写出来。</p><p>jdk8之后接口可以有默认实现方法（需要使用default关键字修饰）、静态方法（用static关键字修饰）。</p><h4 id="使用注意事项和细节-v5"><a class="header-anchor" href="#使用注意事项和细节-v5"></a>使用注意事项和细节</h4><ul><li>接口不能被实例化</li><li>接口中所有的方法是public方法，接口中抽象方法可以不用abstract关键字修饰</li><li>一个普通类实现接口，就必须将该接口的所有方法都实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口</li><li>接口中的属性只能是final，而且是 public static final 修饰符（如接口中定义 int num=1; 实际上是 public static final int num=1;）</li><li>接口中属性的访问形式：接口名.属性名</li><li>一个接口不能继承其他的类，但是可以继承多个别的接口</li><li>接口的修饰符只能是public和默认</li></ul><h4 id="接口与继承类"><a class="header-anchor" href="#接口与继承类"></a>接口与继承类</h4><ul><li>继承的价值主要在于：解决代码的复用性和可维护性</li><li>接口的价值主要在于：设计好各种规范，让其他类去实现这些方法</li><li>接口比继承更加灵活，继承是满足is-a的关系，接口只需满足like-a的关系</li><li>接口在一定程度上实现代码解耦</li></ul><h4 id="接口的多态性"><a class="header-anchor" href="#接口的多态性"></a>接口的多态性</h4><ul><li>多态参数，接口引用可以指向实现了接口的类的对象</li><li>多态数组</li><li>接口存在多态传递现象（接口未实现的方法会向下传递直至实现）</li></ul><h3 id="内部类"><a class="header-anchor" href="#内部类"></a>内部类</h3><p>一个类的内部又完整的嵌套了另一个类结构，是类的五大成员之一（属性、方法、构造器、代码块、内部类）。内部类最大的特点就是可以直接访问私有熟悉，并且可以体现类与类之间的包含关系。</p><h4 id="局部内部类"><a class="header-anchor" href="#局部内部类"></a>局部内部类</h4><p>定义在外部类的局部位置，通常在方法中。</p><ul><li>可以直接访问外部类的所有成员</li><li>不能添加访问修饰符，因为它的地位就是一个局部变量，可以使用final修饰</li><li>作用域：仅定义它的方法或代码块中</li><li>若外部类和局部内部类的成员重名时，默认遵循就近原则，若想访问外部类的成员，则可以使用 外部类名.this.成员 去访问（外部类.this的本质就是外部类的对象，即哪个对象调用了内部类所在方法，外部类.this就是哪个对象）</li></ul><h4 id="匿名内部类"><a class="header-anchor" href="#匿名内部类"></a>匿名内部类</h4><p>定义在外部类的局部外置，比如方法中，并且没有类名，同时还是一个对象。</p><ul><li>基本语法：new 类或接口(参数列表){ 类体 };</li><li>使用匿名内部类可以简化开发</li><li>编译类型为new后面的类或接口，运行类型为匿名内部类，底层在运行时会给这个匿名内部类分配一个名字（外部类名+$数字）</li><li>jdk底层在创建匿名内部类后，立即就创建了匿名内部类的实例，并把地址返回给引用名</li><li>匿名内部类使用一次就不能再使用</li></ul><h5 id="使用注意事项和细节-v6"><a class="header-anchor" href="#使用注意事项和细节-v6"></a>使用注意事项和细节</h5><ul><li><p>匿名内部类既是一个类的定义，同时它本身也是一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>()&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br>&#125;.eat();<br><br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>()&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br>&#125;;<br>d.eat();<br></code></pre></td></tr></table></figure></li><li><p>可以直接访问外部类的所有成员</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量</p></li><li><p>作用域：仅定义它的方法或代码块中</p></li><li><p>外部类不能访问匿名内部类的成员</p></li><li><p>若外部类和匿名内部类的成员重名时，访问规则同局部内部类</p></li></ul><h5 id="最佳实践"><a class="header-anchor" href="#最佳实践"></a>最佳实践</h5><ul><li>当做实参直接传递，简洁高效</li></ul><h4 id="成员内部类"><a class="header-anchor" href="#成员内部类"></a>成员内部类</h4><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p><ul><li>可以直接访问外部类的所有成员</li><li>可以添加任意访问修饰符，它的地位就是一个成员</li><li>作用域：和外部类的其他成员一样，为整个类体</li><li>外部类通过创建内部类对象，再访问</li><li>其他外部类通过外部类实例.new 内部类（outer.new Inner()）创建内部类对象，或者通过外部类实例调用方法获取内部类实例，再访问</li><li>若外部类和成员内部类的成员重名时，访问规则同局部内部类</li></ul><h4 id="静态内部类"><a class="header-anchor" href="#静态内部类"></a>静态内部类</h4><p>成员内部类是定义在外部类的成员位置，并且有static修饰</p><ul><li>可以直接访问外部类的所有静态成员</li><li>可以添加任意访问修饰符，它的地位就是一个静态成员</li><li>作用域：和外部类的其他成员一样，为整个类体</li><li>外部类通过创建静态内部类对象，再访问</li><li>若外部类和静态内部类的成员重名时，默认遵循就近原则，若想访问外部类的成员，则可以使用 外部类名.成员 去访问</li></ul><h3 id="枚举和注解"><a class="header-anchor" href="#枚举和注解"></a>枚举和注解</h3><h4 id="枚举实现方式"><a class="header-anchor" href="#枚举实现方式"></a>枚举实现方式</h4><ul><li>自定义类实现枚举<ul><li>构造器私有化</li><li>本类内部创建一组对象</li><li>不提供set方法，枚举对象通常为只读</li><li>对外暴露对象（通过为对象添加 public final static 修饰符）</li></ul></li><li>enum关键字实现枚举</li></ul><h4 id="enum关键字实现枚举注意事项"><a class="header-anchor" href="#enum关键字实现枚举注意事项"></a>enum关键字实现枚举注意事项</h4><ul><li>默认会继承Enum类，而且是一个final类（通过javap等反编译工具可以看到）</li><li>和普通类一样可以实现接口</li><li>若使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</li><li>当有多个枚举对象时，使用<code>,</code>间隔，左右有一个分号结尾</li><li>枚举对象必须放在枚举类的行首</li></ul><h4 id="注解"><a class="header-anchor" href="#注解"></a>注解</h4><p>注解也被称为元数据，用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息。</p><p>修饰注解的注解被称为元注解，如@Target</p><h5 id="元注解"><a class="header-anchor" href="#元注解"></a>元注解</h5><ul><li>@Retention：指定注解的作用范围，SOURCE、CLASS、RUNTIME<ul><li>SOURCE：编译器使用后，直接丢弃注解</li><li>CLASS：编译器将把注解记录在class文件汇总，当运行Java程序时，JVM不会保留注解，是默认值</li><li>RUNTIME：编译器将把注解记录在class文件中，当运行Java程序时，JVM会保留注解，程序可以通过反射获取该注解</li></ul></li><li>@Target：指定注解可以在哪些地方使用</li><li>@Documented：指定该注解是否会在Javadoc体现</li><li>@Inherited：子类会继承父类注解</li></ul><h3 id="异常"><a class="header-anchor" href="#异常"></a>异常</h3><h4 id="异常类型"><a class="header-anchor" href="#异常类型"></a>异常类型</h4><h5 id="Error"><a class="header-anchor" href="#Error"></a>Error</h5><p>JVM无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。如：StackOverflowError（栈溢出）和OOM（内存溢出），Error是严重错误，程序会崩溃</p><h5 id="Exception"><a class="header-anchor" href="#Exception"></a>Exception</h5><p>因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性代码进行处理，如空指针异常、网路连接中断等。Exception分为两大类：运行时异常和编译时异常</p><h4 id="异常体系图"><a class="header-anchor" href="#异常体系图"></a>异常体系图</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/73d6924b3825e5a50df539d1c2b740f9.png" alt=""></p><h4 id="异常处理"><a class="header-anchor" href="#异常处理"></a>异常处理</h4><ul><li>try-catch-finally：捕获发生的异常，自行处理</li><li>throws：将异常抛出，交给调用方来处理，最顶级的处理者为JVM（异常抛到JVM后，输出异常信息，退出程序）</li></ul><h5 id="throws和throw区别"><a class="header-anchor" href="#throws和throw区别"></a>throws和throw区别</h5><ul><li>throws：异常处理的一种方式，声明在方法处，后面跟着异常类型</li><li>thorw：手动抛出异常的关键字，声明在方法体中，后面跟着异常对象</li></ul><h3 id="常用类"><a class="header-anchor" href="#常用类"></a>常用类</h3><h4 id="包装类"><a class="header-anchor" href="#包装类"></a>包装类</h4><p>包装类：针对8中基本数据类相应的引用类型，有了类的特点，可以调用类中的方法。</p><p>6中数字类型的包装类都是继承自Number类。</p><h5 id="装箱"><a class="header-anchor" href="#装箱"></a>装箱</h5><p>基本数据类型转为包装类，自动装箱本质是调用了包装类的<code>valueOf</code>方法</p><h5 id="拆箱"><a class="header-anchor" href="#拆箱"></a>拆箱</h5><p>包装类转为基本数据类型，自动拆箱本质是调用了包装类的<code>xxxValue</code>方法（xxx为对应基本数据类型名称）</p><h5 id="其他注意事项"><a class="header-anchor" href="#其他注意事项"></a>其他注意事项</h5><ul><li>Integer对象的比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>System.out.println(a1 == a2); <span class="hljs-comment">// false，地址不一致</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// Integer.valueOf(1)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// Integer.valueOf(1)</span><br>System.out.println(b1 == b2); <span class="hljs-comment">// true，因为Integer的缓存范围为-128~127，只要对象不是new的，地址就是一致的</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">// Integer.valueOf(128)</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">// Integer.valueOf(128)</span><br>System.out.println(c1 == c2); <span class="hljs-comment">// false，超出缓存范围，是new对象，地址不一致</span><br></code></pre></td></tr></table></figure><ul><li>同上面的原理，Short和Long对象的比较也是如此，且缓存范围也是-127~128</li><li>三元表达式有强转功能，返回值类型为两个返回值中类型精度更高的那个类型</li></ul><h4 id="String"><a class="header-anchor" href="#String"></a>String</h4><h5 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h5><ul><li>String对象用于保存字符串，也就是一组字符序列（char数组）</li><li>字符串常量使用双引号括起来的字符序列</li><li>字符串的字符使用Unicode字符编码，一个字符（不区分字母还是汉字）占两个字节</li><li>String是一个final类，不可被其他类继承，包含一个被final修饰的char数组属性（value）</li></ul><h5 id="创建方式"><a class="header-anchor" href="#创建方式"></a>创建方式</h5><h6 id="直接赋值"><a class="header-anchor" href="#直接赋值"></a>直接赋值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br></code></pre></td></tr></table></figure><p>底层逻辑：先从常量池查看是否有&quot;abcd&quot;数据空间。若有，则直接指向改空间；若无，则重新创建，然后指向。最终指向的是常量池的空间地址。</p><h6 id="调用构造器"><a class="header-anchor" href="#调用构造器"></a>调用构造器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><span class="hljs-comment">// String类的构造方法有很多，可以查看源码</span><br></code></pre></td></tr></table></figure><p>底层逻辑：先在堆中创建空间，属性value指向常量池中&quot;abcd&quot;空间。若常量池中有&quot;abcd&quot;，则value直接指向改空间；若无，则重新创建，在指向。对象最终指向的是堆中的空间地址。</p><h5 id="使用注意事项和细节-v7"><a class="header-anchor" href="#使用注意事项和细节-v7"></a>使用注意事项和细节</h5><ul><li><p>字符串常量相加赋值给对象，编译器会优化为一个字符串常量赋值给对象，对象最终指向常量池中空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-string">&quot;de&quot;</span>; <span class="hljs-comment">// 编译器优化为 String s = &quot;abcde&quot;;</span><br></code></pre></td></tr></table></figure></li><li><p>字符串变量相加赋值给对象，本质为调用StringBuilder的append和toString方法，toString方法会执行new String，对象最终指向堆中空间</p></li></ul><h4 id="StringBuffer"><a class="header-anchor" href="#StringBuffer"></a>StringBuffer</h4><h5 id="基本概念-v2"><a class="header-anchor" href="#基本概念-v2"></a>基本概念</h5><ul><li><p>继承AbstractStringBuilder类，包含一个不被final修饰的char数组属性（value）</p></li><li><p>是一个final类，不可被继承</p></li><li><p>StringBuffer代表可变的字符序列，可以对字符串内容进行增删</p></li><li><p>是可变长度的</p></li></ul><h5 id="与String的区别"><a class="header-anchor" href="#与String的区别"></a>与String的区别</h5><ul><li>String保存的是字符串常量，里面的值不能更改，每次变更实际就是更改地址，效率较低</li><li>StringBuffer保存的是字符串变量，里面的值可以更改，每次变更实际就是更新内容，不用更改地址，效率较高</li></ul><h4 id="StringBuilder"><a class="header-anchor" href="#StringBuilder"></a>StringBuilder</h4><h5 id="基本概念-v3"><a class="header-anchor" href="#基本概念-v3"></a>基本概念</h5><ul><li>继承AbstractStringBuilder类，提供一个与StringBuffer兼容的API，但不保证同步（不是线程安全的）。一般在单线程中使用，建议优先采用该类，它比StringBuffer要快</li><li>是一个可变字符序列</li></ul><h4 id="日期类"><a class="header-anchor" href="#日期类"></a>日期类</h4><ul><li>Date：第一代日期类</li><li>Calendar：第二代日期类，Calendar类引入JDK后，Date的大部分方法被弃用</li><li>LocalDate、LocalTime、LocalDateTime：第三代日期类，解决了前面两代存在的一些问题，如下<ul><li>可变性：像日期和时间这样的类应该是不可变的</li><li>偏移性：Date中的年份是从1900年开始的，而月份是从0开始</li><li>格式化：格式化只对Date有用，Calendar则不行</li><li>不是线程安全的</li><li>不能处理闰秒（每隔2天，多出1s）</li></ul></li><li>Instant：时间戳类</li></ul><h3 id="集合"><a class="header-anchor" href="#集合"></a>集合</h3><h4 id="集合的框架体系图"><a class="header-anchor" href="#集合的框架体系图"></a>集合的框架体系图</h4><h5 id="单列集合"><a class="header-anchor" href="#单列集合"></a>单列集合</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/46fe4ae5b17766368a4b9e12118bb1ee.png" alt=""></p><h5 id="双列集合（键值对）"><a class="header-anchor" href="#双列集合（键值对）"></a>双列集合（键值对）</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2c78cd2ea42533a984da4c731ed3dc90.png" alt=""></p><h4 id="List接口"><a class="header-anchor" href="#List接口"></a>List接口</h4><ul><li>List集合类中元素是有序的，且可以重复</li><li>List集合类的每个元素都有其对应的顺序索引，可以根据索引存取容器中的元素</li></ul><h5 id="ArrayList"><a class="header-anchor" href="#ArrayList"></a>ArrayList</h5><ul><li><p>内部是由数组来实现数据存储</p></li><li><p>线程不安全</p></li><li><p>允许对元素进行快速随机访问</p></li><li><p>数组的缺点是每个元素之间不能有间隔，扩容时，将已有数组的数据复制到新的存储空间</p></li><li><p>插入删除操作时，需要对数组进行复制、移动，代价较高，适合随机查找和遍历，不适合插入和删除</p></li><li><p>扩容时，数组长度的增长率为当前数组长度的50%，即新长度=老长度*1.5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul><h5 id="Vertor"><a class="header-anchor" href="#Vertor"></a>Vertor</h5><ul><li><p>内部是由数组来实现数据存储</p></li><li><p>线程安全，所以效率比ArrayList慢</p></li><li><p>扩容时，数组长度的默认增长率为当前数组长度的100%，即新长度=老长度*2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ? capacityIncrement : oldCapacity);<br></code></pre></td></tr></table></figure></li></ul><h5 id="LinkedList"><a class="header-anchor" href="#LinkedList"></a>LinkedList</h5><ul><li>内部是由双向链表存储数据</li><li>适合动态插入和删除，随机访问和遍历速度慢</li><li>可以当做堆栈、队列和双向队列使用</li></ul><h4 id="Set接口"><a class="header-anchor" href="#Set接口"></a>Set接口</h4><ul><li>Set接口对象存放元素是无序的，元素不重复</li><li>元素取出的顺序虽然不是添加的顺序，但是是固定的</li></ul><h5 id="HashSet"><a class="header-anchor" href="#HashSet"></a>HashSet</h5><ul><li>内部由HashMap实现数据存储</li><li>去重机制：<ul><li>通过<code>hashCode</code>计算出hash值</li><li>通过hash值计算出索引</li><li>若在table数组索引位置没有数据，则直接加入</li><li>若存在数据，通过<code>equals</code>方法比较，相同则不加入，不相同则不加入</li></ul></li></ul><h5 id="LinkedHashSet"><a class="header-anchor" href="#LinkedHashSet"></a>LinkedHashSet</h5><ul><li>是HashSet的子类</li><li>底层是一个LinkedHashMap，底层维护了一个数组+双向链表</li><li>使用链表维护元素的次序，使得元素看起来是以插入顺序保存的</li></ul><h5 id="TreeSet"><a class="header-anchor" href="#TreeSet"></a>TreeSet</h5><ul><li><p>内部由TreeMap实现数据存储</p></li><li><p>去重机制：</p><ul><li>若调用无参构造器创建TreeSet对象，则使用添加对象实现的Comapreable接口的<code>compareTo</code>方法进行比较，相同则不加入，不相同则加入；所以当添加对象及其父类没有实现Comapreable接口的话，程序运行会报错</li><li>若传入Comparator匿名对象到构造器来创建TreeSet对象，则使用Comparator匿名对象的<code>compare</code>方法进行比较，相同则不加入，不相同则加入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object k1, Object k2)</span> &#123;<br>    <span class="hljs-keyword">return</span> comparator==<span class="hljs-literal">null</span> ? ((Comparable&lt;? <span class="hljs-built_in">super</span> K&gt;)k1).compareTo((K)k2)<br>        : comparator.compare((K)k1, (K)k2);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用无参构造器创建对象时，元素仍然是无序的</p></li><li><p>使用一个比较器来创建对象时，元素按顺序插入，若比较后相等，则元素不会插入</p></li></ul><h4 id="Map接口"><a class="header-anchor" href="#Map接口"></a>Map接口</h4><ul><li>用于保存具有映射关系的数据</li><li>key和value可以是任何引用类型的数据</li><li>key值不允许重复，value可以重复</li><li>key和value可以为null，key为null时只能有一个</li></ul><h5 id="HashMap"><a class="header-anchor" href="#HashMap"></a>HashMap</h5><ul><li><p>底层是数组+链表+红黑树，当数组和链表达到一定长度，链表会转化为红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table; <span class="hljs-comment">// 数组</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>    <span class="hljs-keyword">final</span> K key;<br>    V value;<br>    Node&lt;K,V&gt; next; <span class="hljs-comment">// 单向链表</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>元素添加过程</p><ul><li>取得hash值，计算为索引值</li><li>在table数组中查找索引位置是否有元素</li><li>若无元素，直接加入</li><li>若有元素，调用equals比较，若相同则放弃添加，若不同，则添加到该元素尾部</li><li>当一条链表的元素个数大于等于 <code>TREEIFY_THRESHOLD</code>（默认为8），且table数组大小大于等于<code>MIN_TREEIFY_CAPACITY</code>（默认为64）时，转化为红黑树</li></ul></li><li><p>添加过程源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-comment">// hash算法，算法的主要目的是让所有元素能够均匀分布在数组上</span><br><span class="hljs-comment">// hashCode不等于hash值，hash值是由hashCode经过异或和位移计算出来的</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br><br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i; <span class="hljs-comment">// 辅助变量</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">// table数组为空，初始化数组长度为16</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        <span class="hljs-comment">// (n - 1) &amp; hash 计算出索引值</span><br>        <span class="hljs-comment">// 数组在索引位置没有元素时，将元素放到数组索引位置</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 数组在索引位置上有元素</span><br>        Node&lt;K,V&gt; e; K k; <span class="hljs-comment">// 辅助变量</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-comment">// 原有元素与新元素hash值、元素值相等，认为元素相同，不需要添加</span><br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            <span class="hljs-comment">// 原有元素为红黑树节点，将新元素挂到树上</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-comment">// 遍历到链表尾部</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 将新元素挂到原有元素尾部</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 判断是否满足转化为红黑树条件</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 在遍历链表过程中，若发现元素相同，停止遍历</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-comment">// 元素值覆盖</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数组长度初始化后为16，当已使用长度大于总长度的0.75后，按原长度的<code>2倍</code>进行扩容</p></li><li><p>不保证映射的顺序</p></li><li><p>线程不安全</p></li></ul><h5 id="Hashtable"><a class="header-anchor" href="#Hashtable"></a>Hashtable</h5><ul><li>存放的元素是键值对</li><li>key和value都不能为null</li><li>底层是数组+链表，与HashMap区别是，新插入的元素在链表的头部</li><li>线程安全</li><li>数组长度初始化为11，当已使用长度大于总长度的0.75后，按原长度的<code>2倍+1</code>进行扩容</li></ul><h5 id="Properties"><a class="header-anchor" href="#Properties"></a>Properties</h5><ul><li>是Hashtable的子类</li><li>可以从xxx.properties文件中，加载数据到Properties类对象，并进行读取和修改</li><li>通常作为配置文件对应类</li></ul><h5 id="TreeMap"><a class="header-anchor" href="#TreeMap"></a>TreeMap</h5><ul><li>底层是红黑树</li><li>使用无参构造器创建对象时，元素仍然无序</li><li>使用一个比较器来创建对象时，元素按顺序放入，若比较后相等，value替换原值</li></ul><h3 id="泛型"><a class="header-anchor" href="#泛型"></a>泛型</h3><h4 id="基本概念-v4"><a class="header-anchor" href="#基本概念-v4"></a>基本概念</h4><ul><li>泛型又称为参数化类型，解决数据类型的安全性问题</li><li>在类声明或实例化时只要指定好需要的具体的类型即可</li><li>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生类型转换异常，使得代码更加简洁、健壮</li><li>泛型的作用：可以在类声明时通过一个标识标识类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型</li></ul><h4 id="使用注意事项和细节-v8"><a class="header-anchor" href="#使用注意事项和细节-v8"></a>使用注意事项和细节</h4><ul><li>给泛型指定的数据类型只能是引用类型，不能是基本数据类型</li><li>在给泛型指定具体类型后，可以传入该类型或其子类型</li></ul><h4 id="自定义泛型"><a class="header-anchor" href="#自定义泛型"></a>自定义泛型</h4><h5 id="注意细节"><a class="header-anchor" href="#注意细节"></a>注意细节</h5><ul><li>普通成员可以使用泛型（属性、方法）</li><li>使用泛型的数组，不能初始化</li><li>静态方法中不能使用类的泛型（类加载时无法确定泛型类型）</li><li>泛型类的类型，是在创建对象时确定的</li><li>若在创建对象时，没有指定类型，默认为Object</li></ul><h4 id="自定义泛型接口"><a class="header-anchor" href="#自定义泛型接口"></a>自定义泛型接口</h4><ul><li>接口中，静态成员不能使用泛型</li><li>泛型接口的类型，在继承接口和实现接口时确定</li><li>没有指定类型，默认为Object</li></ul><h4 id="自定义泛型方法"><a class="header-anchor" href="#自定义泛型方法"></a>自定义泛型方法</h4><ul><li>泛型方法，可以定义在普通类中，也可以定义在泛型类中</li><li>当泛型方法被调用时，类型会确定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NormalClass</span> &#123;<br>    <span class="hljs-comment">// 在声明时提供泛型标识符&lt;T&gt;</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(T e)</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型的继承和通配符"><a class="header-anchor" href="#泛型的继承和通配符"></a>泛型的继承和通配符</h4><ul><li>泛型不具备继承性</li><li>&lt;?&gt;：支持任意泛型类型</li><li>&lt;? extends A&gt;：上界通配符，支持A类以及A类的子类，规定了泛型的上限</li><li>&lt;? super A&gt;：下界通配符，支持A类以及A类的父类，规定了泛型的下限</li></ul><h3 id="线程基础"><a class="header-anchor" href="#线程基础"></a>线程基础</h3><h4 id="基本概念-v5"><a class="header-anchor" href="#基本概念-v5"></a>基本概念</h4><ul><li>进程：是一个正在运行的程序</li><li>线程：线程由进程创建，一个进程可以有多个线程</li><li>单线程：同一时刻，只允许执行一个线程</li><li>多线程：同一时刻，可以执行多个线程</li><li>并发：同一时刻，多个任务交替执行，造成一种“貌似同时”的错觉，单核CPU实现的多任务就是并发</li><li>并行：同一时刻，多个任务同时执行，多核CPU可以实现并行</li></ul><h4 id="线程使用"><a class="header-anchor" href="#线程使用"></a>线程使用</h4><h5 id="创建线程的两种方式"><a class="header-anchor" href="#创建线程的两种方式"></a>创建线程的两种方式</h5><ul><li>继承Thread类，重写run方法<ul><li>若调用run方法运行线程，并没有另起一个线程，依旧是调用方进程，方法调用处会阻塞</li><li>调用start方法运行线程，会启动一个新的线程</li></ul></li><li>实现Runnable接口，重写run方法<ul><li>直接调用run方法，并没有另起一个线程</li><li>使用时将对象传递给Thread类的构造器，来创建Thread对象，调用start运行</li></ul></li></ul><h5 id="继承Thread和实现Runnable的区别"><a class="header-anchor" href="#继承Thread和实现Runnable的区别"></a>继承Thread和实现Runnable的区别</h5><ul><li>本质上没有区别，Thread也实现了Runnable接口</li><li>实现Runnable接口方式更加适合多个线程共享一个资源的情况，避免了单继承的限制</li></ul><h5 id="常用方法"><a class="header-anchor" href="#常用方法"></a>常用方法</h5><ul><li><p>start：start方法的本质是JVM底层调用该线程的start0方法</p></li><li><p>run：调用线程的run方法</p></li><li><p>getName/setName：设置线程名称</p></li><li><p>setPriority：设置线程优先级，范围1~10，越大优先级越高</p></li><li><p>sleep：线程休眠</p></li><li><p>interrupt：中断线程的休眠，不会终止线程</p></li><li><p>yield：线程的礼让；让出cpu，让其他线程执行，但礼让的时间不确定，所以不一定礼让成功</p></li><li><p>join：线程的插队；插队的线程一旦插队成功，则肯定先执行完插队线程的所有任务</p></li></ul><h5 id="用户线程和守护线程"><a class="header-anchor" href="#用户线程和守护线程"></a>用户线程和守护线程</h5><ul><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</li><li>守护线程：一般是为工作线程服务的，当所有的用户线程结束守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ul><h4 id="线程的生命周期"><a class="header-anchor" href="#线程的生命周期"></a>线程的生命周期</h4><p>可以查看Thread.State枚举类</p><ul><li>NEW：尚未启动的线程处于此状态</li><li>RUNNABLE：在Java虚拟机中执行的线程处于此状态</li><li>BLOCKED：被阻塞等待监视器锁定的线程处于此状态</li><li>WAITING：正在等待另一个线程执行特定动作的线程处于此状态</li><li>TIMED_WAITING：正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li><li>TERMINATED：已退出的线程处于此状态</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/494750bb68b1f1e3c85b26919649c85c.jpg" alt=""></p><h4 id="Synchronized"><a class="header-anchor" href="#Synchronized"></a>Synchronized</h4><h5 id="线程同步机制"><a class="header-anchor" href="#线程同步机制"></a>线程同步机制</h5><ul><li>在多线程编程中，一些数据不允许被多个线程同时访问，此时使用同步访问技术，保证数据在任何时刻，最多只有一个线程访问，以保证数据的完整性</li><li>当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</li></ul><h5 id="同步使用方式"><a class="header-anchor" href="#同步使用方式"></a>同步使用方式</h5><ul><li>同步代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (对象) &#123; <span class="hljs-comment">// 得到对象的锁，才能执行同步代码</span><br>    <span class="hljs-comment">// 同步代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>synchronized还可以放在方法声明中，表示整个方法为同步方法</li></ul><h4 id="互斥锁"><a class="header-anchor" href="#互斥锁"></a>互斥锁</h4><ul><li>对象互斥锁保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为”互斥锁“的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>使用关键字 synchronized 来与对象的互斥锁联系，当对象被 synchronized 修饰时，表明该对象在任一时刻只能由一个线程访问</li><li>同步的局限性：导致程序的执行效率要降低</li><li>非静态同步方法的锁可以是this，也可以是其他对象（要求是同一个对象）</li><li>静态同步方法的锁为当前类本身</li></ul><h4 id="释放锁的情况"><a class="header-anchor" href="#释放锁的情况"></a>释放锁的情况</h4><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步方法、同步代码块中遇到break、return</li><li>当前线程在同步方法、同步代码块中出现了未处理的异常</li><li>当前线程在同步方法、同步代码块中执行了线程对象的wait()方法，当前线程暂停，并释放锁</li></ul><h3 id="IO流"><a class="header-anchor" href="#IO流"></a>IO流</h3><p>按操作数据单位不同分为：字节流（8bit），字符流（按字符，字符的长度和文件编码有关）</p><p>按数据流的流向不同分为：输入流，输出流</p><p>按流的角色的不同分为：节点流，处理流/包装流</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/de8bae16319f296aae0773fd03536dfc.png" alt=""></p><h4 id="输入流"><a class="header-anchor" href="#输入流"></a>输入流</h4><p>字节输入流、字符输入流</p><ul><li>InputStream：字节输入流<ul><li>FileInputStream：文件字节输入流</li><li>BufferedInputStream：缓冲字节输入流</li><li>ObjectInputStream：对象字节输入流，用于从文件反序列化恢复为对象</li></ul></li><li>Reader：字符输入流<ul><li>FileReader：文件字符输入流</li><li>BufferedReader</li><li>InputStreamReader：将InputStream（字节流）包装成Reader（字符流）</li></ul></li></ul><h4 id="输出流"><a class="header-anchor" href="#输出流"></a>输出流</h4><p>字节输出流、字符输出流</p><ul><li>OutputStream：字节输出流<ul><li>FileOutputStream：文件字节输出流</li><li>BufferedOutputStream</li><li>ObjectOutputStream：对象字节输出流，用于将对象序列化保存到文件</li></ul></li><li>Writer：字符输出流<ul><li>FileWriter</li><li>BufferedWriter</li><li>OutputStreamWriter：将OutputStream（字节流）包装成Writer（字符流）</li></ul></li></ul><h4 id="节点流和处理流"><a class="header-anchor" href="#节点流和处理流"></a>节点流和处理流</h4><h5 id="节点流"><a class="header-anchor" href="#节点流"></a>节点流</h5><p>节点流可以从一个特定的数据源读写数据，FileReader、FileWriter</p><h5 id="处理流"><a class="header-anchor" href="#处理流"></a>处理流</h5><p>处理流也叫包装流，是连接已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter</p><h5 id="节点流和处理流的区别和联系"><a class="header-anchor" href="#节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h5><ul><li>节点流是底层流/低级流，直接跟数据源相接</li><li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li><li>处理流的功能主要体现<ul><li>性能的提高：主要以增加缓冲的方法来提高输入输出的效率</li><li>操作的便捷：处理流提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便</li></ul></li><li>关闭处理流时只需要关闭外层流即可</li></ul><h5 id="对象处理流注意事项和细节"><a class="header-anchor" href="#对象处理流注意事项和细节"></a>对象处理流注意事项和细节</h5><ul><li>读写顺序要一致</li><li>需要序列化和反序列化的对象需要实现Serializable接口</li><li>序列化的类中建议添加SerialVersionUID，为了提高版本兼容性</li><li>序列化对象时，默认将里面所有属性都进行序列化，但除了static和transient修饰的成员</li><li>序列化对象时，要求里面属性的类型也需要实现Serializable接口</li><li>序列化具备可继承性，也就是如果某类已经实现了Serializable接口，则它的所有子类也已经默认是实现了序列化</li></ul><h5 id="标准输入输出流"><a class="header-anchor" href="#标准输入输出流"></a>标准输入输出流</h5><ul><li>System.int：编译类型为InputStream，运行类型为BufferedInputStream</li><li>System.out：编译类型和运行类型为PrintStream</li></ul><h5 id="转换流"><a class="header-anchor" href="#转换流"></a>转换流</h5><ul><li>InputStreamReader</li><li>OutputStreamWriter</li></ul><h5 id="打印流"><a class="header-anchor" href="#打印流"></a>打印流</h5><ul><li>PrintStream</li><li>PrintWriter</li></ul><h3 id="网络编程"><a class="header-anchor" href="#网络编程"></a>网络编程</h3><p>网络通信的本质是套接字（socket）之间的通信。</p><h4 id="TCP编程"><a class="header-anchor" href="#TCP编程"></a>TCP编程</h4><h5 id="基本流程"><a class="header-anchor" href="#基本流程"></a>基本流程</h5><ul><li>服务端用new ServerSocket(port) 在指定端口监听，等待客户端连接</li><li>客户端 new Socket(ip, port) 连接指定Ip和端口</li><li>服务端调用 serverSocket.accept() 获取套接字</li><li>服务端与客户端分别通过 socket 来获取 OutputStream、InputStream，对流进行读写数据来实现通信</li></ul><h4 id="UDP编程"><a class="header-anchor" href="#UDP编程"></a>UDP编程</h4><h5 id="基本流程-v2"><a class="header-anchor" href="#基本流程-v2"></a>基本流程</h5><ul><li>核心的两个类是DatagramSocket和DatagramPacket</li><li>建立发送端、接收端</li><li>发送数据前，建立数据包/数据报，DatagramPacket对象</li><li>调用DatagramSocket的发送、接收方法</li><li>关闭DatagramSocket</li></ul><h3 id="反射"><a class="header-anchor" href="#反射"></a>反射</h3><h4 id="反射机制"><a class="header-anchor" href="#反射机制"></a>反射机制</h4><h5 id="基本概念-v6"><a class="header-anchor" href="#基本概念-v6"></a>基本概念</h5><ul><li>反射机制允许程序在执行期间借助于反射API取得任何类的内部信息（成员变量，构造器，成员方法等），并能操作对项的属性及方法；反射在设计模式和框架底层都会用到</li><li>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息，通过这个对象得到类的结构</li></ul><h5 id="可以做什么"><a class="header-anchor" href="#可以做什么"></a>可以做什么</h5><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行是调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ul><h5 id="反射主要类"><a class="header-anchor" href="#反射主要类"></a>反射主要类</h5><ul><li>java.lang.Class：代表一个类，Class对象表示某一个加载后在堆中的对象</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造方法</li></ul><h5 id="优缺点"><a class="header-anchor" href="#优缺点"></a>优缺点</h5><ul><li><p>优点：可以动态的创建和使用对象，使用灵活，没有反射机制，框架技术就失去底层支撑</p></li><li><p>缺点：使用反射基本是解释执行，对执行速度有影响</p><ul><li><p>通过关闭访问检查，提高反射的效率，Method、Field、Constructor对象都有<code>setAccessible()</code>方法，设置true时表示反射的对象在使用时取消访问检查</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/67d2fa656200f6cafa6403801a70eda0.png" alt=""></p></li></ul></li></ul><h4 id="Class类"><a class="header-anchor" href="#Class类"></a>Class类</h4><h5 id="基本概念-v7"><a class="header-anchor" href="#基本概念-v7"></a>基本概念</h5><ul><li>Class也是类，也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>对于某个类的Class类对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>Class对象存放在堆中</li><li>类的字节码二进制数据，存放在方法区，也被称为元数据</li></ul><h5 id="类的Class对象的获取"><a class="header-anchor" href="#类的Class对象的获取"></a>类的Class对象的获取</h5><ul><li>通过<code>Class.forName()</code>方法获取</li><li>通过<code>类名.class</code>获取</li><li>通过<code>对象.getClass()</code>方法获取</li><li>通过类加载器获取类的Class对象</li><li>基本数据类型获取Class对象通过<code>基本数据类型.class</code>获取</li><li>基本数据类型的包装类通过<code>包装类.TYPE</code>获取，获取到的Class对象与其基本数据类型的Class对象是同一个</li></ul><h5 id="哪些类型有Class对象"><a class="header-anchor" href="#哪些类型有Class对象"></a>哪些类型有Class对象</h5><ul><li>外部类、成员内部类、静态内部类、局部内部类、匿名内部类</li><li>接口</li><li>数组</li><li>枚举</li><li>注解</li><li>基本数据类型</li><li>void</li></ul><h4 id="类的加载"><a class="header-anchor" href="#类的加载"></a>类的加载</h4><p>反射机制是Java实现动态语言的关键，也就是通过反射实现类动态加载</p><h5 id="静态加载"><a class="header-anchor" href="#静态加载"></a>静态加载</h5><p>编译时加载相关类，如果没有则报错，依赖性太强</p><h5 id="动态加载"><a class="header-anchor" href="#动态加载"></a>动态加载</h5><p>运行时加载需要的类，如果运行时不用该类，则不报错，降低了依赖性</p><h5 id="加载时机"><a class="header-anchor" href="#加载时机"></a>加载时机</h5><ul><li>当创建对象时（new）</li><li>当子类被加载时，父类也会被加载</li><li>调用类中的静态成员时</li><li>通过反射</li></ul><h5 id="类加载过程"><a class="header-anchor" href="#类加载过程"></a>类加载过程</h5><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/998d1353111a3b418f0e5b325b608bf5.jpg" alt=""></p><ul><li>加载：将类的class文件（转化为二进制字节流）读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成</li><li>连接：将类的二进制数据合并到JRE中<ul><li>验证：对文件安全性进行校验（文件格式验证、元数据校验、字节码验证和符号引用验证）<ul><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会薇还虚拟机本身</li><li>可以使用<code>-Xverify:none</code>参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li></ul></li><li>准备：对静态变量分配内存并进行默认（对应类型的默认值）初始化，这些变量所使用的内存都将在方法区中进行分配<ul><li>使用<code>final</code>修饰的静态变量直接初始化为等号后面的值，因为final变量一旦赋值就不可变</li></ul></li><li>解析：将符号引用（字面）转为直接引用（内存地址）</li></ul></li><li>初始化：JVM负责对类进行初始化，这里主要指静态成员<ul><li>初始化阶段才真正开始执行类中定义的Java程序代码，此阶段是执行&lt;clinit&gt;()方法的过程</li><li>&lt;clinit&gt;()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有<code>静态变量的赋值</code>动作和<code>静态代码块</code>中的语句，并进行合并</li><li>虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确地<code>加锁、同步</code>，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类&lt;clinit&gt;()方法，其他线程都需要阻塞等待，直到活动线程执行&lt;clinit&gt;()完毕</li></ul></li></ul><p>类加载后的内存布局：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/ce3911d44f7bc124fc705d7104915adb.jpg" alt=""></p><h4 id="反射获取类的结构信息"><a class="header-anchor" href="#反射获取类的结构信息"></a>反射获取类的结构信息</h4><h5 id="java-lang-Class类"><a class="header-anchor" href="#java-lang-Class类"></a>java.lang.Class类</h5><ul><li>forName：得到Class对象</li><li>getName：获取全类名</li><li>getSimpleName：获取简单类名</li><li>getFields：获取所有public修饰的属性，包含本类及父类</li><li>getDeclaredFields：获取本类中所有属性</li><li>getMethods：获取所有public修饰的方法，包含本类及父类</li><li>getDeclaredMethods：获取本类中所有方法</li><li>getConstructors：获取本类所有public修饰的构造器</li><li>getDeclaredConstructors：获取本类中所有构造器</li><li>getPackage：获取包信息</li><li>getSuperClass：获取父类Class对象</li><li>getInterfaces：获取接口信息</li><li>getAnnotations：获取注解信息</li></ul><h5 id="java-lang-reflect-Field类"><a class="header-anchor" href="#java-lang-reflect-Field类"></a>java.lang.reflect.Field类</h5><ul><li>getModifiers：获取修饰符，0（默认修饰符）、1（public）、2（private）、4（protected）、8（static）、16（final），多个修饰符返回修饰符之和</li><li>getType：获取类型的Class对象</li><li>getName：获取属性名</li></ul><h5 id="java-lang-reflect-Method类"><a class="header-anchor" href="#java-lang-reflect-Method类"></a>java.lang.reflect.Method类</h5><ul><li>getModifiers：获取修饰符，同Field类</li><li>getReturnType：获取返回类型的Class对象</li><li>getName：获取方法名</li><li>getParameterTypes：获取参数类型的Class对象的数组</li></ul><h4 id="通过反射创建对象"><a class="header-anchor" href="#通过反射创建对象"></a>通过反射创建对象</h4><ul><li>调用类中public修饰的无参构造器，newInstance()</li><li>调用类中的指定构造器，先通过getConstructors()、getDeclaredConstructors()方法获取指定构造器，再调用newInstance()创建实例</li><li>当构造器是私有时，可以将构造器设置 setAccessible(true) 进行暴力破解</li></ul><h4 id="用过反射调用方法"><a class="header-anchor" href="#用过反射调用方法"></a>用过反射调用方法</h4><ul><li>通过getMethods()、getDeclaredMethods()方法获取方法对象</li><li>私有方法可以设置 setAccessible(true) 进行暴力破解</li><li>通过 m.invoke(obj, 实参列表) 对方法进行调用</li><li>若方法是静态方法 invoke方法中的obj参数可以写为null</li></ul><h4 id="代理模式与动态代理"><a class="header-anchor" href="#代理模式与动态代理"></a>代理模式与动态代理</h4><h5 id="代理设计模式的原理"><a class="header-anchor" href="#代理设计模式的原理"></a>代理设计模式的原理</h5><ul><li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象</p></li><li><p>任何对原始对原始对象的调用都要通过代理</p></li><li><p>代理对象决定是否以及何时将方法调用转到原始对象上</p></li><li><p>静态代理：代理类和目标对象的类都是在编译期间确定下来，同时每个代理类只能为一个接口服务，不利于程序的扩展</p></li></ul><h5 id="动态代理的基本概念"><a class="header-anchor" href="#动态代理的基本概念"></a>动态代理的基本概念</h5><ul><li>动态代理是指客户通过代理类来调用其他对象的方法，并且在程序运行时根据需要动态创建目标类的代理对象</li><li>使用场景：调试、远程方法调用</li><li>相比于静态代理的优点：抽象类（接口）声明的所有方法都被转移到一个集中的方法中处理，可以更加灵活和统一的处理众多方法</li></ul><h5 id="动态代理示例代码"><a class="header-anchor" href="#动态代理示例代码"></a>动态代理示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IEat</span> <span class="hljs-variable">iEat</span> <span class="hljs-operator">=</span> (IEat) ProxyFactory.getProxyInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>());<br>        iEat.eat(<span class="hljs-string">&quot;面包&quot;</span>);<br>        System.out.println(iEat.vomit());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomInvocationHandler</span>(target);<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), invocationHandler);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>        <span class="hljs-keyword">private</span> Object target;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>            <span class="hljs-built_in">this</span>.target = target;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxyFactory, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            System.out.println(<span class="hljs-string">&quot;before proxy &quot;</span> + method.getName());<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(<span class="hljs-built_in">this</span>.target, args);<br>            System.out.println(<span class="hljs-string">&quot;after proxy &quot;</span> + method.getName());<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mysql基本知识"><a class="header-anchor" href="#Mysql基本知识"></a>Mysql基本知识</h3><p>本文只是简单记录下一些mysql的知识点</p><h4 id="数据类型-v2"><a class="header-anchor" href="#数据类型-v2"></a>数据类型</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/dc2d851d0f2258884ff5c42b09af6d0c.jpg" alt=""></p><ul><li>char是固定长度字符串，最大255<code>字符</code>，实际占用空间=定义的字符数所占空间</li><li>varchar是可变长度字符串，最大65535<code>字节</code>，能存放字符数<code>取决于编码</code>，如utf8编码最大21844（(65535-3)/3）字符，1-3个字节用于记录大小，实际占用空间=内容所占字节+长度记录所占的1-3个字节</li><li>char(4)、varchar(4)中的4表示字符数（不区分字母汉字），不是字节</li></ul><h4 id="查询"><a class="header-anchor" href="#查询"></a>查询</h4><ul><li><p>多表查询：多表查询时至少要有查询表数量-1个条件，避免产生笛卡尔积</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1, t2 <span class="hljs-keyword">where</span> t1.tid <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure></li><li><p>自连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.name <span class="hljs-keyword">as</span> name1, b.name <span class="hljs-keyword">as</span> name2 <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">as</span> a, t1 <span class="hljs-keyword">as</span> b <span class="hljs-keyword">where</span> a.pid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> tid <span class="hljs-keyword">from</span> t2 <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span>);<br><span class="hljs-comment">-- 子查询作为临时表</span><br><span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> tid, <span class="hljs-built_in">max</span>(num) <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> tid) <span class="hljs-keyword">as</span> tmp, t1<br><span class="hljs-keyword">where</span> tmp.tid <span class="hljs-operator">=</span> t1.tid <span class="hljs-keyword">and</span> tmp.num <span class="hljs-operator">=</span> t1.num;<br></code></pre></td></tr></table></figure></li><li><p>合并查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- union all 结果数量为多个查询结果数之和，不会去重</span><br><span class="hljs-keyword">select</span> name, age <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%王%&#x27;</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">select</span> name, age <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">18</span>;<br><br><span class="hljs-comment">-- union 查询结果会去重（根据列值都相同进行去重）</span><br><span class="hljs-keyword">select</span> name, age <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%王%&#x27;</span><br><span class="hljs-keyword">union</span>  <br><span class="hljs-keyword">select</span> name, age <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure></li><li><p>外连接</p><ul><li><p>左外连接：左侧表完全显示（左侧表与右侧表没有关联的数据也显示）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> l.name, r.name <span class="hljs-keyword">from</span> l <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> r <span class="hljs-keyword">on</span> l.rid <span class="hljs-operator">=</span> r.id;<br></code></pre></td></tr></table></figure></li><li><p>右外连接：右侧表完全显示（右侧表与左侧表没有关联的数据也显示）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> l.name, r.name <span class="hljs-keyword">from</span> l <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> r <span class="hljs-keyword">on</span> l.rid <span class="hljs-operator">=</span> r.id;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="索引"><a class="header-anchor" href="#索引"></a>索引</h4><p>好的索引能大大提高查询速度；索引本身也是占用空间的</p><h5 id="索引的原理"><a class="header-anchor" href="#索引的原理"></a>索引的原理</h5><p>字段不加索引时，查询该字段会进行全表扫描，所以会慢</p><p>创建索引时（btree、hash），会形成一个索引的数据结构，如b+树或者hash表，然后存储起来，从而提高查询速度</p><p>但是对表进行DML（修改、删除、新增）时会对索引进行维护，进而影响速度</p><h5 id="索引类型"><a class="header-anchor" href="#索引类型"></a>索引类型</h5><ul><li>主键索引：primary key</li><li>唯一索引：unique</li><li>普通索引：index</li><li>全文索引：fulltext，适用于MyISAM，一般不使用</li></ul><h5 id="索引方法"><a class="header-anchor" href="#索引方法"></a>索引方法</h5><ul><li>B+Tree</li><li>hash</li></ul><h5 id="创建索引的情况"><a class="header-anchor" href="#创建索引的情况"></a>创建索引的情况</h5><ul><li>较频繁的作为查询条件的字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</li><li>更新非常频繁的子弹不适合创建索引</li><li>不会出现在where子句中的字段不该创建索引</li></ul><h4 id="事务隔离级别"><a class="header-anchor" href="#事务隔离级别"></a>事务隔离级别</h4><h5 id="基本概念-v8"><a class="header-anchor" href="#基本概念-v8"></a>基本概念</h5><ul><li><p>定义了事务与事务之间的隔离程度</p></li><li><p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性</p></li><li><p>如果不考虑隔离性，可能会引发如下问题：</p><ul><li>脏读：当一个事务读取另一个事务尚未提交的改变时，产生脏读</li><li>不可重复读：同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复度（说的是变没变化的问题：原来是A,现在却变为了B,则为不可重复读）</li><li>幻读：同一查询在同一事务中多次进行，由于其他事务所做的插入操作，每次返回不同的结果集，此时发生幻读（说的是存不存在的问题：原来不存在的,现在存在了,则是幻读）</li></ul></li></ul><h5 id="隔离级别"><a class="header-anchor" href="#隔离级别"></a>隔离级别</h5><table><thead><tr><th>隔离级别</th><th>脏读</th><th>可不重复读</th><th>幻读</th><th>加锁读</th></tr></thead><tbody><tr><td>读未提交 Read uncommitted</td><td>√</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>读已提交 Read committed</td><td>×</td><td>√</td><td>√</td><td>不加锁</td></tr><tr><td>可重复读 Repeatable read</td><td>×</td><td>×</td><td>√</td><td>不加锁</td></tr><tr><td>可串行化 Serializable</td><td>×</td><td>×</td><td>×</td><td>加锁</td></tr></tbody></table><p>可重复读一般不会出现幻读，当B事务插入数据并提交后，A事务执行了没有条件的update，这个update会作用在所有的行上（包括B事务插入的数据），此时A事务会产生幻读</p><h4 id="事务ACID"><a class="header-anchor" href="#事务ACID"></a>事务ACID</h4><ul><li>原子性（Atomicity）：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li>一致性（Consistency）：事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li><li>隔离性（Isolation）：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要互相隔离</li><li>持久性（Durability）：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</li></ul><h4 id="表类型与存储引擎"><a class="header-anchor" href="#表类型与存储引擎"></a>表类型与存储引擎</h4><ul><li>mysql的表类型由存储引擎决定，主要包括MyISAM、InnoDB、Memory等</li><li>数据表主要支持六种类型，CSV、Memory、ARCHIVE、MRG_MYISAM、MyISAM、InnoDB</li><li>以上六种类型可以分为两类<ul><li>事务安全型：InnoDB</li><li>非事务安全型：其余都是</li></ul></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看所有存储引擎<br><span class="hljs-keyword">SHOW</span> ENGINES;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/fae09d356bd04bbcbced7a6bcdcb78ef.png" alt=""></p><h5 id="特点"><a class="header-anchor" href="#特点"></a>特点</h5><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th><th>ARCHIVE</th></tr></thead><tbody><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>非常高</td></tr><tr><td>事务安全</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>全文索引</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>存储限制</td><td>64TB</td><td>没有</td><td>有</td><td>没有</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>哈希索引</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>数据缓存</td><td>支持</td><td></td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>非常低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td></tr><tr><td>支持外键</td><td>支持</td><td></td><td></td><td></td></tr></tbody></table><h3 id="JDBC和连接池"><a class="header-anchor" href="#JDBC和连接池"></a>JDBC和连接池</h3><h4 id="JDBC概述"><a class="header-anchor" href="#JDBC概述"></a>JDBC概述</h4><p>JDBC为不同的数据库提供了统一的接口，为使用者屏蔽了细节问题；使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，从而完成对数据库的各种操作。</p><h4 id="JDBC-API"><a class="header-anchor" href="#JDBC-API"></a>JDBC API</h4><p>JDBC API是一系列的接口，它统一和规范了应用程序与数据库的连接、执行SQL语句，并得到返回结果等各类操作，相关类和接口在java.sql和javax.sql中</p><h5 id="JDBC程序编写步骤"><a class="header-anchor" href="#JDBC程序编写步骤"></a>JDBC程序编写步骤</h5><ul><li>注册驱动：加载Driver类</li><li>获取连接：得到Connection</li><li>执行增删改查：发送sql给数据库执行</li><li>释放资源：关闭相关连接</li></ul><h5 id="DriverManager"><a class="header-anchor" href="#DriverManager"></a>DriverManager</h5><p>获取连接</p><h5 id="Connection接口"><a class="header-anchor" href="#Connection接口"></a>Connection接口</h5><p>创建Statement对象、或PreparedStatement对象</p><h5 id="Statement接口"><a class="header-anchor" href="#Statement接口"></a>Statement接口</h5><ul><li>Statement对象用于执行静态sql语句并返回其生成的结果的对象</li><li>主要有三类<ul><li>Statement：存在sql注入问题</li><li>PreparedStatement：预处理，大大减少编译次数，效率较高；解决sql注入问题</li><li>CallableStatement：可以使用存储过程</li></ul></li><li>executeUpdate(sql)：执行DML语句，返回影响的行数</li><li>executeQuery(sql)：执行查询，返回ResultSet对象</li><li>execute(sql)：执行任意sql，返回布尔值</li></ul><h5 id="PreparedStatement接口"><a class="header-anchor" href="#PreparedStatement接口"></a>PreparedStatement接口</h5><ul><li>executeUpdate()：执行DML语句，返回影响的行数</li><li>executeQuery()：执行查询，返回ResultSet对象</li><li>execute()：执行任意sql，返回布尔值</li><li>setXXX(占位符索引,占位符的值)：索引从1开始，解决sql注入问题</li></ul><h5 id="ResultSet"><a class="header-anchor" href="#ResultSet"></a>ResultSet</h5><ul><li><p>获取到对象时在列名行</p></li><li><p>next()：向下移动一行，若没有下一行，返回false</p></li><li><p>previous()：向前移动一行</p></li><li><p>getXXX(列的索引或列名)：索引从1开始，获取列的值</p></li><li><p>和连接关联，若连接被关闭则无法使用</p></li></ul><h5 id="事务"><a class="header-anchor" href="#事务"></a>事务</h5><p>创建Connection时，默认是自动提交事务的；通过 setAutoCommit(false) 关闭自动提交事务；通过 commit() 和 rollback() 方法手动提交事务和回滚事务</p><h5 id="批处理"><a class="header-anchor" href="#批处理"></a>批处理</h5><p>当需要批量插入或批量更新时，可以采用jdbc批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理，通常情况下比单独提交处理更有效率；若要使用批处理功能需要在jdbc连接中加入 rewriteBatchedStatements=true 参数；通常与 PreparedStatement 一起搭配使用，可以减少编译次数，减少运行次数，效率大大提升。</p><ul><li><p>批量包底层是一个ArrayList，按1.5倍扩容</p></li><li><p>addBatch()：添加需要批量处理的sql语句或参数到批处理包</p></li><li><p>execteBatch()：执行批量处理语句</p></li><li><p>clearBatch()：清空批处理包中的语句</p></li></ul><h4 id="连接池"><a class="header-anchor" href="#连接池"></a>连接池</h4><p>使用传统方式连接数据库，不能控制创建的连接数量，若连接过多，可能会导致内存泄露，mysql服务崩溃</p><p>使用数据库连接池技术解决数据库连接问题</p><h5 id="基本介绍-v2"><a class="header-anchor" href="#基本介绍-v2"></a>基本介绍</h5><ul><li>预先在缓冲池中放入一定数量的连接，当需要建立连接时，只需从缓冲池中取出一个连接，使用完毕后再放回去</li><li>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的连接，而不是重新创建一个</li><li>当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中</li><li>在JDBC中使用 javax.sql.DataSource 来表示，该接口由第三方提供实现</li></ul><h5 id="c3p0"><a class="header-anchor" href="#c3p0"></a>c3p0</h5><p>速度相对较慢，稳定性不错</p><h5 id="druid"><a class="header-anchor" href="#druid"></a>druid</h5><p>阿里开源的数据库连接池，功能全面，扩展性较好，监控完善</p><h5 id="HikariCP"><a class="header-anchor" href="#HikariCP"></a>HikariCP</h5><p>性能十分优异，号称java平台最快的数据库连接池；在并发较高的情况下，性能基本上没有下降</p><h3 id="Java8新特性"><a class="header-anchor" href="#Java8新特性"></a>Java8新特性</h3><ul><li>Lambda表达式</li><li>函数式接口（Functional）：只有一个方法</li><li>方法引用与构造器引用</li><li>强大的Stream API</li><li>Optional类</li></ul><h4 id="Lambda表达式"><a class="header-anchor" href="#Lambda表达式"></a>Lambda表达式</h4><h5 id="格式说明"><a class="header-anchor" href="#格式说明"></a>格式说明</h5><ul><li>(lambda形参列表) -&gt; lambda体</li><li>-&gt; 被称为lambda操作符或箭头操作符</li><li>左边的lambda形参列表其实就是接口中的抽放方法的形参列表</li><li>lambda体其实就是重写的抽象方法的方法体</li></ul><h5 id="Lambda表达式的使用"><a class="header-anchor" href="#Lambda表达式的使用"></a>Lambda表达式的使用</h5><ul><li>lambda形参列表的参数类型可以省略（类型推断）</li><li>若lambda形参列表只有一个参数，一对小括号可以省略</li><li>lambda体应该使用一对花括号包裹</li><li>若lambda体只有一条执行语句，可以省略花括号和return关键字</li></ul><h4 id="函数式接口"><a class="header-anchor" href="#函数式接口"></a>函数式接口</h4><h5 id="基本概念-v9"><a class="header-anchor" href="#基本概念-v9"></a>基本概念</h5><ul><li>只有一个抽象方法的接口，称为函数式接口</li><li>可以通过Lambda表达式来创建该接口的对象</li><li>在一个接口上使用 @FunctionalInterface 注解，可以检查它是否是一个函数式接口</li><li>在 java.util.function 包下定义了Java8的丰富的函数式接口</li></ul><h5 id="核心函数式接口"><a class="header-anchor" href="#核心函数式接口"></a>核心函数式接口</h5><table><thead><tr><th>函数式接口</th><th>说明</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt;T&gt;</td><td>消费型接口</td><td>T</td><td>void</td><td>对类型T的对象应用操作</td></tr><tr><td>Supplier&lt;T&gt;</td><td>供给型接口</td><td>无</td><td>T</td><td>返回类型为T的对象</td></tr><tr><td>Function&lt;T, R&gt;</td><td>函数型接口</td><td>T</td><td>R</td><td>对类型T的对象应用操作，并返回结果；结果是R类型的对象</td></tr><tr><td>Predicate&lt;T&gt;</td><td>断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值</td></tr></tbody></table><h4 id="方法引用与构造器引用"><a class="header-anchor" href="#方法引用与构造器引用"></a>方法引用与构造器引用</h4><ul><li>当要传递给lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例，所以方法引用也是函数式接口的实例</li><li>使用格式：类（或对象）<code>::</code>方法名<ul><li>对象::非静态方法</li><li>类::静态方法</li><li>类::非静态方法</li></ul></li></ul><h4 id="Stream-API"><a class="header-anchor" href="#Stream-API"></a>Stream API</h4><ul><li>集合讲的是数据（与内存打交道），Stream讲得是计算（与CPU打交道）</li><li>Stream自己不存储元素，数据依旧在集合中</li><li>Stream不会改变源对象，但他可以返回一个持有结果的新Stream</li><li>Stream操作分为三个步骤，创建、中间操作、终止操作</li><li>Stream操作是延迟执行的，这意味着他们会等到需要结果（执行终止操作）的时候才执行</li></ul><h5 id="Stream的创建"><a class="header-anchor" href="#Stream的创建"></a>Stream的创建</h5><ul><li><p>通过集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users = selectByOrgId();<br><span class="hljs-comment">// 顺序流</span><br>Stream&lt;User&gt; stream = users.stream();<br><span class="hljs-comment">// 并行流</span><br>Stream&lt;User&gt; parallelStream = users.parallelStream();<br></code></pre></td></tr></table></figure></li><li><p>通过数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(arr);<br></code></pre></td></tr></table></figure></li><li><p>通过Stream.of方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p>创建无限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无限流之迭代方法，获取前10个偶数</span><br>Stream.iterate(<span class="hljs-number">2</span>, i -&gt; i + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><span class="hljs-comment">// 无限流之生成方法，获取10个随机数</span><br>Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><span class="hljs-comment">// 上面代码中的 limit(10) 为中间操作；forEach 为终止操作</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="Stream的中间操作"><a class="header-anchor" href="#Stream的中间操作"></a>Stream的中间操作</h5><ul><li>筛选与切片<ul><li>filter(Predicate p)：接收lambda，从流中排除某些元素</li><li>limit(n)：截断流，使其元素不超过给定数量</li><li>skip(n)：跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，返回一个空流</li><li>distinct：筛选，同过流中元素的 hashCode() 和 equals() 去除重复元素</li></ul></li><li>映射<ul><li>map(Function f)：接收一个函数作为参数，将元素转换为其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素</li><li>flatMap(Function f)：接收一个函数作为参数，将流中的每一个值都换成另一个流，然后把所有流连接成一个流（简单理解为二维数组降为一维数组，降维展开）</li><li>mapToDouble(ToDoubleFunction f)</li><li>mapToInt(ToIntFunction f)</li><li>mapToLong(ToLongFcuntion f)</li></ul></li><li>排序<ul><li>sorted()：自然排序，调用流中元素实现Comparable接口的compareTo方法进行比较</li><li>sorted(Comparator c)：定制排序</li></ul></li></ul><h5 id="Stream的终止操作"><a class="header-anchor" href="#Stream的终止操作"></a>Stream的终止操作</h5><ul><li>匹配与查找<ul><li>forEach(Consumer c)：遍历元素</li><li>allMatch(Predicate p)：检查是否匹配所有元素</li><li>anyMatch(Predicate p)：检查是否至少匹配一个元素</li><li>noneMatch(Predicate p)：检查是否没有匹配所有元素</li><li>findFirst()：返回第一个元素</li><li>findAny()：返回当前流中的任意元素</li><li>count()：返回流中元素的总个数</li><li>max(Comparator c)：返回流中最大值</li><li>min(Comparator c)：返回流中最小值</li></ul></li><li>归约<ul><li>reduce(T identity, BinaryOperator b)：将流中元素反复结合起来，得到一个值，返回T的对象</li><li>reduce(BinaryOperator b)：将流中元素反复结合起来，得到一个值，返回Optional&lt;T&gt;对象</li></ul></li><li>收集<ul><li>collect(Collector c)：将流转化为其他形式，接收一个Collector接口的实现，用于给Stream中元素做汇总的方法<ul><li>Collectors类提供了很多静态方法，可以方便得创建常见收集器实例</li></ul></li></ul></li></ul><h4 id="Optional类"><a class="header-anchor" href="#Optional类"></a>Optional类</h4><p>使用Optional类来尽可能的避免空指针问题</p><h5 id="常用方法-v2"><a class="header-anchor" href="#常用方法-v2"></a>常用方法</h5><ul><li>Optional.of(T t)：创建一个Optional对象，t不能为空</li><li>Optional.empty()：创建一个空的Optional对象</li><li>Optional.ofNullable(T t)：创建一个Optional对象，t可以为空</li><li>boolean isPresent()：判断是否包含对象</li><li>void ifPresent(Consumer c)：若有值，就执行Consumer接口实现代码，并且该值会作为参数传递给它</li><li>T get()：若包含值，返回该值，否则抛异常</li><li>T orElse(T other)：若有值则将其返回，否则返回指定的other对象</li><li>T orElseGet(Supplier&lt;? extends T&gt; s)：若有值则将其返回，否则返回由Supplier接口实现提供的对象</li><li>T orElseThrow(Supplier&lt;? extends X&gt; s)：若有值则将其返回，否则抛出由Supplier接口实现提供的异常</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习一</title>
      <link href="/posts/2373592892/"/>
      <url>/posts/2373592892/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM学习一"><a class="header-anchor" href="#JVM学习一"></a>JVM学习一</h1><h2 id="什么是JVM？"><a class="header-anchor" href="#什么是JVM？"></a>什么是JVM？</h2><p>java virtual machine：java虚拟机</p><p>特点：</p><ul><li>一次编写，到处运行（跨平台）</li><li>自动内存管理，垃圾回收功能（gc）</li></ul><p>运行图：</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/de1b030ea73fe9aaa02ee35bf36f778f.png" alt=""></p><ul><li>源代码编译为字节码文件</li><li>类加载器加载到JJVM内存中</li><li>类放在方法区，类的实例对象放在堆</li><li>实例对象调用方法时会用到虚拟机栈、程序计数器、本地方法栈</li><li>方法执行时，每行代码由执行引擎中的解释器逐行执行</li><li>方法中被频繁调用的代码会由即时编译器优化执行</li><li>垃圾回收会对堆中不再使用的对象回收</li><li>和操作系统交互时使用本地方法接口来调用操作系统提供的方法</li></ul><h2 id="JVM内存结构"><a class="header-anchor" href="#JVM内存结构"></a>JVM内存结构</h2><h3 id="程序计数器"><a class="header-anchor" href="#程序计数器"></a>程序计数器</h3><blockquote><p>program counter register 程序计数器（寄存器）</p></blockquote><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>    System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译Java字节码文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">0:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String hello world!</span><br> <span class="hljs-attr">2:</span> <span class="hljs-string">astore_1</span><br> <span class="hljs-attr">3:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br> <span class="hljs-attr">6:</span> <span class="hljs-string">aload_1</span><br> <span class="hljs-attr">7:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="hljs-attr">10:</span> <span class="hljs-string">return</span><br></code></pre></td></tr></table></figure><p>左边为二进制字节码，中间为jvm指令</p><p>解释器读取指令解释为机器码，机器码再给CPU执行</p><p><strong>程序计数器作用：</strong></p><ul><li>记住下一条jvm指令的执行地址</li></ul><p>程序计数器特点：</p><ul><li>线程私有</li><li>不会存在内存溢出</li></ul><h3 id="虚拟机栈"><a class="header-anchor" href="#虚拟机栈"></a>虚拟机栈</h3><blockquote><p>Java virtual machine stacks</p></blockquote><ul><li>每个线程运行时所需要的内存，称为虚拟机栈</li><li>每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的方法</li></ul><p><em>按方法的调用关系入栈出栈</em></p><p>在IDEA中查看虚拟机栈（debug模式下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    function1();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function1</span><span class="hljs-params">()</span> &#123;<br>    function2();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function2</span><span class="hljs-params">()</span> &#123;<br>    function3();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function3</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;function3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/fcd234f4fcd1ed5a657e3687324946f5.png" align="left"/><p><em>配置文件中</em>*-Xss**来设置栈内存*</p><p>方法中的局部变量线程安全</p><p><strong>栈内存溢出：</strong></p><ul><li>栈帧过多（递归没有出口）</li><li>栈帧多大（局部变量太多？）</li></ul><p><strong>线程运行诊断</strong></p><ol><li>cpu占用过高<ol><li>top命令定位cpu高占用进程id</li><li>ps H -eo pid,tid,%cpu | grep 进程id 命令定位cpu占用高的线程id</li><li>jstack 进程id 列出所有的线程信息，把线程id转换为16进制来定位具体的线程</li><li>分析有问题的线程代码来解决问题</li></ol></li></ol><h3 id="本地方法栈"><a class="header-anchor" href="#本地方法栈"></a>本地方法栈</h3><p>与 Java 虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native 方法服务。</p><p>native方法是Java通过JNI直接调用本地C/C++库。</p><p>线程私有。</p><h3 id="堆"><a class="header-anchor" href="#堆"></a>堆</h3><blockquote><p>通过new关键字创建的对象都会使用堆内存</p></blockquote><ul><li>线程共享，堆中的对象需要考虑线程安全的问题</li><li>有垃圾回收机制</li></ul><h4 id="堆内存溢出"><a class="header-anchor" href="#堆内存溢出"></a>堆内存溢出</h4><p>outofmemoryerror: java heap space</p><p>-Xmx设置堆空间</p><h4 id="堆内存诊断"><a class="header-anchor" href="#堆内存诊断"></a>堆内存诊断</h4><ul><li>jps：刹那可能当前系统中有哪些java进程</li><li>jmap：查看堆内存占用情况</li><li>jconsole：图形界面，多功能监测工具，可以连续监测</li><li>jvisualvm</li></ul><h3 id="方法区"><a class="header-anchor" href="#方法区"></a>方法区</h3><blockquote><p>在虚拟机启动时被创建，逻辑上是堆的一部分</p></blockquote><h4 id="方法区内存溢出"><a class="header-anchor" href="#方法区内存溢出"></a>方法区内存溢出</h4><ol><li>1.8以前<strong>永久代</strong>内存溢出：outofmemoryerror: premgen space</li><li>1.8以后<strong>元空间</strong>内存溢出：outofmemoryerror: metaspace</li></ol><h4 id="运行时常量池"><a class="header-anchor" href="#运行时常量池"></a>运行时常量池</h4><blockquote><p>常量池就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><p>运行时常量池，常量池是.class文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p></blockquote><p>javap -v .class文件 命令反编译查看类的字节码文件</p><p>类的字节码文件包含类基本信息、常量池、类方法定义（包含了虚拟机指令）的信息。</p><h4 id="StringTable"><a class="header-anchor" href="#StringTable"></a>StringTable</h4><ul><li>常量池中的字符串仅是符号，第一次用到时才变为对象</li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串变量拼接的原理是StringBuilder</li><li>字符串常量拼接的原理是编译期优化</li><li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池，会把串池中的对象返回</li></ul><h2 id="垃圾回收"><a class="header-anchor" href="#垃圾回收"></a>垃圾回收</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux知识分享</title>
      <link href="/posts/449031110/"/>
      <url>/posts/449031110/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux知识分享"><a class="header-anchor" href="#Linux知识分享"></a>Linux知识分享</h1><h2 id="操作系统"><a class="header-anchor" href="#操作系统"></a>操作系统</h2><ol><li><p>什么是操作系统？</p><blockquote><p>操作系统(Operating System，简称OS)是管理计算机硬件资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。————摘自百度百科</p></blockquote></li><li><p>操作系统有哪些？</p><p>目前使用比较多的有WINDOWS <img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e2242ffd0787ce3fefc15506419797e6.png" style="zoom:5%;" />，LINUX  <img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/56e8869444921a6ae88f47fdd3abbc1d.jpg" style="zoom:25%;" />，MAC  <img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/d0e738a0816e34cc3134b8a1e81cdb15.png" style="zoom:1.5%;" />，UNIX。</p></li><li><p>各操作系统间的关系</p><p>不管是WINDOWS操作系统、LINUX系统还是苹果操作系统，甚至包括操作系统的鼻祖UNIX操作系统，最早都是用C语言编写的。</p><p><img src="http://www.gonet.com.cn/~editor/eweditor/uploadfile/20171027141729471.png" alt="区别"></p><p>WINDOWS，LINUX，MAC的诞生都或多或少的借鉴了UNIX。</p><p>UNIX是一种<code>分时操作系统</code>。</p><blockquote><p>说明：分时操作系统使一台计算机可以同时为<code>多个用户</code>服务，连接计算机的终端用户交互式发出命令，操作系统采用时间片轮转的方式处理用户的服务请求并在终端上显示结果（操作系统将CPU的时间划分成若干个片段，称为时间片）。操作系统以时间片为单位，轮流为每个终端用户服务，每次服务一个时间片。</p></blockquote><p>UNIX系统在结构上分为核心程序(<strong>kernel</strong>)和外围程序(<strong>shell</strong>)两部分。</p><p>核心部分承担系统内部的各个模块的功能，即处理机和进程管理、存储管理、设备管理和文件系统。</p><p>外围部分包括系统的用户界面、系统实用程序以及应用程序，用户通过外围程序使用计算机。</p></li><li><p>各操作系统优缺点：</p><table><thead><tr><th>操作系统</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Windows</td><td>啥都有，啥都会</td><td>经常出现你不想要的东西</td></tr><tr><td>Linux</td><td>你让它干嘛，它就能干嘛。</td><td>容易折腾坏</td></tr><tr><td>Mac</td><td>稳定，好看</td><td>得按它的规则来</td></tr></tbody></table></li></ol><h2 id="Linux的诞生"><a class="header-anchor" href="#Linux的诞生"></a>Linux的诞生</h2><p>Linux 内核最初是由李纳斯•托瓦兹（<strong>Linus Torvalds</strong>）在赫尔辛基大学读书时出于个人爱好而编写的，当时他觉得教学用的迷你版 UNIX 操作系统 Minix 太难用了，于是决定自己开发一个操作系统。</p><p>Linus Torvalds没有保留 Linux 源代码的版权，公开了代码，并邀请他人一起完善 Linux。与 Windows 及其他有专利权的操作系统不同，Linux 开放源代码，任何人都可以免费使用它。</p><p>Linux的logo是一只企鹅。</p>   <img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/56e8869444921a6ae88f47fdd3abbc1d.jpg" style="zoom:100%;" align="left" /><p>为什么选择企鹅，坊间流传一种说法：</p><blockquote><p>企鹅是南极洲的标志性动物，根据国际公约，南极洲为全人类共同所有，不属于世界上的任何国家，可国家都无权将南极洲纳入其版图。Linux 选择企鹅图案作为 Logo，其含义是：开放源代码的 Linux 为全人类共同所有，可公司无权将其私有。</p></blockquote><h2 id="Linux系统结构"><a class="header-anchor" href="#Linux系统结构"></a>Linux系统结构</h2><p>Linux系统的结构可以概括为4个部分：内核、shell、文件系统和应用程序。</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8223aa8845e337c624848747d436a688.png" style="zoom:80%;" /><p>这个结构与UNIX基本上是一致的，所以UNIX和Linux之间可以说是父子关系。</p><h3 id="内核"><a class="header-anchor" href="#内核"></a>内核</h3><p><strong>内核是操作系统的核心</strong>，具有很多最基本功能，如虚拟内存、多任务、共享库、需求加载、可执行程序和TCP/IP网络功能。Linux内核的模块分为以下几个部分：存储管理、CPU和进程管理、文件系统、设备管理和驱动、网络通信、系统的初始化和系统调用等。</p><h3 id="Shell"><a class="header-anchor" href="#Shell"></a>Shell</h3><p>Shell 层是与用户直接交互的界面。用户可以在提示符下输入命令行，由 Shell 解释执行并输出相应结果或者有关信息，所以我们也把 Shell 称作命令解释器，利用系统提供的丰富命令可以快捷而简便地完成许多工作。</p><h3 id="文件系统"><a class="header-anchor" href="#文件系统"></a>文件系统</h3><p>在Linux中一切皆文件。</p><p>Linux中的文件类型：</p><p>a) 普通文件(-)</p><p>js、class、html等这些文件类型都属于普通文件，Linux用户可以根据访问权限对普通文件进行查看、更改、删除。</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/3f4dfe284fb6cf08e67113cee2a0a7dc.png" align="left" /><p>b) 目录文件(d)</p><p>目录文件包含了各自目录下的文件名和指向这些文件的指针。</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/76bacaf6315459d887f74478d9059c78.png" align="left" /><p>c) 符号链接文件(l)</p><p>类似于windows中的快捷方式，通常称为软连接。</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/0435bbb3c623ce9290e2ff0b41a74fd8.png" align="left"/><p>d) 设备文件(b/c)</p><p>包括块设备文件(b)</p><img src="C:\Users\zhuweitung\AppData\Roaming\Typora\typora-user-images\image-20200711151836544.png" alt="image-20200711151836544" align="left" /><p>和字符设备文件©</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/6f955e8970d41c1e21c837e5edb7dc14.png" align="left" /><p>这些设备文件一般都在/dev/目录下。</p><p>e) 管道文件§</p><p>管道文件主要用户进程间的通讯。进程关闭管道文件也会关闭。</p><p>…</p><p>linux中的文件是没有拓展名的，一个文件能不能被执行与它是否可执行的属性有关。</p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/0c4e5523325acc1a4aca8f1d438b0bc8.png" align="left" /><p>上图中第一位为文件类型，“-”表示此文件为普通文件；</p><p>第一组&quot;rwx&quot;表示文件创建用户的权限，&quot;r&quot;表示有读权限，&quot;w&quot;表示有写权限，“x&quot;表示有执行权限，那一项为”-&quot;表示没有该权限；</p><p>第二组&quot;rwx&quot;表示文件创建用户所属组的权限；</p><p>第三组&quot;rwx&quot;表示其他用户的权限；</p><p><strong>Linux的目录结构：</strong></p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/e896383fbf9d675b6a478cb6aa7a2030.png" alt=""></p><ul><li><p>bin (binaries)存放二进制可执行文件</p></li><li><p>sbin (super user binaries)存放二进制可执行文件，只有root才能访问</p></li><li><p>etc (etcetera)存放系统配置文件</p></li><li><p>usr (unix shared resources)用于存放共享的系统资源</p></li><li><p>home 存放用户文件的根目录</p></li><li><p>root 超级用户目录</p></li><li><p>dev (devices)用于存放设备文件</p></li><li><p>lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块</p></li><li><p>mnt (mount)系统管理员安装临时文件系统的安装点</p></li><li><p>boot 存放用于系统引导时使用的各种文件</p></li><li><p>tmp (temporary)用于存放各种临时文件</p></li><li><p>var (variable)用于存放运行时需要改变数据的文件</p></li></ul><h2 id="Linux发行版"><a class="header-anchor" href="#Linux发行版"></a>Linux发行版</h2><p>以Linux内核为中心，再集成搭配各种各样的系统管理软件或应用工具软件组成一套完整的操作系统，如此的组合便称为Linux发行版。</p><p>常见的Linux发行版有Debian、centos、Ubuntu、Fedora、deepin、manjaro、Linux mint等。</p><h3 id="Debian"><a class="header-anchor" href="#Debian"></a>Debian</h3><ul><li>免费，最符合开源精神的发行版，默认不包含如何专有驱动</li><li>软件包通常选择稳定的版本而不是最新的</li><li>系统的开发维护由社区驱动</li><li><strong>apt</strong>包管理</li><li>图形化安装</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/8c52b07ddd2df529030aa14982ac0932.png" alt=""></p><h3 id="Ubuntu"><a class="header-anchor" href="#Ubuntu"></a>Ubuntu</h3><p>比较热门的Linux发行版。</p><ul><li>安装简单</li><li>unity3d图形界面</li><li>有些驱动支持较好，比如显卡驱动</li><li>社区活跃，遇到问题能够很快找到解决方案</li><li>版本更新快</li><li><strong>apt</strong>包管理</li></ul><p>Ubuntu还有一些衍生版，主要是桌面环境不一样。</p><ol><li><p>Ubuntu</p><p>基于Gnome</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/c36154e9654560b411461864a050c757.png" alt=""></p></li><li><p>Kubuntu</p><p>基于KDE</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/1ed4e4d659aa66a832f6e13ec36f7109.png" alt=""></p></li><li><p>Lubuntu</p><p>基于LXDE</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/5202fcaad65392415d7160c5af6504e3.png" alt=""></p></li><li><p>Xubuntu</p><p>基于Xfce</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/7d604bbb69f72d1a6d800a8160541ed5.png" alt=""></p></li></ol><h3 id="Centos"><a class="header-anchor" href="#Centos"></a>Centos</h3><p>是著名的RedHat Linux的社区版。</p><ul><li>相当相当稳定</li><li>版本更新紧跟RedHat</li><li>适合最为服务器操作系统使用</li><li><strong>yum</strong>包管理</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/4e446a33bafd5e620f78ff120d512bc2.png" alt=""></p><h3 id="Fedora"><a class="header-anchor" href="#Fedora"></a>Fedora</h3><p>经常和Ubuntu比较的发行版，与Ubuntu最大的不同就是包管理不一样</p><ul><li><strong>yum</strong>包管理</li><li>新技术吸纳较快</li><li>提供多种桌面环境镜像，默认Gnome，可以轻松切换到KDE， XFce， MATE 以及 Cinnamon</li><li>版本更新快</li><li>图形化安装</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/acac7332c9c3dbc8edcfcb81bc7ffd33.png" alt=""></p><h3 id="Deepin"><a class="header-anchor" href="#Deepin"></a>Deepin</h3><ul><li>国产系统</li><li><strong>dpkg</strong>包管理</li><li>UI好看</li><li>中文社区活跃</li><li>图形化安装</li><li>仓库中软件版本滞后</li><li>驱动支持不完善</li><li>官方文档不更新</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/192d5e3149b1ad5154cdcb66f8663a97.png" alt=""></p><h3 id="Manjaro"><a class="header-anchor" href="#Manjaro"></a>Manjaro</h3><p>基于 Arch Linux， 它是一个运行快速，容易使用，轻量级的发行版。</p><ul><li><strong>pacman</strong>包管理</li><li>轻量级</li><li>滚动更新</li><li>软件生态差</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/c78dd49258fb3284b29df5ade45d0b21.png" alt=""></p><h3 id="Linux-Mint"><a class="header-anchor" href="#Linux-Mint"></a>Linux Mint</h3><p>基于Ubuntu开发，易用且功能强大</p><ul><li>默认使用Cinnamon桌面环境</li><li>与ubuntu相同特点</li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/79dda4407f41df15abec015d3e120868.png" alt=""></p><h2 id="连接工具"><a class="header-anchor" href="#连接工具"></a>连接工具</h2><ul><li>Putty<ul><li>轻量</li><li>支持ppk，pub格式密码连接</li></ul></li><li>secureCRT<ul><li>支持普通密码和pub格式密码，不支持pem密码连接</li><li>可实现文件本地与服务器界面式样的上传下载，双击即可使用</li></ul></li><li>xshell<ul><li>个人版免费</li><li>支持pem、pub、ppk多种密钥格式</li><li>自定义配色</li><li>使用xftp进行文件传输</li></ul></li></ul><h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2><p>命令格式：命令 -选项 参数 （选项和参数可以为空），如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lh /usr<br></code></pre></td></tr></table></figure><h3 id="操作文件及目录"><a class="header-anchor" href="#操作文件及目录"></a>操作文件及目录</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>-n 显示行号</td><td>文件路径</td><td>显示文本内容</td></tr><tr><td>mo=</td><td>-NUM 每次显示NUM行 +NUM 从第NUM行开始 +/String 查找字符串</td><td>文件路径</td><td>分页显示文件内容，空格向后翻，b向前</td></tr><tr><td>head</td><td>-n 显示行数</td><td>文件路径</td><td>查看文本开头部分指定行数</td></tr><tr><td>tail</td><td>-f 循环滚动读取文件动态显示在屏幕上</td><td>文件路径</td><td>查看文本结尾内容</td></tr><tr><td>wc</td><td></td><td>文件路径</td><td>统计文本的行数、字数、字符数</td></tr><tr><td>cd</td><td></td><td>路径</td><td>进入路径</td></tr><tr><td>mv</td><td></td><td>源文件 目标文件</td><td>移动文件或将文件改名</td></tr><tr><td>cp</td><td></td><td>源文件 目标文件</td><td>复制文件或目录</td></tr><tr><td>touch</td><td></td><td>文件名</td><td>创建空文件</td></tr><tr><td>mkdir</td><td>-p 递归创建</td><td>文件夹名</td><td>创建文件夹</td></tr><tr><td>rm</td><td>-rf 递归+强制删除</td><td>文件或目录路径</td><td>删除文件或目录</td></tr></tbody></table><h3 id="系统常用命令"><a class="header-anchor" href="#系统常用命令"></a>系统常用命令</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>-p 指定监控某一进程</td><td>top</td><td>显示系统中各个进程的资源占用状况</td></tr><tr><td>ps</td><td>-ef 显示所有进程+全格式</td><td>ps -ef | grep java</td><td>查看进程</td></tr><tr><td>netstat</td><td>-p 显示进程id和进程名</td><td>netstat  -ap | grep ssh</td><td>查看端口情况</td></tr><tr><td>kill</td><td>-9 强制终止 -15 终止</td><td>kill -9 4563</td><td>杀死进程</td></tr></tbody></table><p>*注：管道符“|”的作用：格式 命令A|命令B，将命令A的正确输出作为命令B的操作对象</p><h3 id="压缩解压缩"><a class="header-anchor" href="#压缩解压缩"></a>压缩解压缩</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>zip</td><td>[参数] [压缩后文件名] [要压缩的目录] -r 将目录压缩</td><td>zip -r test.zip tmp/</td><td>压缩文件或目录</td></tr><tr><td>unzip</td><td>[参数] [待解压缩文件] -d 解压到的路径</td><td>zip -d /opt test.zip</td><td>解压缩文件</td></tr><tr><td>tar</td><td>-zcvf 压缩 -zxvf 解压</td><td>tar -zcvf test.tar.gz tmp/</td><td>解压缩文件或目录</td></tr></tbody></table><h3 id="文件权限操作"><a class="header-anchor" href="#文件权限操作"></a>文件权限操作</h3><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/2e8e1d915a01b810076408b17638e255.png" align="left" /><table><thead><tr><th>命令</th><th>选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>chmod</td><td>u表示所属用户，g表示所属组，o表示其他用户，a表示所有用户；+表示增加权限，-表示取消权限，=表示唯一设定权限；r表示可读，w表示可写，x表示可执行，也可以三位数表示</td><td>chmod                      a+x <a href="http://test.sh">test.sh</a></td><td>设置文件或目录的权限</td></tr><tr><td>chown</td><td>-R 递归文件夹</td><td>chown mysql mysql.ini</td><td>改变文件或目录的用户或组</td></tr></tbody></table><h2 id="常用快捷键"><a class="header-anchor" href="#常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl+c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏</td></tr><tr><td>ctrl+r</td><td>搜索历史命令</td></tr><tr><td>ctrl+q</td><td>退出</td></tr><tr><td>tab</td><td>自动补全</td></tr></tbody></table><h2 id="vim编辑器"><a class="header-anchor" href="#vim编辑器"></a>vim编辑器</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在光标前插入</td></tr><tr><td>I</td><td>在光标当前行开始插入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>A</td><td>在光标当前行末尾插入</td></tr><tr><td>o</td><td>在光标当前行的下一行插入新行</td></tr><tr><td>O</td><td>在光标当前行的上一行插入新行</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>gg</td><td>跳到行首</td></tr><tr><td>G</td><td>跳到行末</td></tr><tr><td>:n</td><td>跳到第n行</td></tr><tr><td>u</td><td>undo，取消上一步操作</td></tr><tr><td>ctrl+r</td><td>redo，取消到undo之前</td></tr><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>dd</td><td>删除光标所在行</td></tr><tr><td>dG</td><td>删除光标所在行到末尾行的所有内容</td></tr><tr><td>D</td><td>删除光标到行尾的内容</td></tr><tr><td>shift+zz</td><td>保存并退出，与:wq作用一样</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL学习笔记（一）</title>
      <link href="/posts/1545079908/"/>
      <url>/posts/1545079908/</url>
      
        <content type="html"><![CDATA[<h2 id="MYSQL学习笔记（一）"><a class="header-anchor" href="#MYSQL学习笔记（一）"></a>MYSQL学习笔记（一）</h2><h3 id="sql语言的分类"><a class="header-anchor" href="#sql语言的分类"></a>sql语言的分类</h3><h4 id="DDL"><a class="header-anchor" href="#DDL"></a>DDL</h4><blockquote><p>数据定义语言 Data Definition Language。DDL用于数据库、表、视图等的建立、删除。DDL包括CREATE、 ALTER、 DROP等。</p></blockquote><h4 id="DML"><a class="header-anchor" href="#DML"></a>DML</h4><blockquote><p>数据操纵语言 Data Manipulation Language。DML用于添加、删除和修改数据表中的记录。DML包括INSERT、 DELETE和UPDATE。</p></blockquote><h4 id="DQL"><a class="header-anchor" href="#DQL"></a>DQL</h4><blockquote><p>数据控制语言 Data Control Language。DCL包括数据库对象的权限管理和事务管理。DCL包括COMMIT、 ROLLBACK、 GRANT等 。</p></blockquote><h4 id="DCL"><a class="header-anchor" href="#DCL"></a>DCL</h4><blockquote><p>数据查询语言 Data Query Language。查询是数据库的基本功能。DQL中使用SELECT查询数据表中的记录 。</p></blockquote><h3 id="MySQL支持的存储引擎"><a class="header-anchor" href="#MySQL支持的存储引擎"></a>MySQL支持的存储引擎</h3><blockquote><p>存储引擎就是如何存储数据、如何更新数据、如何查询数据、如何为存储的数据建立索引等一系列技术的实现方法。</p></blockquote><table><thead><tr><th>存储引擎</th><th>描述</th></tr></thead><tbody><tr><td>myisam</td><td>拥有较快的插入、查询速度，但不支持事务</td></tr><tr><td><strong>innodb</strong></td><td><strong>支持ACID事务</strong>，支持行级锁，支持外键；MySQL5.5版本之后的默认存储引擎</td></tr><tr><td>MRG_MYISAM</td><td>将一组结构相同的MyISAM表聚合成一个整体，在进行增删改查操作</td></tr><tr><td>memory</td><td>所有数据存储在内存中，响应快；MySQL重启时数据全部丢失</td></tr><tr><td>archive</td><td>归档，且有压缩机制，适用于历史数据归档</td></tr><tr><td>CSV</td><td>逻辑上由逗号分隔数据，会为每张表创建一个.csv文件</td></tr></tbody></table><h3 id="MySQL数据类型"><a class="header-anchor" href="#MySQL数据类型"></a>MySQL数据类型</h3><blockquote><p>在创建表时，准确的定义字段的数据类型是非常重要的。 MySQL的数据类型大致可以分为3类：数值、日期/时间和字符串类型。</p></blockquote><h4 id="数值类型"><a class="header-anchor" href="#数值类型"></a>数值类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>小整数值，如状态</td></tr><tr><td>smallint</td><td>2</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3</td><td>大整数值</td></tr><tr><td>int</td><td>4</td><td>大整数值</td></tr><tr><td>bigint</td><td>8</td><td>极大整数值</td></tr><tr><td>float</td><td>4</td><td>单精度浮点数值</td></tr><tr><td>double</td><td>8</td><td>双精度浮点数值</td></tr><tr><td>decimal</td><td>Max(D+, M+)</td><td>含小数值，例如金额</td></tr></tbody></table><h4 id="日期和时间类型"><a class="header-anchor" href="#日期和时间类型"></a>日期和时间类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>YYYY-MM-DD</td></tr><tr><td>time</td><td>3</td><td>HH:MM:SS</td></tr><tr><td>year</td><td>1</td><td>YYYY</td></tr><tr><td>datetime</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td></tr><tr><td>timestamp</td><td>8</td><td>YYYYMMDDHHMMSS</td></tr></tbody></table><h4 id="字符串类型"><a class="header-anchor" href="#字符串类型"></a>字符串类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>0~255</td><td>定长字段串</td></tr><tr><td>varchar</td><td>0~65535</td><td>变长字符串</td></tr><tr><td>text</td><td>0~65535</td><td>长文本数据</td></tr><tr><td>blob</td><td></td><td>二进制形式的文本数据</td></tr></tbody></table><h3 id="数据库查询语言"><a class="header-anchor" href="#数据库查询语言"></a>数据库查询语言</h3><h4 id="having"><a class="header-anchor" href="#having"></a>having</h4><p>having的作用和where差不多，区别在于：where关键字无法与聚合函数一起使用，而having可以对分组后的各组数据进行筛选。</p><h4 id="表的连接"><a class="header-anchor" href="#表的连接"></a>表的连接</h4><ul><li><p>内连接：join 或inner join</p></li><li><p>外连接：</p><blockquote><p>left join：左外连接</p><p>right join：右外连接</p><p>full join：全外连接</p></blockquote></li><li><p>自连接：同一张表的连接</p></li></ul><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/f7ba948bf76bf1d3fbd7854bf6b6232e.png" alt=""></p><h3 id="MySQL权限体系"><a class="header-anchor" href="#MySQL权限体系"></a>MySQL权限体系</h3><h4 id="概念"><a class="header-anchor" href="#概念"></a>概念</h4><p>MySQL的权限体系大致分为5个层级，全局层级、数据库层级、表层级、列层级和子程序层级。</p><table><thead><tr><th>层级</th><th>描述</th></tr></thead><tbody><tr><td>全局层级</td><td>适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。GRANT ALL ON *.*和REVOKE ALL ON *.*只授予和撤销全局权限。</td></tr><tr><td>数据库层级</td><td>适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</td></tr><tr><td>表层级</td><td>适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</td></tr><tr><td>列层级</td><td>适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指定与被授权列相同的列。</td></tr><tr><td>子程序层级</td><td>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级，并存储在mysql.procs_priv表中。</td></tr></tbody></table><h4 id="权限信息存储"><a class="header-anchor" href="#权限信息存储"></a>权限信息存储</h4><p>MySQL的权限信息主要存储在一下几张表中：</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>user</td><td>用户权限表，记录账号、密码及全局性权限信息</td></tr><tr><td>db</td><td>记录数据库相关权限</td></tr><tr><td>table_priv</td><td>用户对某个表拥有的权限</td></tr><tr><td>column_priv</td><td>用户对某表的某个列所拥有的权限</td></tr><tr><td>procs_priv</td><td>用户对存储过程及存储函数的操作权限</td></tr></tbody></table><h4 id="权限列表"><a class="header-anchor" href="#权限列表"></a>权限列表</h4><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/9372e5aa3fc579b2bfb666f9377e1241.png" alt=""></p><h4 id="授权"><a class="header-anchor" href="#授权"></a>授权</h4><p>格式：grant 权限类型 on databaseName.tableName to 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; grant select on test.user to zhangsan@localhost;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="撤销授权"><a class="header-anchor" href="#撤销授权"></a>撤销授权</h4><p>格式：revoke 权限类型 on databaseName.tableName from 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; revoke select on test.user from zhangsan@localhost;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="刷新权限"><a class="header-anchor" href="#刷新权限"></a>刷新权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="查看权限"><a class="header-anchor" href="#查看权限"></a>查看权限</h4><p>格式：show grants for 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show grants <span class="hljs-keyword">for</span> zhangsan@localhost;<br>+-----------------------------------------------+<br>| Grants <span class="hljs-keyword">for</span> zhangsan@localhost                 |<br>+-----------------------------------------------+<br>| GRANT SELECT ON *.* TO <span class="hljs-string">&#x27;zhangsan&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> |<br>+-----------------------------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="禁止远程登录"><a class="header-anchor" href="#禁止远程登录"></a>禁止远程登录</h4><p>默认情况下Mysql安装完之后root用户是禁止远程登录的。</p><p>是否能远程登录只要修改mysql.user表的host字段即可，修改为<code>localhost</code>或<code>127.0.0.1</code>即表示禁止远程登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use mysql;                  <br>Database changed                   <br>mysql&gt; select user, host from user;<br>+---------------+-----------+<br>| user          | host      |<br>+---------------+-----------+<br>| zhangsan      | %         |<br>| mysql.session | localhost |<br>| mysql.sys     | localhost |<br>| root          | localhost |<br>+---------------+-----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; update user <span class="hljs-built_in">set</span> host = <span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;zhangsan&#x27;</span>;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select user, host from user;<br>+---------------+-----------+<br>| user          | host      |<br>+---------------+-----------+<br>| mysql.session | localhost |<br>| mysql.sys     | localhost |<br>| root          | localhost |<br>| zhangsan      | localhost |<br>+---------------+-----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署到私有服务器</title>
      <link href="/posts/1827970956/"/>
      <url>/posts/1827970956/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客部署到私有服务器"><a class="header-anchor" href="#hexo博客部署到私有服务器"></a>hexo博客部署到私有服务器</h2><blockquote><p>上次搭了个v2ray后发现服务器就这么放着有点浪费，于是打算把之前托管到github，码云的hexo博客部署到服务器上。也就是在本地使用hexo写博客后，使用<code>hexo deploy</code>命令将静态网站push到服务上。</p></blockquote><h3 id="服务器环境准备"><a class="header-anchor" href="#服务器环境准备"></a>服务器环境准备</h3><p>确保服务器上安装了webserver 如<code>tomcat</code>, <code>nginx</code>, <code>caddy</code>等，来保证运行hexo生成的静态网站。</p><h3 id="git配置"><a class="header-anchor" href="#git配置"></a>git配置</h3><p>安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git<br>git --version<br></code></pre></td></tr></table></figure><p>安装成功之后，配置git用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser git<br></code></pre></td></tr></table></figure><p>为了安全起见，我们需要<strong>关闭git账号登录shell的权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/passwd<br></code></pre></td></tr></table></figure><p>在文件最后找到<code>git</code>行，将<code>/bin/bash</code>替换为<code>/usr/bin/git-shell</code></p><p>创建空仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git<br><span class="hljs-built_in">mkdir</span> repos<br><span class="hljs-built_in">cd</span> repos<br>git init --bare blog.git<br></code></pre></td></tr></table></figure><p>创建网站根目录，之后hexo生成的静态文件会部署到这里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git<br><span class="hljs-built_in">mkdir</span> -p projects/blog<br></code></pre></td></tr></table></figure><p>本地生成<code>ssh key</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成的<code>ssh key</code>在<code>C:\Users\你的用户名\.ssh</code>文件夹下，名为<code>id_rsa.pub</code></p><p>复制<code>id_rsa.pub</code>文件内的内容，将内容加到git用户的authorized_keys文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/.ssh<br><span class="hljs-built_in">touch</span> authorized_keys<br>vim authorized_keys<br></code></pre></td></tr></table></figure><p>配置hooks钩子，保证收到push请求后执行命令将提交的文件部署到网站根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /home/git/repos/blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>将下面的脚本复制到文件内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f<br></code></pre></td></tr></table></figure><p>并给git用户添加可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x post-receive<br></code></pre></td></tr></table></figure><p>网站的根目录也需要给git权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R git:git /home/git/repos/blog.git<br>sudo <span class="hljs-built_in">chown</span> -R git:git /home/git/projects/blog<br></code></pre></td></tr></table></figure><h3 id="hexo配置"><a class="header-anchor" href="#hexo配置"></a>hexo配置</h3><p>修改博客根目录下的<code>_config.yml</code>，将仓库添加到deploy配置中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@blog.zhuweitung.space:/home/git/repos/blog.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>hexo部署测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo douban<br>hexo deploy<br></code></pre></td></tr></table></figure><p>hexo提示push成功，再到服务器的网站根目录下看一下是否有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/projects/blog<br>ll -h<br></code></pre></td></tr></table></figure><p>有文件了！到浏览器里输入域名发现博客部署成功了！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点六</title>
      <link href="/posts/4243927841/"/>
      <url>/posts/4243927841/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点六"><a class="header-anchor" href="#中级软考知识点六"></a>中级软考知识点六</h2><h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3><ul><li><p>线性表</p><ul><li>顺序表</li><li>链表<ul><li>单链表</li><li>循环链表</li><li>双向链表</li></ul></li><li>队列</li><li>栈</li></ul></li><li><p>树</p><ul><li>二叉树<ul><li>先序遍历：根 左 右</li><li>中序遍历：左 根 右</li><li>后序遍历：左 右 根</li><li>层次遍历</li></ul></li><li>最优二叉树（哈弗曼树）</li><li>线索二叉树：节点记录前驱和后驱</li><li>平衡二叉树：任意节点的左右子树深度不超过1</li></ul></li><li><p>图论</p><ul><li>有向图</li><li>无向图</li><li>图的存储<ul><li>邻接矩阵：二维数组</li><li>邻接表：一位数组+链表</li></ul></li><li>图的遍历<ul><li>广度优先BFS</li><li>深度优先DFS</li></ul></li><li>拓扑排序</li><li>图的最小生成树</li></ul></li></ul><h3 id="编译过程"><a class="header-anchor" href="#编译过程"></a>编译过程</h3><ul><li><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191108205721.png" alt=""></p></li><li><p>词法错误：非法字符，关键字灬标识符拼写错误</p></li><li><p>语法错误：语法结构出错，if endif不匹配，缺分号</p></li><li><p>语义错误：死循环，零除数，其他逻辑错误</p></li></ul><h3 id="表达式"><a class="header-anchor" href="#表达式"></a>表达式</h3><ul><li><p>前缀表达式：+ab</p></li><li><p>中缀表达式：a+b</p></li><li><p>后缀表达式：ab+</p></li><li><p>程序语言</p><p><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191108211709.png" alt=""></p></li></ul><h3 id="多媒体基础知识"><a class="header-anchor" href="#多媒体基础知识"></a>多媒体基础知识</h3><ul><li>音频容量计算：每秒容量=采样频率（Hz）*样本精度（位）*声道数/8</li><li>图像容量计算：容量=长*宽*位数/8 或 长*宽*\log2(色数)/8</li><li>常见多媒体标准<ul><li>JPEG-2000<ul><li>有损&amp;无损</li><li>压缩比更高</li><li>小波变换</li><li>医学图像应用</li></ul></li><li>MPEG-1<ul><li>离散余弦</li><li>VCD</li><li>MP3</li></ul></li><li>MPEG-2<ul><li>离散余弦</li><li>Huffman</li><li>DVD</li><li>有线/卫星电视</li><li>AAC</li></ul></li><li>MPEG-4<ul><li>网络应用/可视电话</li><li>无线通信</li><li>增强交互性</li><li>数码权限管理</li><li>多媒体传输集成框架</li></ul></li><li>MPEG-7<ul><li>多媒体内容描述接口</li><li>具备描述功能</li><li>不是编码标准</li></ul></li><li>MPEG-21<ul><li>融合不同协议</li><li>制定新标准</li><li>标准集成</li></ul></li><li>JPEG<ul><li>有损</li><li>RGB转YUV</li><li>离散余弦</li></ul></li></ul></li></ul><h3 id="知识产权"><a class="header-anchor" href="#知识产权"></a>知识产权</h3><ul><li>版权</li><li>软件著作权：不需要申请</li><li>专利权：需要申请</li><li>商标权：需要申请</li><li>商业秘密权</li></ul><h3 id="算法"><a class="header-anchor" href="#算法"></a>算法</h3><ul><li>分治法：分而治之，将问题分解为规模较小的子问题，一般用递归求解<ul><li>快排</li><li>并归排序</li><li>矩阵乘法</li><li>大整数乘法</li><li>汉诺塔</li><li>求斐波那契数列</li><li>二分查找</li></ul></li><li>回溯法：选优搜索法，按选优条件向前搜索，若到达某一步发现选择并不优或打不到目标就退回伊布重新选择<ul><li>N皇后问题</li><li>迷宫</li><li>背包问题</li></ul></li><li>贪心法：（用于求满意解）总是做出在当前来说是最好的选择，而并不从整体上加以考虑。局部最优选择，不保证整体最优<ul><li>背包问题（如装箱）</li><li>多机调度</li><li>找零钱问题</li></ul></li><li>动态规划法：（用于求最优解）对于每一步决策，列出各种可能的局部解，再依据某种判定条件，舍弃哪些肯定不能得到最优解的局部解，在每一步都经过筛选，以每一步都是最优解来保证全局是最优解。<ul><li>背包问题</li><li>LCS最长公共子序列</li><li>斐波那契数列</li><li>矩阵乘法</li></ul></li><li>时间复杂度<ul><li><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191108215144.png" alt=""></li><li>二分或与树相关的时间复杂度一般为O(log2(n))</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点五</title>
      <link href="/posts/4209834786/"/>
      <url>/posts/4209834786/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点五"><a class="header-anchor" href="#中级软考知识点五"></a>中级软考知识点五</h2><h3 id="面向对象"><a class="header-anchor" href="#面向对象"></a>面向对象</h3><ul><li>7大设计原则<ul><li>单一职责原则：设计目的单一的类</li><li>开放-封闭原则：对拓展开放，对修改封闭</li><li>里氏替换原则：子类可以替换父类</li><li>依赖倒置原则：要依赖与抽象，而不是具体实现；针对接口编程，不要针对实现编程</li><li>接口隔离原则：使用多个专门的接口比使用单一的总接口要好</li><li>组合重用原则：要尽量使用组合，而不是继承关系达到重用的目的</li><li>迪米特原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解</li></ul></li></ul><h3 id="UML"><a class="header-anchor" href="#UML"></a>UML</h3><ul><li>面向对象<ul><li>Booch</li><li>OOSE</li><li>OMT</li></ul></li><li>面向数据结构<ul><li>Jackson</li><li>结构化方法</li></ul></li><li>结构图<ul><li><strong>类图</strong><ul><li>依赖关系：一个事件发生变化影响另一个事件</li><li>泛化关系：特殊/一般关系</li><li>关联关系：描述了一组链，链是对象之间的连接</li><li>聚合关系：整体与部分生命周期<strong>不同</strong>（部分离开整体后还能用）</li><li>组合关系：整体与部分生命周期<strong>相同</strong>（部分离开整体后都不能用了）</li><li>实现关系：接口与类之间的关系</li><li><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191107214655.png" alt=""></li></ul></li><li>对象图</li><li>包图</li><li>组合结构图</li><li>构件图</li><li>部署图：软硬件之间的映射</li><li>制品图</li></ul></li><li>行为图<ul><li><strong>用例图：系统与外部参与者的交互</strong></li><li>顺序图：强调按时间顺序</li><li>通信图（协作图）</li><li>定时图</li><li>状态图</li><li>活动图</li><li>交互概览图</li></ul></li><li>设计模式<ul><li>创建型模式<ul><li><strong>工厂方法模式（factory）</strong>：动态生产对象</li><li>抽象方法模式（abstract）：生产成系列对象</li><li>原型模式（prototype）：克隆对象</li><li><strong>单例模式</strong>（singleton）：单实例</li><li>构建器模式（builder）：将复杂类的表示与构造相分离</li></ul></li><li>结构型模式<ul><li><strong>适配器模式</strong>（adapter）：转换接口</li><li><strong>桥接模式</strong>（bridge）：继承树拆分</li><li><strong>组合模式</strong>（composite）：树形目录结构</li><li><strong>装饰模式</strong>（decorator）：附加职责</li><li>外观模式（facade）：对外统一接口</li><li>享元模式（flyweight）：文章共享文字对象</li><li>代理模式（proxy）</li></ul></li><li>行为型模式<ul><li><strong>职责链模式</strong>（chain of responsibility）：传递职责</li><li>**命令模式（command）：**日志记录，可撤销</li><li>解释器模式（interpreter）：虚拟机的机制</li><li>迭代器模式（iterator）：数据库数据集</li><li>中介者模式（mediator）：不直接引用</li><li>备忘录模式（memento）</li><li><strong>观察者模式</strong>（observer）：联动</li><li>状态模式（state）：状态改变类的行为</li><li><strong>策略模式</strong>（strategy）：多方案切换</li><li>模板方法模式（template）</li><li>访问者模式（visitor）</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点四</title>
      <link href="/posts/3876493671/"/>
      <url>/posts/3876493671/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点四"><a class="header-anchor" href="#中级软考知识点四"></a>中级软考知识点四</h2><h3 id="系统开发基础"><a class="header-anchor" href="#系统开发基础"></a>系统开发基础</h3><ul><li>软件开发模型<ul><li>瀑布模型：每个阶段都有相应的产出，适用于需求较明确的项目;<ul><li>软件计划：可行性分析</li><li>需求分析</li><li>软件设计：概要设计、详细设计</li><li>程序编码</li><li>软件测试</li><li>运行维护</li></ul></li><li>V模型：在瀑布模型的基础上改良，重视测试;</li><li>喷泉模型：各阶段并行，管理难度加大;</li><li>原型模型：用户对需求不清楚;</li><li>演化模型</li><li>螺旋模型：在瀑布模型和原型模型的基础上，有风险分析;</li><li>统一过程(RUP)：用例驱动，以架构为中心，迭代和增量，初始-&gt;细化-&gt;构建-&gt;交付;</li><li>敏捷方法<ul><li><img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191106213353.png" alt=""></li><li>自适应开发</li><li>水晶方法</li><li>特性驱动开发</li><li>极限编程(XP)</li></ul></li></ul></li><li>软件开发方法<ul><li>结构化方法</li><li>原型法</li><li>面向对象方法：喷泉模型</li><li>面向服务方法：SOA</li><li>面向数据结构方法：Jackson</li></ul></li><li>需求分析<ul><li>数据流图（DFD）</li><li>数据字典（DD）</li></ul></li><li>软件设计<ul><li>高内聚低耦合</li><li>内聚类型又高到低为：功能、顺序、通信、过程、时间、逻辑、偶然</li><li>耦合类型又低到高为：非直接、数据、标记、控制、外部、公共、内容</li></ul></li><li>软件测试<ul><li>动态测试<ul><li>黑盒测试<ul><li>等价类划分</li><li>边界值分析</li><li>错误推测</li><li>因果图</li></ul></li><li>白盒测试<ul><li>语句覆盖</li><li>判定覆盖</li><li>条件覆盖</li><li>条件判定覆盖</li><li>路径覆盖</li></ul></li><li>灰盒测试</li></ul></li><li>静态测试</li><li>Mccabe复杂度<ul><li>V(G)=m-n+2，m为有向弧数量，n为节点数</li></ul></li></ul></li><li>软件维护<ul><li>可维护性因素决定<ul><li>可理解性</li><li>可测试性</li><li>可修改性</li></ul></li><li>软件维护类型<ul><li>改正性维护：发布时就有问题</li><li>适应性维护：外部环境变化</li><li>预防性维护</li><li>完善性维护：扩充功能和改善性能而进行修改</li></ul></li><li>软件质量保证<ul><li>功能性</li><li>可靠性</li><li>易用性</li><li>效率</li><li>维护性</li><li>可移植性</li></ul></li><li>软件过程改进CMMI<ul><li>初始级：有大佬</li><li>可管理级：纪律化</li><li>已定义级：标准一致</li><li>定量管理级：可预测</li><li>优化管理级：不断改进</li></ul></li><li>项目管理<ul><li>时间管理<ul><li>关键路径</li><li>甘特图</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点三</title>
      <link href="/posts/2883384697/"/>
      <url>/posts/2883384697/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点三"><a class="header-anchor" href="#中级软考知识点三"></a>中级软考知识点三</h2><h3 id="计算机网络"><a class="header-anchor" href="#计算机网络"></a>计算机网络</h3><ul><li>OSI七层模型<ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层：TCP，UDP</li><li>网络层：路由器，三层交换机</li><li>数据链路层：网桥，交换机，网卡</li><li>物理层：中继器，集线器（Hub）</li></ul></li><li>TCP/IP模型<ul><li>应用层：对应应用层，表示层和会话层</li><li>传输层：对应传输层</li><li>网际层：对应网络层</li><li>网络接口层：对应数据链路层和物理层</li></ul></li><li>UDP<ul><li>SNMP</li><li>DNS</li><li>DHCP</li><li>TFTP</li></ul></li><li>TCP<ul><li>Telnet</li><li>SMTP</li><li>FTP</li><li>HTTP</li><li>POP3</li></ul></li><li>IP地址<ul><li>A类0~127.0~255.0~255.0~255，还有24位主机号</li><li>B类128~291.0~255.0~255.0~255，还有16位主机号</li><li>C类192~223.0~255.0~255.0~255，还有8位主机号</li></ul></li><li>数字签名<ul><li>发送方使用私钥加密生成签名</li><li>接收方使用发送方的公钥解密验证签名</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点二</title>
      <link href="/posts/3917505396/"/>
      <url>/posts/3917505396/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点二"><a class="header-anchor" href="#中级软考知识点二"></a>中级软考知识点二</h2><h3 id="数据库系统"><a class="header-anchor" href="#数据库系统"></a>数据库系统</h3><ul><li><p>关系代数</p><ul><li>笛卡尔积</li><li>投影（π）：列</li><li>选择（δ）：行</li><li>自然连接：相同属性只保留一个，去掉重复记录</li></ul></li><li><p>规范化理论</p><ul><li>部分函数依赖：设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。</li><li>完全函数依赖：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。</li><li>传递函数依赖：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。</li><li>键<ul><li>候选键：唯一标识元组，且无冗余</li><li>主键：候选键中任选一个</li><li>外键：其他关系的主键</li><li>求候选键时将关系转化为有向图，找入度为0的节点，若没有找可以走完全图的节点</li></ul></li><li>主属性：组成候选码的属性就是主属性</li><li>非主属性：其他的就是非主属性</li><li>第一范式：在关系模式中，所有属性不可再分（列不能再分）</li><li>第二范式：在第一范式的基础上，所有非主属性完全依赖候选键（没有部分函数依赖）</li><li>第三范式：在第二范式的基础上，没有传递函数依赖</li><li>BC范式<ul><li>在第三范式的基础上</li><li>所有非主属性对每一个码都是完全函数依赖、</li><li>所有主属性对每一个不包含它的码，也是完全函数依赖</li><li>没有任何属性完全函数依赖与非码的任何一组属性</li><li>简单来说就是，消除主属性对候选键的部分和传递函数依赖</li></ul></li></ul></li><li><p>事务</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持续性</li></ul></li><li><p>并发控制</p><ul><li>产生的问题<ul><li>丢失更新</li><li>不可重复读问题</li><li>读脏数据</li></ul></li><li>解决方案（封锁协议）<ul><li>S封锁：共享锁（读锁）</li><li>X封锁：排它锁（写锁）</li><li>两段锁协议</li></ul></li><li>死锁</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中级软考知识点一</title>
      <link href="/posts/3523235293/"/>
      <url>/posts/3523235293/</url>
      
        <content type="html"><![CDATA[<h2 id="中级软考知识点一"><a class="header-anchor" href="#中级软考知识点一"></a>中级软考知识点一</h2><p>准备2019年11月9日的中级软考，临时抱个佛脚。</p><h3 id="浮点的运算"><a class="header-anchor" href="#浮点的运算"></a>浮点的运算</h3><ul><li>一般尾数用补码，阶码用移码表示;</li><li>阶码的位数决定数的表示范围，位数越多范围越大;</li><li>尾数的位数决定数的有效精度，位数越多精度越高;</li><li>对阶时，小数向大数看齐;</li><li>对阶是通过较小数的尾数右移实现的;</li></ul><h3 id="计算机结构"><a class="header-anchor" href="#计算机结构"></a>计算机结构</h3><ul><li>计算机基本组成：运算器、控制器、存储器、输入设备、输出设备;</li><li>运算器：算数逻辑单位、累加寄存器、数据缓冲寄存器;</li><li>控制器：程序计数器、指令寄存器、指令译码器、时序部件;</li></ul><h3 id="寻址方式"><a class="header-anchor" href="#寻址方式"></a>寻址方式</h3><ul><li>立即寻址：操作数直接在指令中，速度快，灵活性差;</li><li>直接寻址：指令中存放的是操作数的地址;</li><li>间接寻址：指令中存放了一个地址，这个地址对应的内容是操作数的地址;</li><li>寄存器寻址：寄存器存放操作数;</li><li>寄存器间寻址：寄存器内存放的是操作数的地址;</li></ul><h3 id="指令集"><a class="header-anchor" href="#指令集"></a>指令集</h3><ul><li>复杂指令集CISC：复杂，指令数量多，频率差别大，多寻址;</li><li>精简指令集RISC：精简，指令数量少，操作寄存器，单周期，少寻址，多通用寄存器，流水线;</li></ul><h3 id="流水线"><a class="header-anchor" href="#流水线"></a>流水线</h3><ul><li><p>概念：在程序执行时多条指令重叠进行操作的一种准并行实现技术;</p></li><li><p>流程：取指，分析，执行;</p></li><li><p>计算方式：<img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191103145700.png" alt=""></p></li><li><p>流水线的吞吐率是指在单位时间内流水线完成的任务数量或输出的结果数量，攻势如下：<img src="https://cdn.staticaly.com/gh/zhuweitung/picbed/main/20191103150025.png" alt=""></p></li><li><p>流水线最大吞吐率：1/△t;</p></li></ul><h3 id="层次化存储结构"><a class="header-anchor" href="#层次化存储结构"></a>层次化存储结构</h3><ul><li>使用cache改善系统性能的依据是程序的局部性原理（防止抖动）;</li><li>结果cache的程序总访问时间=cache命中率*cache周期时间+cache未命中率*主存储器周期时间;</li></ul><h3 id="编址与计算"><a class="header-anchor" href="#编址与计算"></a>编址与计算</h3><ul><li><p>例.若内存地址区间炜4000H~43FFH，每个存储单位内科存储16位二进制数，该内存区域用4片存储器芯片构成，则构成该内存所用的存储器芯片的容量是多少？</p><p>解：总容量=(43FFH-4000H+1)*16=(4400H-4000H)<em>16=400H</em>16=1024*16 bit</p><p>每片的容量=总容量/总片数=1024*16/4=4*1024=4kb</p></li><li><p>数据总线：CPU与内存之间数据传递;</p></li><li><p>地址总线：内存之间存储数据地址;</p></li><li><p>控制总线：将微处理器控制单元的信号传送给周边设备;</p></li><li><p>串联系统可靠性计算公式：R=R1*R2*R3*…*Rn;</p></li><li><p>并联系统可靠性计算公式：R=1-(1-R1)*(1-R2)*…*(1-Rn);</p></li><li><p>奇偶校验码：可检查1位的错误，不可纠错;</p></li><li><p>循环校验码：可检错，不可纠错;</p></li><li><p>海明校验码：可检错，可纠错;</p></li></ul><h3 id="进程管理"><a class="header-anchor" href="#进程管理"></a>进程管理</h3><ul><li>PV操作中，P是申请资源的操作，V是释放资源的操作;</li><li>总共m个共享资源，n个进程，每个进程需要k个资源，当m&gt;(k-1)*n时，进程不会死锁;</li></ul><h3 id="存储管理"><a class="header-anchor" href="#存储管理"></a>存储管理</h3><ul><li><p>逻辑地址=页号+页内地址;</p></li><li><p>物理地址=物理块号（页帧地址）+页内地址;</p></li><li><p>页面置换算法</p><ul><li>最优算法：将永不使用的空间清除掉（太过理想）;</li><li>随机算法：随机清除空间;</li><li>先进先出：可能产生抖动;</li><li>最近最少使用算法：目前计算机使用的算法;</li><li>时间局部性：刚被访问的内容，立即又被访问;</li><li>空间局部性：刚被访问的内容，临近的空间很快被访问;</li></ul></li><li><p>磁盘管理</p><ul><li>存取时间=寻道时间(磁头移动到磁道所需时间)+等待时间(等待读写的扇区转到磁头下方所用时间);</li><li>磁盘最外面是0磁道;</li><li>先来先服务算法;</li><li>最短寻道时间优先;</li><li>扫描算法(电梯算法);</li><li>循环扫描算法;</li></ul></li></ul><h3 id="作业管理"><a class="header-anchor" href="#作业管理"></a>作业管理</h3><ul><li>作业调度算法<ul><li>先来先服务算法;</li><li>时间片轮转算法;</li><li>短作业优先算法;</li><li>最高优先权优先算法;</li><li>高响应比优先算法，高响应比=(作业等待时间+作业处理时间)/作业处理时间;</li></ul></li><li>索引文件结构<ul><li>直接索引指向一个物理盘块(1Kb)；</li><li>索引结构共13个（0~12）索引节点;</li><li>0~9的10个索引节点使用直接索引，容量10Kb，地址0~10239;</li><li>10索引节点使用一级间接索引，容量1Kb*256=256Kb;</li><li>11索引节点使用二级间接索引，容量为256Kb*256=64Mb;</li><li>12索引节点使用三级间接索引，容量为64Mb*256=16Gb;</li></ul></li><li>树型目录结构<ul><li>求相对路径和绝对路径;</li></ul></li></ul><h3 id="设备管理"><a class="header-anchor" href="#设备管理"></a>设备管理</h3><ul><li>数据传输控制方式(越往下效率越高)<ul><li>程序控制方式：分为无条件传送和程序查询方式，方法简单，硬件开销小，I/O能力弱，严重影响CPU利用率;</li><li>程序中断方式：与上着相比提高了传输请求的响应速度;</li><li>DMA方式：是为了在主存与外设之间实现高速、批量数据交换而设置的，比上两者高效;</li><li>通道方式;</li><li>I/O处理机;</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下破解NavicatPremium</title>
      <link href="/posts/3499891971/"/>
      <url>/posts/3499891971/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac下破解NavicatPremium"><a class="header-anchor" href="#Mac下破解NavicatPremium"></a>Mac下破解NavicatPremium</h2><h3 id="1-安装NavicatPremium"><a class="header-anchor" href="#1-安装NavicatPremium"></a>1.安装NavicatPremium</h3><p>先去navicat中文官网下载14天试用版。</p><blockquote><p><a href="https://www.navicat.com.cn/download/navicat-premium">https://www.navicat.com.cn/download/navicat-premium</a></p></blockquote><p>安装全部默认。</p><h3 id="2-安装navicat-keygen"><a class="header-anchor" href="#2-安装navicat-keygen"></a>2.安装<a href="https://github.com/DoubleLabyrinth/navicat-keygen">navicat-keygen</a></h3><ul><li><p>在安装keygen之前，要确保已经安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>openssl<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>capstone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>keystone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>rapidjson<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libplist<br></code></pre></td></tr></table></figure><p>你可以通过brew来安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>openssl<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>capstone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>keystone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>rapidjson<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libplist<br></code></pre></td></tr></table></figure></li><li><p>从github上克隆keygen项目：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone -b mac --single-branch https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DoubleLabyrinth/</span>navicat-keygen.git<br></code></pre></td></tr></table></figure></li><li><p>编译项目：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> cd navicat-keygen<br><span class="hljs-symbol">$</span> make <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p>编译完成之后，你可以在<code>bin/</code>目录找到<code>navicat-keygen</code>和<code>navicat-patcher</code>两个可执行文件。</p></li></ul><h3 id="3-开始破解"><a class="header-anchor" href="#3-开始破解"></a>3.开始破解</h3><p>在开始破解之前，请先备份好数据库以及一些重要的数据。</p><h4 id="创建证书"><a class="header-anchor" href="#创建证书"></a>创建证书</h4><ul><li>1.打开<code>钥匙串访问</code>应用</li><li>2.系统左上角，钥匙串访问&gt;证书助理&gt;创建证书颁发机构</li><li>3.填写证书名称，如<code>foobar</code>，用户证书选择代码签名，创建。</li><li>4.在钥匙串列表中点击<code>系统</code>，在右侧搜索刚才新建的证书名称。</li><li>5.右键选择<code>显示简介</code>，展开<code>信任</code>树节点，设置<code>使用此证书时</code>为<code>始终信任</code>。</li></ul><h4 id="生成激活码"><a class="header-anchor" href="#生成激活码"></a>生成激活码</h4><ul><li><p>1.替换navicat激活公钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/navicat-patcher /</span>Applications<span class="hljs-regexp">/Navicat\ Premium.app/</span><br></code></pre></td></tr></table></figure><p>成功会提示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br><span class="hljs-strong"><span class="hljs-emphasis">*   Patch has been done successfully. Have fun and enjoy~~   *</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">*    DO NOT FORGET TO SIGN NAVICAT BY YOUR CERTIFICATE!!!    *</span></span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br></code></pre></td></tr></table></figure><ul><li><p>若安装的Navicat Premium版本小于<code>12.0.24</code>，</p><p>需要使用<code>openssl</code>生成<code>rpk</code>公钥文件：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>openssl genrsa -<span class="hljs-keyword">out</span> RegPrivateKey.pem <span class="hljs-number">2048</span><br><span class="hljs-variable">$ </span>openssl rsa -in RegPrivateKey.pem -pubout -<span class="hljs-keyword">out</span> rpk<br></code></pre></td></tr></table></figure><p>再将<code>rpk</code>文件放到<code>/Applications/Navicat Premium.app/Contents/Resources/</code>目录下</p></li></ul></li><li><p>2.用证书添加信任</p><p>证书名为刚才新创建的证书名称，我的是<code>foobar</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ codesign -f -s <span class="hljs-string">&quot;foobar&quot;</span> <span class="hljs-regexp">/Applications/</span>Navicat\ Premium.app/<br></code></pre></td></tr></table></figure></li><li><p>3.生成激活码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/navicat-keygen ./</span>RegPrivateKey.pem<br></code></pre></td></tr></table></figure><p>语言根据安装的版本选择，如安装英文版选择0，中文版选择1；</p><p>版本号选择12；</p><p>之后终端上会显示系列号：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Serial <span class="hljs-built_in">number</span>:<br>NAVG-Z5H9-NK2L-MAZJ<br></code></pre></td></tr></table></figure><p>继续在终端上输入<code>name</code>和<code>organization</code>；</p><p>不要关闭终端，关闭网络连接，打开navicat premium，点击注册，输入刚才生成的序列号，点击激活，点击手动激活，复制请求码在终端中粘贴，敲两次回车；</p><p>复制生成的激活码，粘贴到navicat premium中并确定；</p><p>到此破解完成。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java I/O学习笔记</title>
      <link href="/posts/1061884183/"/>
      <url>/posts/1061884183/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-I-O学习笔记"><a class="header-anchor" href="#Java-I-O学习笔记"></a>Java I/O学习笔记</h1><h2 id="1-Java-I-O中常用的类"><a class="header-anchor" href="#1-Java-I-O中常用的类"></a>1.Java I/O中常用的类</h2><p>在java源码的io包中常用的类为File、OutputStream、Inputstream、Writer、Reader、RandomAccessFile。</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>File</td><td>文件类</td></tr><tr><td>OutputStream</td><td>字节输出流</td></tr><tr><td>Inputstream</td><td>字节输入流</td></tr><tr><td>Writer</td><td>字符输出流</td></tr><tr><td>Reader</td><td>字符输入流</td></tr><tr><td>RandomAccessFile</td><td>随机存取文件</td></tr></tbody></table><h2 id="2-字节流与字符流"><a class="header-anchor" href="#2-字节流与字符流"></a>2.字节流与字符流</h2><blockquote><p>什么是字节流？</p><p>字节流–传输过程中，传输数据的最基本单位是字节的流。</p><p>什么是字符流？</p><p>字符流–传输过程中，传输数据的最基本单位是字符的流。</p></blockquote><h2 id="3-节点流和处理流"><a class="header-anchor" href="#3-节点流和处理流"></a>3.节点流和处理流</h2><blockquote><p>节点流：可以从或向一个特定的地方（节点）读写数据。如FileReader。</p><p>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</p></blockquote><h2 id="4-常用字节输入流"><a class="header-anchor" href="#4-常用字节输入流"></a>4.常用字节输入流</h2><p>常用的字节输入流包括Inputstream以及Inputstream的子类。</p><p><img src="https://wx2.sinaimg.cn/large/d67ca93ely1g4yb6pwpmij20qo0dyabr.jpg" alt="IO字节输入流"></p><h2 id="5-常用字节输出流"><a class="header-anchor" href="#5-常用字节输出流"></a>5.常用字节输出流</h2><p>常用字节输出流包括OutputStream以及OutputStream的子类。</p><p><img src="https://ws1.sinaimg.cn/large/d67ca93ely1g4yb6pskqzj20qo0asgmu.jpg" alt="IO字节输出流"></p><h2 id="6-常用字符输入流"><a class="header-anchor" href="#6-常用字符输入流"></a>6.常用字符输入流</h2><p>常用字符输入流包括Reader以及Reader的子类。</p><p><img src="https://wx1.sinaimg.cn/large/d67ca93ely1g4yb6poa62j20qo0ga0uk.jpg" alt="IO字符输入流"></p><h2 id="7-常用字符输出流"><a class="header-anchor" href="#7-常用字符输出流"></a>7.常用字符输出流</h2><p>常用字符输出流包括Writer以及Writer的子类。</p><p><img src="https://ws2.sinaimg.cn/large/d67ca93ely1g4yb6ojw72j20nc0gzabr.jpg" alt="IO字符输出流"></p><h2 id="8-RandomAccessFile类"><a class="header-anchor" href="#8-RandomAccessFile类"></a>8.RandomAccessFile类</h2><p>RandomAccessFile（随机访问文件）类是专门用来处理文件的类。<code>随机访问</code>中的<code>随机</code>指的是可以跳转到文件的任意位置处读写数据。</p><h3 id="8-1读写模式"><a class="header-anchor" href="#8-1读写模式"></a>8.1读写模式</h3><table><thead><tr><th>模式</th><th>作用</th></tr></thead><tbody><tr><td>r</td><td>表示以只读方式打开，调用结果对象的任何write方法都将导致抛出IOException</td></tr><tr><td>rw</td><td>打开以便读取和写入，如果该文件尚不存在，则尝试创建该文件</td></tr><tr><td>rws</td><td>打开以便读取和写入，相对于&quot;rw&quot;，还要求对文件内容或元数据的每个更新都同步写入到底层存储设备</td></tr><tr><td>rwd</td><td>打开以便读取和写入，相对于&quot;rw&quot;，还要求对文件内容的每个更新都同步写入到底层存储设备</td></tr></tbody></table><h3 id="8-2常用方法"><a class="header-anchor" href="#8-2常用方法"></a>8.2常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">getFilePointer</span><span class="hljs-params">()</span>;<span class="hljs-comment">//返回此文件中的当前偏移量</span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;<span class="hljs-comment">//返回此文件的长度</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>;<span class="hljs-comment">//从此文件中读取一个数据字节</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span>;<span class="hljs-comment">//读取byte数组长度的字节到byte数组中，到达文末返回-1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<span class="hljs-comment">//将最多len个数据字节从此文件的指定初始偏移量off读入byte数组</span><br><br>String <span class="hljs-title function_">readLine</span><span class="hljs-params">()</span>;<span class="hljs-comment">//从此文件读取文本的下一行</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span>;<span class="hljs-comment">//向此文件写入指定的字节</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span>;<span class="hljs-comment">//将byte数组长度个字节从指定byte数组写入到此文件中</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<span class="hljs-comment">//将len个字节从指定byte数组写入到此文件，并从偏移量off处开始</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>618配台电脑</title>
      <link href="/posts/854505700/"/>
      <url>/posts/854505700/</url>
      
        <content type="html"><![CDATA[<h1 id="618配台电脑"><a class="header-anchor" href="#618配台电脑"></a>618配台电脑</h1><p>攒了大半年的配置，终于能在几个小时之后的618化为现实了。</p><p>以下就是我的配置：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">CPU</span>：<span class="hljs-built_in">R5</span> <span class="hljs-number">2600</span><br>主板：微星B450M MORTAR<br>显卡：蓝宝石RX580 白金版OC<br>内存：十铨火神DDR4 <span class="hljs-number">3000</span> 8G*<span class="hljs-number">2</span><br>固态硬盘：西部数据SN500<br>机械硬盘：西部数据蓝盘<span class="hljs-number">2T</span><br>散热：大镰刀赤兔马<br>电源：酷冷至尊GX550 550W<br>机箱：先马黑洞标准版<br></code></pre></td></tr></table></figure><p>AMD,YES! 😄</p>]]></content>
      
      
      <categories>
          
          <category> DIY </category>
          
          <category> 装机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Next博客搭建</title>
      <link href="/posts/997970397/"/>
      <url>/posts/997970397/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-Next博客搭建"><a class="header-anchor" href="#Hexo-Next博客搭建"></a>Hexo+Next博客搭建</h2><h3 id="1-安装Hexo"><a class="header-anchor" href="#1-安装Hexo"></a>1.安装Hexo</h3><p>在安装Hexo前，需确保已安装以下程序：</p><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Should be at least nodejs 6.9)</p></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>使用npm进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="2-建站"><a class="header-anchor" href="#2-建站"></a>2.建站</h3><p>安装完成之后，在你的博客目录下初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>进入博客目录安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><h3 id="3-配置站点"><a class="header-anchor" href="#3-配置站点"></a>3.配置站点</h3><p>打开根目录下的_config.yml文件</p><p>配置网站基础信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">zhuweitung&#x27;s</span> <span class="hljs-string">blog</span> <span class="hljs-comment"># 网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">我们的征途是星辰大海。</span> <span class="hljs-comment"># 网站副标题</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">zhuweitung</span> <span class="hljs-comment"># 您的名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span> <span class="hljs-comment"># 网站使用的语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span> <span class="hljs-comment"># 网站时区</span><br></code></pre></td></tr></table></figure><p>配置新建文章的文件名格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day-:title.md</span> <span class="hljs-comment"># 例如.2019-06-02-xxx.md</span><br></code></pre></td></tr></table></figure><h3 id="4-使用Github-Pages进行托管"><a class="header-anchor" href="#4-使用Github-Pages进行托管"></a>4.使用Github-Pages进行托管</h3><p>新建项目，项目名必须要遵守格式：<a href="http://xn--eqr924acs7a.github.io">账户名.github.io</a>，并勾选Initialize this repository with a README。</p><p>建完之后，在账户下的 <code>settings</code> &gt;&gt; <code>SSH and GPG keys</code> 中添加 SSH key，内容为~/.ssh/id_rsa_pub 文件中的内容。</p><p>测试添加ssh是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>复制github项目的ssh地址，并配置_config.yml #Deployment 项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:zhuweitung/zhuweitung.github.io.git</span> <span class="hljs-comment">#github</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>hexo生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>在本地预览效果（默认localhost:4000）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>部署到github上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>通过xxx.github.io查看你的博客</p><h3 id="5-安装next"><a class="header-anchor" href="#5-安装next"></a>5.安装next</h3><p>进入根目录，将hexo-theme-next项目clone到 themes/next下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> hexo<br>$ git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>配置<code>站点配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br>theme: next<br></code></pre></td></tr></table></figure><p>验证主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo s<br></code></pre></td></tr></table></figure><h3 id="6-主题基本配置"><a class="header-anchor" href="#6-主题基本配置"></a>6.主题基本配置</h3><p>新增分类和标签页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page tags<br>$ hexo new page categories<br></code></pre></td></tr></table></figure><p>在<code>source\tags\index.md</code>文件头部中增加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">type: &quot;tags&quot;<br>comments: false<br></code></pre></td></tr></table></figure><p>在<code>source\categories\index.md</code>文件头部中增加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">type: &quot;categories&quot;<br>comments: false<br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置标签和分类的路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置个人社交网站</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">social:</span><br>  <span class="hljs-attr">GitHub:</span> <span class="hljs-string">https://github.com/zhuweitung</span> <span class="hljs-string">||</span> <span class="hljs-string">github</span><br>  <span class="hljs-attr">E-Mail:</span> <span class="hljs-string">mailto:zhuweitung@foxmail.com</span> <span class="hljs-string">||</span> <span class="hljs-string">envelope</span><br>  <span class="hljs-attr">Weibo:</span> <span class="hljs-string">https://weibo.com/CarolBruce</span> <span class="hljs-string">||</span> <span class="hljs-string">weibo</span><br>  <span class="hljs-attr">Google:</span> <span class="hljs-string">https://plus.google.com/zhuweitung</span> <span class="hljs-string">||</span> <span class="hljs-string">google</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置侧边栏个人头像</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Sidebar Avatar</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">https://ws3.sinaimg.cn/large/d67ca93ely1g3n01pbc5dj2046046jrw.jpg</span> <br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置博客中的代码块可复制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">show_result:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">flat</span><br></code></pre></td></tr></table></figure><p>设置网站动态背景</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/next<br>$ git <span class="hljs-built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="hljs-built_in">source</span>/lib/canvas-nest<br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中启用canvas_nest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">canvas_nest:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="7-安装第三方插件"><a class="header-anchor" href="#7-安装第三方插件"></a>7.安装第三方插件</h3><h4 id="a-添加本地搜索功能"><a class="header-anchor" href="#a-添加本地搜索功能"></a>a.添加本地搜索功能</h4><p>安装hexo-generator-search依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-generator-search --save<br></code></pre></td></tr></table></figure><p>修改<code>站点配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Search </span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中启用本地搜索</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span> <span class="hljs-string">auto</span><br>  <span class="hljs-attr">top_n_per_article:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="b-用Leancloud统计文章阅读量"><a class="header-anchor" href="#b-用Leancloud统计文章阅读量"></a>b.用Leancloud统计文章阅读量</h4><p><code>注册Leancloud</code>&gt;&gt;<code>创建应用</code>&gt;&gt;<code>开发版</code>&gt;&gt;<code>创建</code></p><p>创建的应用上点击<code>存储</code>，新建一个名为<code>Counter</code>的表，选择<code>无限制</code>，创建Class。</p><p><code>设置</code> &gt;&gt;<code>应用Key</code>，复制<code>App ID</code>和<code>App Key</code>。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">***</span> <span class="hljs-comment"># 你的app_id</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">***</span> <span class="hljs-comment"># 你的app_key</span><br></code></pre></td></tr></table></figure><p>将自己的博客域名（<a href="https://zhuweitung.github.io">https://zhuweitung.github.io</a>）加入<code>设置</code>&gt;&gt;<code>安全中心</code>&gt;&gt;<code>Web安全域名</code>中。</p><h4 id="c-用Valine实现评论系统"><a class="header-anchor" href="#c-用Valine实现评论系统"></a>c.用Valine实现评论系统</h4><p>Valine使用的也是Leancloud的app_id和app_key。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">***</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">***</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">欢迎留言</span><br></code></pre></td></tr></table></figure><h4 id="d-添加字数和阅读时间统计"><a class="header-anchor" href="#d-添加字数和阅读时间统计"></a>d.添加字数和阅读时间统计</h4><p>安装<code>hexo-symbols-count-time</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-symbols-count-time --save<br></code></pre></td></tr></table></figure><p>修改<code>站点配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 字数统计</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">symbols:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 文章字数</span><br>  <span class="hljs-attr">time:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 阅读时长</span><br>  <span class="hljs-attr">total_symbols:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 所有文章总字数</span><br>  <span class="hljs-attr">total_time:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 所有文章阅读中时长</span><br></code></pre></td></tr></table></figure><p>修改`主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">awl:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">wpm:</span> <span class="hljs-number">275</span><br></code></pre></td></tr></table></figure><h4 id="e-嵌入豆瓣个人主页"><a class="header-anchor" href="#e-嵌入豆瓣个人主页"></a>e.嵌入豆瓣个人主页</h4><p>安装<code>hexo-douban</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-douban --save<br></code></pre></td></tr></table></figure><p>在<code>站点配置文件</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">douban:</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">你的豆瓣id</span><br>  <span class="hljs-attr">builtin:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">book:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;图书&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;书籍是人类进步的阶梯。&#x27;</span><br>  <span class="hljs-attr">movie:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;电影&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;人生就是一部电影。&#x27;</span><br>  <span class="hljs-attr">game:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;游戏&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;人生就是一场游戏。&#x27;</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">10000</span> <br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>的menu中添加路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span><br>  <span class="hljs-attr">movies:</span> <span class="hljs-string">/movies/</span> <span class="hljs-string">||</span> <span class="hljs-string">film</span><br></code></pre></td></tr></table></figure><p>使用一下命令生成豆瓣电影页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo douban -m<br></code></pre></td></tr></table></figure><p>由于<code>hexo douban</code> 和<code>hexo deploy</code>都是<code>d</code>开头，所以部署时只能使用<code>hexo deploy</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWorld</title>
      <link href="/posts/2004290681/"/>
      <url>/posts/2004290681/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
