<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rclone+onedrive备份服务器</title>
    <link href="/posts/4034988835/"/>
    <url>/posts/4034988835/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>rclone可以将文件备份到云存储，onedrive是可靠云存储空间，两者结合可以实现服务器上重要文件的备份。</p><h2 id="rclone安装"><a class="header-anchor" href="#rclone安装"></a>rclone安装</h2><blockquote><p>参考官方文档 <a href="https://rclone.org/install/">Install (rclone.org)</a></p></blockquote><p>使用一键安装脚本快速安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(curl -Ls https://rclone.org/install.sh)<br></code></pre></td></tr></table></figure><p>检查是否安装正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone version<br></code></pre></td></tr></table></figure><h2 id="获取onedrive客户端Id和密钥"><a class="header-anchor" href="#获取onedrive客户端Id和密钥"></a>获取onedrive客户端Id和密钥</h2><blockquote><p>参考官方文档 <a href="https://rclone.org/onedrive/#getting-your-own-client-id-and-key">Microsoft OneDrive (rclone.org)</a></p></blockquote><h3 id="在azure上注册新应用"><a class="header-anchor" href="#在azure上注册新应用"></a>在azure上注册新应用</h3><p>访问 <a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">azure 注册应用</a>，点击<strong>新注册</strong></p><p><img src="https://img.kedr.cc/picbed/202206221920461.png" alt=""></p><p>输入<strong>应用名称</strong>，选择<strong>任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户和个人 Microsoft 帐户(例如，Skype、Xbox)</strong>，重定向URI选择<strong>Web</strong>，并填入<strong><a href="http://localhost:53682/">http://localhost:53682/</a></strong>，点击注册</p><p><img src="https://img.kedr.cc/picbed/202206221923487.png" alt=""></p><p>注册成功后，点击概述，复制客户端ID备用</p><p><img src="https://img.kedr.cc/picbed/202206221929038.png" alt=""></p><h3 id="创建客户端密码"><a class="header-anchor" href="#创建客户端密码"></a>创建客户端密码</h3><p>依次点击<strong>证书和密码</strong>、<strong>新客户端密码</strong>，添加客户端密码，截止期限最多24个月，点击<strong>添加</strong></p><p><img src="https://img.kedr.cc/picbed/202206221933056.png" alt=""></p><p><img src="https://img.kedr.cc/picbed/202206221935693.png" alt=""></p><p>复制密钥值备用！刚创建时才能看到密钥值，如果看不到了，就删掉重新创建试试吧。</p><h3 id="设置API权限"><a class="header-anchor" href="#设置API权限"></a>设置API权限</h3><p>依次点击<strong>API权限</strong>、<strong>添加权限</strong>、<strong>Microsoft Graph</strong>、<strong>委托的权限</strong>，将以下权限全部勾选上 Files.Read, Files.ReadWrite, Files.Read.All, Files.ReadWrite.All, offline_access, User.Read, Sites.Read.All</p><p><img src="https://img.kedr.cc/picbed/202206221940284.png" alt=""></p><p>最终的权限列表</p><p><img src="https://img.kedr.cc/picbed/202206221944446.png" alt=""></p><h2 id="获取token"><a class="header-anchor" href="#获取token"></a>获取token</h2><h3 id="在windows上安装rclone"><a class="header-anchor" href="#在windows上安装rclone"></a>在windows上安装rclone</h3><p>在 <a href="https://rclone.org/downloads/">官方</a>下载windows版本并解压</p><h3 id="接收许可获取token"><a class="header-anchor" href="#接收许可获取token"></a>接收许可获取token</h3><p>在rclone解压目录下运行命令行，输入以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">.\rclone.exe authorize onedrive &quot;应用程序(客户端)ID&quot; &quot;客户端密钥值&quot;<br></code></pre></td></tr></table></figure><p>在弹出的浏览器中选择接受，回到命令行窗口，<code>access_token</code>已经打印屏幕上，复制token备用</p><h2 id="配置rclone"><a class="header-anchor" href="#配置rclone"></a>配置rclone</h2><p>回到linux服务器上，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone config<br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 输入自定义名称 remote</span><br><span class="hljs-comment"># 输入 28</span><br><span class="hljs-comment"># 粘贴客户端id</span><br><span class="hljs-comment"># 粘贴客户端密钥值</span><br><span class="hljs-comment"># 根据自已服务器的位置选择区域 1</span><br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 输入 n</span><br><span class="hljs-comment"># 粘贴access_token</span><br><span class="hljs-comment"># 输入 1</span><br><span class="hljs-comment"># 此时会列出你的onedrive地址，正确就输入 y</span><br><span class="hljs-comment"># 输入 y</span><br><span class="hljs-comment"># 输入 q 结束</span><br></code></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone lsd remote:<br></code></pre></td></tr></table></figure><p>如果列出onedrive上的文件夹就说明配置成功了</p><h2 id="备份重要文件到onedirve"><a class="header-anchor" href="#备份重要文件到onedirve"></a>备份重要文件到onedirve</h2><p>备份的话一般是两种方式</p><ul><li>将文件压缩后，用日期命名，备份到云端，本地备份文件保留一个周期</li><li>将本地文件镜像备份到云端</li></ul><p>我个人比较倾向于第二种</p><p>使用<code>rclone sync</code>来进行镜像备份，更详细地说明可以查看 <a href="https://rclone.org/commands/rclone_sync/">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rclone <span class="hljs-built_in">sync</span> -i 本地文件目录 remote:云端目标文件夹<br></code></pre></td></tr></table></figure><p>剩下的就是编写备份脚本，设置定时运行了，本篇文章就不再赘述。</p>]]></content>
    
    
    <categories>
      
      <category>backup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vps</tag>
      
      <tag>backup</tag>
      
      <tag>rclone</tag>
      
      <tag>onedrive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群搭建</title>
    <link href="/posts/331375146/"/>
    <url>/posts/331375146/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2><ul><li><p>虚拟机：hyper-v</p></li><li><p>系统：ubuntu-18.04.6-server</p></li></ul><h2 id="基础环境搭建"><a class="header-anchor" href="#基础环境搭建"></a>基础环境搭建</h2><h3 id="修改apt源"><a class="header-anchor" href="#修改apt源"></a>修改apt源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br>sudo sed -i <span class="hljs-string">&quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot;</span> /etc/apt/sources.list<br>sudo sed -i <span class="hljs-string">&quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot;</span> /etc/apt/sources.list<br></code></pre></td></tr></table></figure><h3 id="关闭防火墙"><a class="header-anchor" href="#关闭防火墙"></a>关闭防火墙</h3><p>整明白了之后再只开放具体的端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop ufw<br>systemctl <span class="hljs-built_in">disable</span> ufw<br></code></pre></td></tr></table></figure><h3 id="关闭swap"><a class="header-anchor" href="#关闭swap"></a>关闭swap</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时</span><br>swapoff -a<br><span class="hljs-comment"># 永久，注释文件中包含swap的行</span><br>vim /etc/fstab<br></code></pre></td></tr></table></figure><h3 id="span-id-配置hosts-配置hosts-span"><a class="header-anchor" href="#span-id-配置hosts-配置hosts-span"></a><span id="配置hosts">配置hosts</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/hosts<br>192.168.137.100 k8s1<br>192.168.137.101 k8s2<br>192.168.137.102 k8s3<br></code></pre></td></tr></table></figure><p>等基础环境搭建完成，每个节点分别设置自己的hostname</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl set-hostname k8s1<br></code></pre></td></tr></table></figure><h3 id="配置kubernetes-apt源"><a class="header-anchor" href="#配置kubernetes-apt源"></a>配置kubernetes apt源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial main&quot;</span> &gt; /etc/apt/sources.list.d/kubernetes.list<br>apt update<br><span class="hljs-comment"># 若提示public key is not available，则取NO_PUBKEY后面的字符串的后8位替换到下面的命令执行</span><br>gpg --keyserver keyserver.ubuntu.com --recv-keys 307EA071<br>gpg --<span class="hljs-built_in">export</span> --armor 307EA071 | sudo apt-key add -<br>apt update<br></code></pre></td></tr></table></figure><h3 id="安装kubelet-kubeadm-kubectl"><a class="header-anchor" href="#安装kubelet-kubeadm-kubectl"></a>安装kubelet kubeadm kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y kubelet kubeadm kubectl<br>apt-mark hold kubelet kubeadm kubectl<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br></code></pre></td></tr></table></figure><h3 id="安装docker"><a class="header-anchor" href="#安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y docker-ce<br></code></pre></td></tr></table></figure><h3 id="安装所需镜像"><a class="header-anchor" href="#安装所需镜像"></a>安装所需镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm config images list<br><span class="hljs-comment"># 会列出以下镜像</span><br><span class="hljs-comment"># k8s.gcr.io/kube-apiserver:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-controller-manager:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-scheduler:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/kube-proxy:v1.23.1</span><br><span class="hljs-comment"># k8s.gcr.io/pause:3.6</span><br><span class="hljs-comment"># k8s.gcr.io/etcd:3.5.1-0</span><br><span class="hljs-comment"># k8s.gcr.io/coredns/coredns:v1.8.6</span><br></code></pre></td></tr></table></figure><p>由于上述命令执行所列出的镜像地址国内可能拉取不到，所以将地址更换为国内可访问的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取中转镜像</span><br>docker pull k8simage/kube-apiserver:v1.23.1<br>docker pull k8simage/kube-controller-manager:v1.23.1<br>docker pull k8simage/kube-scheduler:v1.23.1<br>docker pull k8simage/kube-proxy:v1.23.1<br>docker pull k8simage/pause:3.6<br>docker pull k8simage/etcd:3.5.1-0<br>docker pull xyz349925756/coredns:v1.8.6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重命名中转镜像标签</span><br>docker tag k8simage/kube-apiserver:v1.23.1 k8s.gcr.io/kube-apiserver:v1.23.1<br>docker tag k8simage/kube-controller-manager:v1.23.1 k8s.gcr.io/kube-controller-manager:v1.23.1<br>docker tag k8simage/kube-scheduler:v1.23.1 k8s.gcr.io/kube-scheduler:v1.23.1<br>docker tag k8simage/kube-proxy:v1.23.1 k8s.gcr.io/kube-proxy:v1.23.1<br>docker tag k8simage/pause:3.6 k8s.gcr.io/pause:3.6<br>docker tag k8simage/etcd:3.5.1-0 k8s.gcr.io/etcd:3.5.1-0<br>docker tag xyz349925756/coredns:v1.8.6  k8s.gcr.io/coredns/coredns:v1.8.6<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除中转标签</span><br>docker rmi k8simage/kube-apiserver:v1.23.1<br>docker rmi k8simage/kube-controller-manager:v1.23.1<br>docker rmi k8simage/kube-scheduler:v1.23.1<br>docker rmi k8simage/kube-proxy:v1.23.1<br>docker rmi k8simage/pause:3.6<br>docker rmi k8simage/etcd:3.5.1-0<br>docker rmi xyz349925756/coredns:v1.8.6<br></code></pre></td></tr></table></figure><h2 id="master配置"><a class="header-anchor" href="#master配置"></a>master配置</h2><p>上来先<a href="#%E9%85%8D%E7%BD%AEhosts">配置hosts</a>。</p><h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm init --apiserver-advertise-address=192.168.137.100 --kubernetes-version v1.23.1 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure><p><code>--apiserver-advertise-address</code>值为master的ip地址。</p><p>若卡在<code>kubelet</code>的启动，则按下面步骤进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看docker Cgroup Driver的值</span><br>docker info | grep -i cgroup<br><span class="hljs-comment"># 查看kubelet cgroupDriver的值</span><br><span class="hljs-built_in">cat</span> /var/lib/kubelet/config.yaml<br><span class="hljs-comment"># 若两个值不一致则将kubelet的cgroupDriver改为与docker一致</span><br>vim /var/lib/kubelet/config.yaml<br><span class="hljs-comment"># 重启kubelet</span><br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><p><span id="kubeadm_join">初始化成功后会提示</span>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubeadm <span class="hljs-built_in">join</span> 192.168.137.100:6443 --token 1094in.pjnnp76v94a1bef1 --discovery-token-ca-cert-hash sha256:82a29989a1425df58746d36286b58e0bd99898de40e055797c97134b35b9aad8<br><span class="hljs-comment"># token会在24小时后失效</span><br></code></pre></td></tr></table></figure><h3 id="创建-kube目录"><a class="header-anchor" href="#创建-kube目录"></a>创建.kube目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="安装-Pod-网络附加组件"><a class="header-anchor" href="#安装-Pod-网络附加组件"></a>安装 Pod 网络附加组件</h3><p>未安装时，执行命令<code>kubectl get pod -n kube-system</code>会有部分状态为<code>pending</code>（阻塞）。</p><p>组件有好多，也不知道装哪个，先装了顺眼的<code>flannel</code>吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://fastly.jsdelivr.net/gh/flannel-io/flannel@master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><p>过一段时间再执行<code>kubectl get pod -n kube-system</code>，可以发现所有状态都为<code>running</code>了。</p><h3 id="将master设为工作节点"><a class="header-anchor" href="#将master设为工作节点"></a>将master设为工作节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl taint nodes --all node-role.kubernetes.io/master-<br></code></pre></td></tr></table></figure><p>会输出<code>node/k8s1 untainted</code></p><h3 id="查看集群节点状态"><a class="header-anchor" href="#查看集群节点状态"></a>查看集群节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get nodes<br></code></pre></td></tr></table></figure><p>当前只有一个节点且状态为ready。</p><h2 id="node配置"><a class="header-anchor" href="#node配置"></a>node配置</h2><p>上来先<a href="#%E9%85%8D%E7%BD%AEhosts">配置hosts</a>。</p><h3 id="加入集群"><a class="header-anchor" href="#加入集群"></a>加入集群</h3><p>复制<a href="#kubeadm_join">master初始化成功后提示的命令</a>，执行。</p><p>再次执行<code>kubectl get nodes</code>查看节点，发现多了对应的节点。</p><p>再稍等片刻，所有的节点状态都为ready了。</p><p>至此集群搭建完成 :)</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/caijunchao/p/13486883.html">kubernetes系列—Ubuntu下搭建Kubernetes集群–k8s部署 - __夕颜 - 博客园 (cnblogs.com)</a></li><li><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">使用 kubeadm 创建集群 | Kubernetes</a></li><li>[集群网络系统 | Kubernetes](</li></ul>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客时间《正则表达式入门课》笔记</title>
    <link href="/posts/794273428/"/>
    <url>/posts/794273428/</url>
    
    <content type="html"><![CDATA[<h2 id="极客时间《正则表达式入门课》笔记"><a class="header-anchor" href="#极客时间《正则表达式入门课》笔记"></a>极客时间《正则表达式入门课》笔记</h2><h3 id="正则表达式的作用"><a class="header-anchor" href="#正则表达式的作用"></a>正则表达式的作用</h3><p>正则表达式一般有三种作用</p><ul><li>校验数据的有效性</li><li>查找符合要求的文本</li><li>对文本进行切割和替换</li></ul><h3 id="元字符"><a class="header-anchor" href="#元字符"></a>元字符</h3><p>正则表达式的基本单元是元字符。</p><p>按照理解可以将元字符分类成以下几类</p><ul><li>特殊单字符</li><li>空白符</li><li>范围</li><li>量词</li><li>断言</li></ul><h4 id="特殊单字符"><a class="header-anchor" href="#特殊单字符"></a>特殊单字符</h4><p><img src="https://img.kedr.cc/picbed/20211205144203.png" alt=""></p><h4 id="空白符"><a class="header-anchor" href="#空白符"></a>空白符</h4><p><img src="https://img.kedr.cc/picbed/20211205144108.png" alt=""></p><h4 id="量词"><a class="header-anchor" href="#量词"></a>量词</h4><p><img src="https://img.kedr.cc/picbed/20211205144518.png" alt=""></p><h4 id="范围"><a class="header-anchor" href="#范围"></a>范围</h4><p><img src="https://img.kedr.cc/picbed/20211205144743.png" alt=""></p><h3 id="量词与贪婪"><a class="header-anchor" href="#量词与贪婪"></a>量词与贪婪</h3><p>在正则中，表示次数的量词默认是<code>贪婪</code>的，在贪婪模式下，会尝试尽可能最大长度去匹配。</p><p><img src="https://img.kedr.cc/picbed/20211205145221.png" alt=""></p><h4 id="独占模式"><a class="header-anchor" href="#独占模式"></a>独占模式</h4><p>不管是贪婪模式，还是非贪婪模式，都需要发生回溯才能完成相应的功能。但是在一些场景下，我们不需要回溯，匹配不上返回失败就好了，因此正则中还有另外一种模式，独占模式，<strong>它类似贪婪匹配，也会尽可能多的匹配，但匹配过程不会发生回溯，匹配不上就会返回失败，因此在一些场合下性能会更好。</strong></p><p>例.</p><blockquote><p>regex = “xy{1,3}z”</p><p>text = “xyyz”</p></blockquote><p>贪婪模式下，y{1,3}会尽可能长的去匹配，及三个y，但字符串最后一个字符为z导致匹配不上，这时就会<code>向前回溯</code>，吐出当前字符 z，接着用正则中的 z 去匹配。</p><p><img src="https://img.kedr.cc/picbed/20211127144849.png" alt=""></p><p>修改表达式为非贪婪模式</p><blockquote><p>regex = “xy{1,3}?z”</p></blockquote><p>非贪婪模式下，y{1,3}?会尽可能短的去匹配，当匹配了一个y后，正则会用z与字符串中的第三个字符y比较，发现不匹配，这时正则就会<code>向前回溯</code>。</p><p><img src="https://img.kedr.cc/picbed/20211127145015.png" alt=""></p><p>独占模式就是在量词后面加上<code>+</code></p><p>修改为独占模式</p><blockquote><p>regex = “xy{1,3}+yz”</p></blockquote><p><img src="https://img.kedr.cc/picbed/20211127145338.png" alt=""></p><h4 id="TIPS"><a class="header-anchor" href="#TIPS"></a>TIPS</h4><blockquote><p>如果你有一个问题，你想到可以用正则来解决，那么你有两个问题了。</p><p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p><p><em>提醒我们在写正则的时候，一定要思考下回溯问题，避免使用低效的正则，引发线上问题。</em></p></blockquote><h3 id="分组与引用"><a class="header-anchor" href="#分组与引用"></a>分组与引用</h3><h4 id="分组"><a class="header-anchor" href="#分组"></a>分组</h4><p>在正则中使用<code>()</code>来分组，使用括号分组的表达式会保存子组（如果正则中出现了括号，那么我们就认为，这个子表达式在后续可能会再次被引用，会影响性能），每对括号会分配一个编号。</p><p>在括号内使用<code>?:</code>就可以不保存子组（不保存子组可以提高正则的性能），不会被分配编号。</p><p>在分组嵌套的情况下判断分组编号可以<strong>通过各分组左括号的顺序的判断</strong>。</p><p><img src="https://img.kedr.cc/picbed/20211128143130.png" alt=""></p><h4 id="引用"><a class="header-anchor" href="#引用"></a>引用</h4><p>在知道了分组的编号后（number），可以使用<code>\number</code>来对分组进行引用。</p><p><img src="https://img.kedr.cc/picbed/20211128143559.png" alt=""></p><h5 id="使用分组引用来替换"><a class="header-anchor" href="#使用分组引用来替换"></a>使用分组引用来替换</h5><p><img src="https://img.kedr.cc/picbed/20211128144140.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2021-11-28 14:39:18&quot;</span>;<br>date.replaceAll(<span class="hljs-string">&quot;((\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)) ((\\d&#123;2&#125;):(\\d&#123;2&#125;):(\\d&#123;2&#125;))&quot;</span>,<span class="hljs-string">&quot;日期$1 时间$5   $2年$3月$4日 $6时$7分$8秒&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="使用分组引用来查找"><a class="header-anchor" href="#使用分组引用来查找"></a>使用分组引用来查找</h5><p><img src="https://img.kedr.cc/picbed/20211128145101.png" alt=""></p><h3 id="匹配模式"><a class="header-anchor" href="#匹配模式"></a>匹配模式</h3><p>所谓匹配模式，指的是正则中一些<strong>改变元字符匹配行为</strong>的方式，比如匹配时不区分英文字母大小写。常见的匹配模式有 4 种，分别是不区分大小写模式、点号通配模式、多行模式和注释模式。</p><p>将模式修饰符放在正则表达式的前面就表示是此模式。模式修饰符是通过<code>(? 模式标识)</code> 的方式来表示的。</p><h4 id="不区分大小写模式（Case-Insensitive）"><a class="header-anchor" href="#不区分大小写模式（Case-Insensitive）"></a>不区分大小写模式（Case-Insensitive）</h4><p>不区分大小写的模式修饰符是<code>(?i)</code>。</p><blockquote><p>例，不区分大小写匹配dog</p><p>(?i)dog</p></blockquote><p>注意，如果模式修饰符在括号内，则作用范围是这个括号内的正则，而不是整个正则。</p><h4 id="点号通配模式（Dot-All）"><a class="header-anchor" href="#点号通配模式（Dot-All）"></a>点号通配模式（Dot All）</h4><p>点号通配模式的作用是可以让英文的<code>.</code>可以匹配任意字符。</p><p>模式修饰符是<code>(?s)</code>。</p><blockquote><p>例</p><p>(?s).+</p></blockquote><h4 id="多行匹配模式（Multiline）"><a class="header-anchor" href="#多行匹配模式（Multiline）"></a>多行匹配模式（Multiline）</h4><p>通常情况下，^匹配整个字符串的开头，$ 匹配整个字符串的结尾。多行匹配模式改变的就是 ^ 和 $ 的匹配行为。</p><p>模式修饰符为<code>(?m)</code>。</p><blockquote><p>例，匹配所有以the开头，以dog结尾的行</p><p>(?m)^the|dog$</p></blockquote><h4 id="注释模式（Comment）"><a class="header-anchor" href="#注释模式（Comment）"></a>注释模式（Comment）</h4><p>用于对正则进行注释说明。</p><p>模式修饰符为<code>(?#comment)</code>，comment为注释内容。</p><blockquote><p>例</p><p>(\w+)(?#word) \1(?#word repeat again)</p></blockquote><h4 id="总结"><a class="header-anchor" href="#总结"></a>总结</h4><p><img src="https://img.kedr.cc/picbed/20211205145309.png" alt=""></p><h3 id="断言"><a class="header-anchor" href="#断言"></a>断言</h3><p>断言的定义为只用于匹配位置，而不是文本内容本身。</p><p>常见的断言有三种：单词边界、行的开始或结束以及环视。</p><h4 id="单词边界"><a class="header-anchor" href="#单词边界"></a>单词边界</h4><p>在正则中使用<code>\b</code>来表示单词的边界</p><blockquote><p>例，匹配句子中的单词tom</p><p>tom  tomorrow.</p><p>正则写法：\btom\b</p><p>表示匹配以tom开头，以tom结束的单词</p></blockquote><h4 id="行的开始或结束"><a class="header-anchor" href="#行的开始或结束"></a>行的开始或结束</h4><p>在正则中使用<code>^</code>表示文本行的开始，<code>$</code>表示文本行的结束，配合前面讲到的多行模式<code>(?m)</code>可以实现多行匹配。</p><h4 id="环视"><a class="header-anchor" href="#环视"></a>环视</h4><p>环视就是要求匹配部分的前面或后面要满足（或不满足）某种规则。</p><table><thead><tr><th>正则</th><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>(?&lt;=Y)</td><td>肯定逆序环视</td><td>左边是Y</td></tr><tr><td>(?&lt;!Y)</td><td>否定逆序环视</td><td>左边不是Y</td></tr><tr><td>(?=Y)</td><td>肯定顺序环视</td><td>右边是Y</td></tr><tr><td>(?!Y)</td><td>否定顺序环视</td><td>右边不是Y</td></tr></tbody></table><p><em>左尖括号代表看左边，没有尖括号是看右边，感叹号是非的意思。</em></p><p>注：环视正则表达式中的括号不会被视为子组。</p><h4 id="总结-v2"><a class="header-anchor" href="#总结-v2"></a>总结</h4><p><img src="https://img.kedr.cc/picbed/20211205151554.png" alt=""></p><h3 id="正则转义"><a class="header-anchor" href="#正则转义"></a>正则转义</h3><p>正则中使用<code>\</code>来进行转义。</p><h4 id="元字符的转义"><a class="header-anchor" href="#元字符的转义"></a>元字符的转义</h4><p>如果在正则中要查找元字符本身时需要使用转义字符。</p><h5 id="量词转义"><a class="header-anchor" href="#量词转义"></a>量词转义</h5><p>量词<code>*</code>、<code>+</code>、<code>&gt;</code>、<code>-</code>、<code>^</code>、<code>$</code>、<code>|</code>等，直接在前面加<code>\</code>。</p><h5 id="括号的转义"><a class="header-anchor" href="#括号的转义"></a>括号的转义</h5><p>在正则中方括号<code>[]</code>和 花括号 <code>&#123;&#125;</code> 只需转义开括号，但圆括号 <code>()</code> 两个都要转义。</p><h4 id="使用函数消除元字符特殊含义"><a class="header-anchor" href="#使用函数消除元字符特殊含义"></a>使用函数消除元字符特殊含义</h4><p>使用过多的转义字符会影响正则表达式的阅读和理解，可以使用编程语言自带的转义函数来实现转义。</p><table><thead><tr><th>编程语言</th><th>转义函数</th></tr></thead><tbody><tr><td>python</td><td>re.escape(text)</td></tr><tr><td>go</td><td>regexp.QuoteMeta(text)</td></tr><tr><td>java</td><td>Pattern.quote(text)</td></tr></tbody></table><h4 id="字符组的转义"><a class="header-anchor" href="#字符组的转义"></a>字符组的转义</h4><p>字符组就是用方括号<code>[]</code>表示的一些字符，如<code>[a-z]</code>。</p><p>字符组中需要转义的有三种情况：</p><ul><li><code>^</code>在方括号中，且在首位</li><li><code>-</code>在方括号中，且不再首位</li><li><code>]</code>在方括号中，且不再首位</li></ul><p>方括号中的其他元字符不再具有特殊含义，仅代表字符本身。</p><h4 id="总结-v3"><a class="header-anchor" href="#总结-v3"></a>总结</h4><p><img src="https://img.kedr.cc/picbed/20211211160309.png" alt=""></p><h3 id="正则表达式流派"><a class="header-anchor" href="#正则表达式流派"></a>正则表达式流派</h3><p>由于各种历史原因导致正则表达式有很多种流派，其中<code>POSIX 流派</code>与<code>PCRE 流派</code>是目前正则表达式流派中的两大最主要的流派。</p><h4 id="POSIX流派"><a class="header-anchor" href="#POSIX流派"></a>POSIX流派</h4><p>Unix 系统或类 Unix 系统上的大部分工具，如 grep、sed、awk 等，均遵循该标准。</p><p>POSIX 规范定义了正则表达式的两种标准：</p><ul><li>BRE 标准（Basic Regular Expression 基本正则表达式）</li><li>ERE 标准（Extended Regular Expression 扩展正则表达式）</li></ul><p><img src="https://img.kedr.cc/picbed/20211212153215.png" alt=""></p><p><strong>linux下的一些命令默认使用BRE标准，可以使用参数来使用ERE标准或PCRE标准。</strong></p><h5 id="POSIX字符组"><a class="header-anchor" href="#POSIX字符组"></a>POSIX字符组</h5><p>与一般的正则表达式不一样的是，POSIX定义了自己的字符组。</p><p><img src="https://img.kedr.cc/picbed/20211212153327.png" alt=""></p><h4 id="PCRE流派"><a class="header-anchor" href="#PCRE流派"></a>PCRE流派</h4><p>目前绝大部分常用编程语言所采用的正则引擎，基本都属于 PCRE 流派。</p><p>但是不同的编程语言还有兼容问题。</p><ul><li>直接兼容：perl、php、preg、pcre库等perl系</li><li>间接兼容：java系、python系，JavaScript系、.net系等</li></ul><h4 id="总结-v4"><a class="header-anchor" href="#总结-v4"></a>总结</h4><p><img src="https://img.kedr.cc/picbed/20211212154551.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>正则</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅尝ES6</title>
    <link href="/posts/3657735712/"/>
    <url>/posts/3657735712/</url>
    
    <content type="html"><![CDATA[<h2 id="Class和普通构造函数"><a class="header-anchor" href="#Class和普通构造函数"></a>Class和普通构造函数</h2><blockquote><p>class为es6的语法糖；</p><p>总的来说class的语法更接近面向对象，更加已读，对于后端开发来说更容易上手；</p><p>class底层原理还是prototype；</p></blockquote><h3 id="普通构造函数实现"><a class="header-anchor" href="#普通构造函数实现"></a>普通构造函数实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">User</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">login</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;user is logining&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.<span class="hljs-title function_">login</span>();<br></code></pre></td></tr></table></figure><h3 id="class实现"><a class="header-anchor" href="#class实现"></a>class实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-comment">// 类方法</span><br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;user is logining&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.<span class="hljs-title function_">login</span>();<br></code></pre></td></tr></table></figure><h2 id="继承"><a class="header-anchor" href="#继承"></a>继承</h2><h3 id="普通继承实现"><a class="header-anchor" href="#普通继承实现"></a>普通继承实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">eat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eating&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">wang</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wangwangwang&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Dog继承Animal</span><br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br><span class="hljs-keyword">var</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>dog.<span class="hljs-title function_">wang</span>();<br>dog.<span class="hljs-title function_">eat</span>();<br></code></pre></td></tr></table></figure><h3 id="class实现-v2"><a class="header-anchor" href="#class实现-v2"></a>class实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eating&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(name);<br>    &#125;<br>    <span class="hljs-title function_">wang</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;wangwangwang&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;bog&#x27;</span>);<br>dog.<span class="hljs-title function_">wang</span>();<br>dog.<span class="hljs-title function_">eat</span>();<br></code></pre></td></tr></table></figure><h2 id="var与let作用域"><a class="header-anchor" href="#var与let作用域"></a>var与let作用域</h2><blockquote><p><code>let</code>在es6中用来声明变量，用法类型与<code>var</code></p></blockquote><ul><li><p><code>var</code>的作用域为函数上下文或全局上下文；</p></li><li><p><code>let</code>的作用域由最近的一对<code>&#123;&#125;</code>所限定，及只在局部有效；</p></li><li><p><code>var</code>变量可以重复声明，但是<code>let</code>变量重复声明会报错（SyntaxError）；</p></li><li><p><code>let</code>适合在循环中声明变量；</p></li></ul><h2 id="变量的解构赋值"><a class="header-anchor" href="#变量的解构赋值"></a>变量的解构赋值</h2><blockquote><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p></blockquote><h3 id="数组的解构赋值"><a class="header-anchor" href="#数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-comment">// 为变量赋值，只能直接指定值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// 解构赋值写法</span><br><span class="hljs-comment">// 从数组中提取值，按照对应位置，对变量赋值</span><br><span class="hljs-keyword">var</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 允许嵌套</span><br><span class="hljs-comment">// 这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值</span><br><span class="hljs-keyword">let</span> [foo, [[bar], baz]] = [<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>], <span class="hljs-number">3</span>]];<br><br><span class="hljs-comment">// 如果解构不成功，变量的值就等于undefined</span><br><span class="hljs-keyword">var</span> [foo] = [];<br><span class="hljs-keyword">var</span> [bar, foo] = [<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// 不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组</span><br><span class="hljs-keyword">let</span> [x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// 指定默认值</span><br><span class="hljs-keyword">var</span> [foo = <span class="hljs-literal">true</span>] = [];<br><br><span class="hljs-comment">// 默认值可以引用解构赋值的其他变量，但该变量必须已经声明</span><br><span class="hljs-keyword">let</span> [x = <span class="hljs-number">1</span>, y = x] = [];<br></code></pre></td></tr></table></figure><h3 id="对象的解构赋值"><a class="header-anchor" href="#对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组解构赋值是按照顺序，而对象解构赋值则要求变量必须与属性同名，若不一致则需要两边属性名一致</span><br><span class="hljs-keyword">var</span> &#123; <span class="hljs-attr">foo</span>: foo, <span class="hljs-attr">bar</span>: bar &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;bbb&quot;</span> &#125;;<br><span class="hljs-comment">// 以上可以简写为</span><br><span class="hljs-keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&quot;bbb&quot;</span> &#125;;<br><br><span class="hljs-comment">// 同样也可以指定默认值</span><br><span class="hljs-keyword">var</span> &#123;x = <span class="hljs-number">3</span>&#125; = &#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串的解构赋值"><a class="header-anchor" href="#字符串的解构赋值"></a>字符串的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数的解构赋值"><a class="header-anchor" href="#函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x, y]</span>)&#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-title function_">add</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 默认值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, 0]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [0, 0]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="变量的解构赋值用途"><a class="header-anchor" href="#变量的解构赋值用途"></a>变量的解构赋值用途</h3><ol><li><p>交换变量的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[x, y] = [y, x];<br></code></pre></td></tr></table></figure></li><li><p>从函数返回多个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 返回一个数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-keyword">var</span> [a, b, c] = <span class="hljs-title function_">example</span>();<br><br><span class="hljs-comment">// 返回一个对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <span class="hljs-number">2</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> &#123; foo, bar &#125; = <span class="hljs-title function_">example</span>();<br></code></pre></td></tr></table></figure></li><li><p>函数参数的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 参数是一组有次序的值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">[x, y, z]</span>) &#123; ... &#125;<br><span class="hljs-title function_">f</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br><span class="hljs-comment">// 参数是一组无次序的值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">&#123;x, y, z&#125;</span>) &#123; ... &#125;<br><span class="hljs-title function_">f</span>(&#123;<span class="hljs-attr">z</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>提取JSON数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">867</span>, <span class="hljs-number">5309</span>]<br>&#125;;<br><br><span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: number &#125; = jsonData;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, status, number);<br></code></pre></td></tr></table></figure></li><li><p>函数参数的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">jQuery.<span class="hljs-property">ajax</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url, &#123;</span><br><span class="hljs-params">  <span class="hljs-keyword">async</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  beforeSend = <span class="hljs-keyword">function</span> () &#123;&#125;,</span><br><span class="hljs-params">  cache = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  complete = <span class="hljs-keyword">function</span> () &#123;&#125;,</span><br><span class="hljs-params">  crossDomain = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">  <span class="hljs-variable language_">global</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  // ... more config</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-comment">// ... do stuff</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>遍历Map结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; is &quot;</span> + value);<br>&#125;<br><br><span class="hljs-comment">// 获取键名</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 获取键值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [,value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>加载模块的指定方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SourceMapConsumer</span>, <span class="hljs-title class_">SourceNode</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;source-map&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="字符串的扩展"><a class="header-anchor" href="#字符串的扩展"></a>字符串的扩展</h2><h3 id="实用方法"><a class="header-anchor" href="#实用方法"></a>实用方法</h3><ul><li><p><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串；</p></li><li><p><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在源字符串的头部；</p></li><li><p><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在源字符串的尾部；</p></li><li><p>repeat()：方法返回一个新字符串，表示将原字符串重复<code>n</code>次，若n为小数则向下取整，若n为负数或报错；</p></li><li><p>padStart()，padEnd()：字符串补全长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;ababx&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;abax&#x27;</span><br><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xabab&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>) <span class="hljs-comment">// &#x27;xaba&#x27;</span><br><br><span class="hljs-comment">// 省略第二个参数，则会用空格补全长度</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &#x27;   x&#x27;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &#x27;x   &#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="模板字符串"><a class="header-anchor" href="#模板字符串"></a>模板字符串</h3><blockquote><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><p>模板字符串中嵌入变量，需要将变量名写在<code>$&#123;&#125;</code>之中。</p><p>大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。</p><p>模板字符串之中还能调用函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// js写法</span><br>$(<span class="hljs-string">&#x27;#result&#x27;</span>).<span class="hljs-title function_">append</span>(<br>  <span class="hljs-string">&#x27;There are &lt;b&gt;&#x27;</span> + basket.<span class="hljs-property">count</span> + <span class="hljs-string">&#x27;&lt;/b&gt; &#x27;</span> +<br>  <span class="hljs-string">&#x27;items in your basket, &#x27;</span> +<br>  <span class="hljs-string">&#x27;&lt;em&gt;&#x27;</span> + basket.<span class="hljs-property">onSale</span> +<br>  <span class="hljs-string">&#x27;&lt;/em&gt; are on sale!&#x27;</span><br>);<br><br><span class="hljs-comment">// 模板字符串写法</span><br>$(<span class="hljs-string">&#x27;#result&#x27;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">`</span><br><span class="hljs-string">  There are &lt;b&gt;<span class="hljs-subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span><br><span class="hljs-string">   in your basket, &lt;em&gt;<span class="hljs-subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span><br><span class="hljs-string">  are on sale!</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-comment">// 模板字符串嵌套</span><br><span class="hljs-keyword">const</span> data = [<br>    &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;&lt;Jane&gt;&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Bond&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Lars&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;&lt;Croft&gt;&#x27;</span> &#125;,<br>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">tmpl</span>(data));<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">tmpl</span> = addrs =&gt; <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;table&gt;</span><br><span class="hljs-string">  <span class="hljs-subst">$&#123;addrs.map(addr =&gt; <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">    &lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">    &lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">  `</span>).join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;</span></span><br><span class="hljs-string">  &lt;/table&gt;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h2 id="数组的扩展"><a class="header-anchor" href="#数组的扩展"></a>数组的扩展</h2><ul><li><p>Array.from()：将类似数组的对象（array-like object）和可遍历（iterable）的对象转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;;<br><span class="hljs-comment">// ES6的写法</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><br><span class="hljs-comment">// 常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象</span><br><span class="hljs-comment">// NodeList对象</span><br><span class="hljs-keyword">let</span> ps = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(ps).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br>&#125;);<br><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组</span><br><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>];<br>&#125;<br><span class="hljs-comment">// NodeList对象</span><br>[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)]<br></code></pre></td></tr></table></figure></li><li><p>find()和findIndex()：用于找出第一个符合条件的数组成员或下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>].<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">9</span>;<br>&#125;) <span class="hljs-comment">// 10</span><br><span class="hljs-comment">// find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组</span><br></code></pre></td></tr></table></figure></li><li><p>fill()：填充数组</p></li><li><p>includes()：法返回一个布尔值，表示某个数组是否包含给定的值</p></li></ul><h2 id="扩展运算符"><a class="header-anchor" href="#扩展运算符"></a>扩展运算符</h2><blockquote><p>扩展运算符（spread）是三个点（<code>...</code>），将一个数组转为用逗号分隔的参数序列</p></blockquote><h3 id="用于函数调用"><a class="header-anchor" href="#用于函数调用"></a>用于函数调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>  array.<span class="hljs-title function_">push</span>(...items);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">38</span>];<br><span class="hljs-title function_">add</span>(...numbers) <span class="hljs-comment">// 42</span><br><br><span class="hljs-comment">// 扩展运算符与正常的函数参数可以结合使用，非常灵活</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">v, w, x, y, z</span>) &#123; &#125;<br><span class="hljs-keyword">var</span> args = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br><span class="hljs-title function_">f</span>(-<span class="hljs-number">1</span>, ...args, <span class="hljs-number">2</span>, ...[<span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><h3 id="替代数组的apply方法"><a class="header-anchor" href="#替代数组的apply方法"></a>替代数组的apply方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES5的写法</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>])<br><br><span class="hljs-comment">// ES6的写法</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...[<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>])<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">77</span>);<br></code></pre></td></tr></table></figure><h3 id="扩展运算符的应用"><a class="header-anchor" href="#扩展运算符的应用"></a>扩展运算符的应用</h3><ol><li><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES5</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">concat</span>(more)<br><span class="hljs-comment">// ES6</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ...more]<br><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<br><br><span class="hljs-comment">// ES5的合并数组</span><br>arr1.<span class="hljs-title function_">concat</span>(arr2, arr3);<br><span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br><br><span class="hljs-comment">// ES6的合并数组</span><br>[...arr1, ...arr2, ...arr3]<br><span class="hljs-comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span><br></code></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>first <span class="hljs-comment">// 1</span><br>rest  <span class="hljs-comment">// [2, 3, 4, 5]</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = [];<br>first <span class="hljs-comment">// undefined</span><br>rest  <span class="hljs-comment">// []:</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-string">&quot;foo&quot;</span>];<br>first  <span class="hljs-comment">// &quot;foo&quot;</span><br>rest   <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure></li><li><p>函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dateFields = <span class="hljs-title function_">readDateFields</span>(database);<br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(...dateFields);<br></code></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 扩展运算符还可以将字符串转为真正的数组</span><br>[...<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span><br></code></pre></td></tr></table></figure></li><li><p>实现了Iterator接口的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组</span><br><span class="hljs-keyword">var</span> nodeList = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> array = [...nodeList];<br></code></pre></td></tr></table></figure></li><li><p>Map和Set结构，Generator函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;one&#x27;</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;two&#x27;</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;three&#x27;</span>],<br>]);<br><br><span class="hljs-keyword">let</span> arr = [...map.<span class="hljs-title function_">keys</span>()]; <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="箭头函数"><a class="header-anchor" href="#箭头函数"></a>箭头函数</h2><blockquote><p>ES6允许使用“箭头”（<code>=&gt;</code>）定义函数。</p></blockquote><h3 id="基本用法"><a class="header-anchor" href="#基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = v =&gt; v;<br><br><span class="hljs-comment">// 上面的箭头函数等同于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) &#123;<br>  <span class="hljs-keyword">return</span> v;<br>&#125;;<br><br><span class="hljs-comment">// 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-comment">// 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; &#123; <span class="hljs-keyword">return</span> num1 + num2; &#125;<br><br><span class="hljs-comment">// 箭头函数可以与变量解构结合使用</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">full</span> = (<span class="hljs-params">&#123; first, last &#125;</span>) =&gt; first + <span class="hljs-string">&#x27; &#x27;</span> + last;<br></code></pre></td></tr></table></figure><h3 id="使用注意点"><a class="header-anchor" href="#使用注意点"></a>使用注意点</h3><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作Generator函数</li></ul><h2 id="对象的拓展"><a class="header-anchor" href="#对象的拓展"></a>对象的拓展</h2><h3 id="Object-is"><a class="header-anchor" href="#Object-is"></a><a href="http://Object.is">Object.is</a>()</h3><p>它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(&#123;&#125;, &#123;&#125;)<br><span class="hljs-comment">// false</span><br><br>+<span class="hljs-number">0</span> === -<span class="hljs-number">0</span> <span class="hljs-comment">//true</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(+<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign"><a class="header-anchor" href="#Object-assign"></a>Object.assign()</h3><blockquote><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><p>类似于jQuery中的$.extend()方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">var</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">var</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br>target <span class="hljs-comment">// &#123;a:1, b:2, c:3&#125;</span><br></code></pre></td></tr></table></figure><h4 id="常见用法"><a class="header-anchor" href="#常见用法"></a>常见用法</h4><ul><li><p>为对象添加属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>, &#123;x, y&#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>为对象添加方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>  <span class="hljs-title function_">someMethod</span>(<span class="hljs-params">arg1, arg2</span>) &#123;<br>    ···<br>  &#125;,<br>  <span class="hljs-title function_">anotherMethod</span>(<span class="hljs-params"></span>) &#123;<br>    ···<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 等同于下面的写法</span><br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">someMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg1, arg2</span>) &#123;<br>  ···<br>&#125;;<br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">anotherMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  ···<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">origin</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, origin);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>合并多个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> =<br>  (<span class="hljs-params">...sources</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, ...sources);<br></code></pre></td></tr></table></figure></li><li><p>为属性指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULTS</span> = &#123;<br>  <span class="hljs-attr">logLevel</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">outputFormat</span>: <span class="hljs-string">&#x27;html&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processContent</span>(<span class="hljs-params">options</span>) &#123;<br>  options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable constant_">DEFAULTS</span>, options);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="属性的遍历"><a class="header-anchor" href="#属性的遍历"></a>属性的遍历</h3><ol><li>for…in</li><li>Object.keys(obj)</li><li>Object.getOwnPropertyNames(obj)</li><li>Object.getOwnPropertySymbols(obj)</li><li>Reflect.ownKeys(obj)</li></ol>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java实现给word文件添加水印</title>
    <link href="/posts/15731478/"/>
    <url>/posts/15731478/</url>
    
    <content type="html"><![CDATA[<p>一开始使用<code>Aspose.words</code>来给word添加水印，尝试后发现会破坏原文件的格式，故放弃。</p><p>经过一系列资料的查找后，确认使用<code>spire.doc for java</code>来实现本功能。</p><h2 id="maven添加依赖"><a class="header-anchor" href="#maven添加依赖"></a>maven添加依赖</h2><blockquote><p>根据<a href="https://www.e-iceblue.cn/licensing/install-spirepdf-for-java-from-maven-repository.html">官方文档</a>引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>com.e-iceblue<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.e-iceblue.cn/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>e-iceblue<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spire.doc.free<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="程序核心代码"><a class="header-anchor" href="#程序核心代码"></a>程序核心代码</h2><blockquote><p>参考<a href="https://www.e-iceblue.cn/doc_java_watermark/java-add-multiple-image-watermarks-to-word-document.html">官方demo</a>的基础上，对水印的间距数量进行了优化，使多个水印能够均匀分布在一个页面上。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpireDocUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addWatermark</span><span class="hljs-params">(String srcFileName, String targetFileName, String watermarkText)</span> &#123;<br>        <span class="hljs-comment">//加载示例文档</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Document</span>();<br>        doc.loadFromFile(srcFileName);<br><br>        <span class="hljs-comment">//页边距</span><br>        <span class="hljs-type">Section</span> <span class="hljs-variable">pageSection</span> <span class="hljs-operator">=</span> doc.getSections().get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getTop();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getRight();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">bottom</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getBottom();<br>        <span class="hljs-type">float</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getMargins().getLeft();<br>        <span class="hljs-comment">//纸张宽高</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getPageSize().getWidth();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> pageSection.getPageSetup().getPageSize().getHeight();<br><br>        <span class="hljs-comment">//添加水印并设置大小</span><br>        <span class="hljs-type">ShapeObject</span> <span class="hljs-variable">shape</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeObject</span>(doc, ShapeType.Text_Plain_Text);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shapeWidth</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shapeHeight</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        shape.setWidth(shapeWidth);<br>        shape.setHeight(shapeHeight);<br>        <span class="hljs-comment">//设置水印文本内容</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radian</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * Math.PI / <span class="hljs-number">360</span> * <span class="hljs-number">45</span>;<br>        shape.setRotation(-<span class="hljs-number">45</span>);<br>        shape.getWordArt().setFontFamily(<span class="hljs-string">&quot;SimSun&quot;</span>);<br>        shape.getWordArt().setText(watermarkText);<br>        <span class="hljs-comment">//设置水印颜色</span><br>        shape.setFillColor(Color.lightGray);<br>        shape.setStrokeColor(Color.lightGray);<br><br>        <span class="hljs-comment">//水印列数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">colNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//水印行数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-comment">//水印真实宽度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">shapeRealWidth</span> <span class="hljs-operator">=</span> Math.cos(radian) * (shapeWidth + shapeHeight);<br>        <span class="hljs-comment">//水印真实高度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">shapeRealHeight</span> <span class="hljs-operator">=</span> Math.sin(radian) * (shapeWidth + shapeHeight);<br>        <span class="hljs-comment">//水印中心水平间距</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">xGap</span> <span class="hljs-operator">=</span> (width - shapeRealWidth * colNum) / (colNum - <span class="hljs-number">1</span>) + shapeRealWidth;<br>        <span class="hljs-comment">//水印中心垂直间距</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">yGap</span> <span class="hljs-operator">=</span> (height - shapeRealHeight * rowNum) / (rowNum - <span class="hljs-number">1</span>) + shapeRealHeight;<br>        <span class="hljs-comment">//水印水平起始位置</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">startX</span> <span class="hljs-operator">=</span> -left - (shapeWidth - shapeRealWidth) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//水印水平垂直位置</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">startY</span> <span class="hljs-operator">=</span> -Math.cos(radian) * shapeHeight;<br><br>        Section section;<br>        HeaderFooter header;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; n &lt; doc.getSections().getCount(); n++) &#123;<br>            section = doc.getSections().get(n);<br>            <span class="hljs-comment">//获取section的页眉</span><br>            header = section.getHeadersFooters().getHeader();<br>            Paragraph paragraph;<br><br>            <span class="hljs-keyword">if</span> (header.getParagraphs().getCount() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//如果页眉有段落，取它第一个段落</span><br>                paragraph = header.getParagraphs().get(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//否则新增加一个段落到页眉</span><br>                paragraph = header.addParagraph();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; colNum; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; rowNum; j++) &#123;<br>                    <span class="hljs-comment">//复制水印并设置多行多列位置</span><br>                    shape = (ShapeObject) shape.deepClone();<br>                    shape.setHorizontalPosition((<span class="hljs-type">float</span>) (startX + xGap * i));<br>                    shape.setVerticalPosition((<span class="hljs-type">float</span>) (startY + yGap * j));<br>                    paragraph.getChildObjects().add(shape);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//保存文档</span><br>        doc.saveToFile(targetFileName, FileFormat.Docx_2013);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最终效果"><a class="header-anchor" href="#最终效果"></a>最终效果</h2><p><img src="https://img.kedr.cc/picbed/demo-out_01.png" alt="demo-out_01"></p>]]></content>
    
    
    <categories>
      
      <category>word</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>水印</tag>
      
      <tag>word</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows Terminal及Powershell安装和美化</title>
    <link href="/posts/2820324998/"/>
    <url>/posts/2820324998/</url>
    
    <content type="html"><![CDATA[<h2 id="效果预览"><a class="header-anchor" href="#效果预览"></a>效果预览</h2><p><img src="https://img.kedr.cc/picbed/image-20210512191609185.png" alt="image-20210512191609185"></p><h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2><h3 id="安装Windows-Terminal-或-Windows-Terminal-Preview"><a class="header-anchor" href="#安装Windows-Terminal-或-Windows-Terminal-Preview"></a>安装Windows Terminal 或 Windows Terminal Preview</h3><p>可以从下面两种方式进行安装</p><blockquote><ol><li>从<code>GitHub</code><a href="https://github.com/microsoft/terminal/releases">Releases · microsoft/terminal (github.com)</a>中下载文件格式为<code>msixbundle</code>的文件，双击安装；</li><li>从<code>微软商店</code>搜索<a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?rtc=1&amp;activetab=pivot:overviewtab">Windows Terminal</a>或<a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n8g5rfz9xk3?activetab=pivot:overviewtab">Windows Terminal Preview</a>中直接安装；</li></ol></blockquote><h3 id="安装PowerShell-或-PowerShell-Preview"><a class="header-anchor" href="#安装PowerShell-或-PowerShell-Preview"></a>安装PowerShell 或 PowerShell Preview</h3><p>可以从下面两种方式进行安装</p><blockquote><ol><li>从<code>GitHub</code><a href="https://github.com/PowerShell/PowerShell/releases">Releases · PowerShell/PowerShell (github.com)</a>中下载文件格式为<code>msixbundle</code>的文件，双击安装；</li><li>从<code>微软商店</code>搜索<a href="https://www.microsoft.com/zh-cn/p/powershell/9mz1snwt0n5d?activetab=pivot:overviewtab">PowerShell</a>或<a href="https://www.microsoft.com/zh-cn/p/powershell-preview/9p95zzktnrn4?activetab=pivot:overviewtab">PowerShell Preview</a>中直接安装；</li></ol></blockquote><h2 id="离线环境下安装"><a class="header-anchor" href="#离线环境下安装"></a>离线环境下安装</h2><ul><li>将下载到的<code>msixbundle</code>文件的后缀改为<code>zip</code>，并解压</li><li>将解压文件夹内文件名为<code>CascadiaPackage_***_x64.msix</code>的文件后缀改为<code>zip</code>，并解压</li><li>将解压文件夹改名为<code>Windows.TerminalPreview</code>（可随意命名）并放到自己软件安装的常用目录，我放到<code>C:\Program Files\</code>下</li><li>将<code>Open Windows Terminal Here</code>添加到右键菜单</li></ul><h2 id="设置"><a class="header-anchor" href="#设置"></a>设置</h2><ul><li>在<code>Windows Terminal</code>&gt;启动中设置<code>PowerShell</code>为默认配置文件；</li><li>在<code>Windows Terminal</code>&gt;外观中设置主题为深色；</li></ul><h2 id="美化"><a class="header-anchor" href="#美化"></a>美化</h2><h3 id="安装PowerShell模块"><a class="header-anchor" href="#安装PowerShell模块"></a>安装PowerShell模块</h3><p>主要安装<code>Posh-Git</code>、<code>Oh-My-Posh</code>、<code>DirColors</code>、<code>git-aliases</code>这4个模块</p><blockquote><p>Posh-Git作用：显示Git状态摘要信息；</p><p>Oh-My-Posh作用：提供多种shell主题；</p><p>DirColors作用：文件夹和文件以不用颜色区分；</p><p>git-aliases作用：git版本控制快捷键，功能和命令的集合；</p></blockquote><p>通过<code>Windows Terminal</code>打开<code>PowerShell</code>执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Install-Module</span> DirColors<br><span class="hljs-built_in">Install-Module</span> git<span class="hljs-literal">-aliases</span> <span class="hljs-literal">-AllowClobber</span><br></code></pre></td></tr></table></figure><p>安装过程中遇到提示输入<code>Y</code>或<code>A</code></p><h3 id="选择主题"><a class="header-anchor" href="#选择主题"></a>选择主题</h3><p>在<code>PowerShell</code>中执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Get-PoshThemes</span><br></code></pre></td></tr></table></figure><p><img src="https://img.kedr.cc/picbed/20210513115054.png" alt="image-20210513115047899"></p><p>选择自己喜欢的主题，我这里选择了<code>zash</code></p><p>执行以下命令预览效果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-PoshPrompt</span> <span class="hljs-literal">-Theme</span> zash<br></code></pre></td></tr></table></figure><h3 id="修改字体"><a class="header-anchor" href="#修改字体"></a>修改字体</h3><p>安装完主题之后你可能会发现主题有些地方会出现乱码，这是因为当前的字体不支持</p><p>因此需要安装一款适合当前主题的字体。</p><p>这里推荐安装<code>MesloLGM NF</code>字体，从<a href="https://github.91chifun.workers.dev/https://github.com//ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">ryanoasis/nerd-fonts</a>下载。</p><p>下载后解压选择以下8种字体安装：</p><p><img src="https://img.kedr.cc/picbed/image-20210514214456477.png" alt="image-20210514214456477"></p><p>在<code>Windows Terminal</code>设置中选择<code>PowerShell</code>，在外观中设置字体为<code>MesloLGM NF</code>，字号<code>10</code></p><h3 id="使配置永久生效"><a class="header-anchor" href="#使配置永久生效"></a>使配置永久生效</h3><p>前面的导入模块和设置主题只是临时的，关闭命令行再打开后所有设置都没有生效。</p><p>因此需要生成并修改<code>PowerShell</code>配置文件，使配置永久生效。</p><p>在 <code>PowerShell</code>中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>在打开的配置文件中写入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 导入模块</span><br><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Import-Module</span> DirColors<br><span class="hljs-built_in">Import-Module</span> git<span class="hljs-literal">-aliases</span> <span class="hljs-literal">-DisableNameChecking</span><br><span class="hljs-comment"># 设置 PowerShell 主题</span><br><span class="hljs-built_in">Set-PoshPrompt</span> <span class="hljs-literal">-Theme</span> zash<br><span class="hljs-comment"># 设置Tab为菜单补全和 Intellisense</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Tab&quot;</span> <span class="hljs-literal">-Function</span> MenuComplete<br><span class="hljs-comment"># 设置 Ctrl+d 为退出 PowerShell</span><br><span class="hljs-built_in">Set-PSReadlineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Ctrl+d&quot;</span> <span class="hljs-literal">-Function</span> ViExit<br><span class="hljs-comment"># 设置 Ctrl+z 为撤销</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> <span class="hljs-string">&quot;Ctrl+z&quot;</span> <span class="hljs-literal">-Function</span> Undo<br><span class="hljs-comment"># 设置向上键为后向搜索历史记录</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> UpArrow <span class="hljs-literal">-Function</span> HistorySearchBackward<br><span class="hljs-comment"># 设置向下键为前向搜索历史纪录</span><br><span class="hljs-built_in">Set-PSReadLineKeyHandler</span> <span class="hljs-literal">-Key</span> DownArrow <span class="hljs-literal">-Function</span> HistorySearchForward<br><span class="hljs-comment"># 设置ll命令显示目录下所有文件</span><br><span class="hljs-built_in">Set-Alias</span> <span class="hljs-literal">-Name</span> ll <span class="hljs-literal">-Value</span> <span class="hljs-built_in">Get-ChildItem</span><br></code></pre></td></tr></table></figure><p>保存，重启<code>Windows Terminal</code>。</p><h2 id="离线环境下美化"><a class="header-anchor" href="#离线环境下美化"></a>离线环境下美化</h2><ul><li>由于不能联网，需要在能联网的pc重复上面的美化步骤</li><li>将<code>C:\Users\**\Documents\PowerShell</code>内的文件复制到离线环境下</li></ul><p>到此美化完毕~</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows Terminal</tag>
      
      <tag>Powershell</tag>
      
      <tag>主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各Json序列化反序列化工具比较</title>
    <link href="/posts/3646286038/"/>
    <url>/posts/3646286038/</url>
    
    <content type="html"><![CDATA[<h1 id="各Json序列化与反序列化工具比较"><a class="header-anchor" href="#各Json序列化与反序列化工具比较"></a>各Json序列化与反序列化工具比较</h1><p>本文主要比较Java中<code>fastjson</code>、<code>jackson</code>、<code>gson</code>三个包的序列化与反序列化性能，可拓展性，易用性等。</p><blockquote><p>开发环境：</p><p>jdk:java version “1.8.0_161”</p><p>os:windows10</p><p>cpu:Intel i5-10400 @2.90GHz</p><p>内存：16GB</p></blockquote><ul><li><a href="#">目录</a><ul><li><a href="#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">测试代码</a><ul><li><a href="#fastjson">fastjson</a></li><li><a href="#jackson">jackson</a></li><li><a href="#gson">gson</a></li></ul></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83">序列化与反序列化性能比较</a><ul><li><a href="#1%E4%B8%87%E6%95%B0%E6%8D%AE">1万数据</a></li><li><a href="#10%E4%B8%87%E6%95%B0%E6%8D%AE">10万数据</a></li><li><a href="#100%E4%B8%87%E6%95%B0%E6%8D%AE">100万数据</a></li></ul></li><li><a href="#%E6%97%A5%E6%9C%9F%E5%BA%8F%E5%88%97%E5%8C%96">日期序列化</a><ul><li><a href="#fastjson-1">fastjson</a></li><li><a href="#jackson-1">Jackson</a></li><li><a href="#gson-1">gson</a></li></ul></li><li><a href="#springmvc%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8">SpringMVC消息转换器</a><ul><li><a href="#fastjson-2">fastjson</a></li><li><a href="#jackson-2">jackson</a></li><li><a href="#gson-2">gson</a></li></ul></li></ul></li></ul><h2 id="测试代码"><a class="header-anchor" href="#测试代码"></a>测试代码</h2><h3 id="fastjson"><a class="header-anchor" href="#fastjson"></a>fastjson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(object);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.parseObject(json, clazz);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> JSON.parseArray(json, clazz);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="jackson"><a class="header-anchor" href="#jackson"></a>jackson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.readValue(json, clazz);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">CollectionType</span> <span class="hljs-variable">collectionType</span> <span class="hljs-operator">=</span> mapper.getTypeFactory()<br>                    .constructCollectionType(List.class, clazz);<br>            <span class="hljs-keyword">return</span> mapper.readValue(json, collectionType);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="gson"><a class="header-anchor" href="#gson"></a>gson</h3><details>    <summary>点击查看代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GsonUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化为字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> gson.toJson(object);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserializeObj</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> gson.fromJson(json, clazz);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化为集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.util.List&lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021/4/29</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">deserializeArray</span><span class="hljs-params">(String json, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        &#125;<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">collectType</span> <span class="hljs-operator">=</span> TypeToken.getParameterized(ArrayList.class, clazz).getType();<br>        <span class="hljs-keyword">return</span> gson.fromJson(json, collectType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="序列化与反序列化性能比较"><a class="header-anchor" href="#序列化与反序列化性能比较"></a>序列化与反序列化性能比较</h2><h3 id="1万数据"><a class="header-anchor" href="#1万数据"></a>1万数据</h3><p><img src="https://img.kedr.cc/picbed/1%E4%B8%87%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt=""></p><h3 id="10万数据"><a class="header-anchor" href="#10万数据"></a>10万数据</h3><p><img src="https://img.kedr.cc/picbed/10%E4%B8%87%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt=""></p><h3 id="100万数据"><a class="header-anchor" href="#100万数据"></a>100万数据</h3><p><img src="https://img.kedr.cc/picbed/100%E4%B8%87%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt=""></p><h2 id="日期序列化"><a class="header-anchor" href="#日期序列化"></a>日期序列化</h2><h3 id="fastjson-v2"><a class="header-anchor" href="#fastjson-v2"></a>fastjson</h3><p>加上<code>@JSONField</code>注解，设定日期序列化格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JSONField(format = &quot;yyyy年M月d日H时m分s秒&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><h3 id="Jackson"><a class="header-anchor" href="#Jackson"></a>Jackson</h3><p>加上<code>@JsonFormat</code>注解，设定日期序列化格式，<code>timezone</code>属性设置时区（默认太平洋时间），可以通过配置设置全局时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy年M月d日H时m分s秒&quot;, timezone=&quot;GMT+8&quot;)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><h3 id="gson-v2"><a class="header-anchor" href="#gson-v2"></a>gson</h3><p>加上<code>@JsonAdapter</code>注解，<code>DateAdapter</code>为自己写的日期转换适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonAdapter(DateAdapter.class)</span><br><span class="hljs-keyword">private</span> Date date;<br></code></pre></td></tr></table></figure><p><code>DateAdapter</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeAdapter</span>&lt;Date&gt; &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年M月d日H时m分s秒&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(JsonWriter jsonWriter, Date date)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        jsonWriter.value(sdf.format(date));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">read</span><span class="hljs-params">(JsonReader in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (in.peek() == JsonToken.NULL) &#123;<br>            in.nextNull();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.deserializeToDate(in.nextString());<br>            <span class="hljs-keyword">return</span> date;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">deserializeToDate</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (sdf) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> sdf.parse(s);<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException ignored) &#123;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> sdf.parse(s);<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException ignored) &#123;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> ISO8601Utils.parse(s, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParsePosition</span>(<span class="hljs-number">0</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSyntaxException</span>(s, e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringMVC消息转换器"><a class="header-anchor" href="#SpringMVC消息转换器"></a>SpringMVC消息转换器</h2><h3 id="fastjson-v3"><a class="header-anchor" href="#fastjson-v3"></a>fastjson</h3><p>将<code>FastJsonHttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>实现<code>SerializeFilter</code>、<code>AfterFilter</code>等接口，再将实现类加入转换参数中</p><h3 id="jackson-v2"><a class="header-anchor" href="#jackson-v2"></a>jackson</h3><p>将<code>MappingJackson2HttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>jackson自定义序列化提供<code>JsonSerializer</code>和<code>StdSerializer</code>两个抽象类</p><h3 id="gson-v3"><a class="header-anchor" href="#gson-v3"></a>gson</h3><p>将<code>GsonHttpMessageConverter</code>加入<code>HttpMessageConverter</code>的转换器中</p><p>不满足序列化要求时，需要继承<code>GsonHttpMessageConverter</code>重写一个自己的消息转换器，使用<code>GsonBuilder()</code>设置序列化的一些参数</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastjson</tag>
      
      <tag>jackson</tag>
      
      <tag>gson</tag>
      
      <tag>序列化</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis主从+哨兵模式搭建</title>
    <link href="/posts/1518701644/"/>
    <url>/posts/1518701644/</url>
    
    <content type="html"><![CDATA[<h2 id="redis安装"><a class="header-anchor" href="#redis安装"></a>redis安装</h2><h3 id="rpm或deb包安装"><a class="header-anchor" href="#rpm或deb包安装"></a>rpm或deb包安装</h3><p>略</p><h3 id="源码安装"><a class="header-anchor" href="#源码安装"></a>源码安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#加压缩</span><br>tar -zxvf redis-5.0.10.tar.gz<br><br><span class="hljs-comment">#编译和编译安装</span><br><span class="hljs-built_in">cd</span> redis-5.0.10<br>make &amp;&amp; make install<br><br><span class="hljs-comment">#移动编译结果和配置文件到/usr/local/redis目录下</span><br><span class="hljs-built_in">mkdir</span> -p /usr/local/redis<br><span class="hljs-built_in">cp</span> src/mkreleasehdr.sh /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-benchmark /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-aof /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-rdb /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-cli /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-sentinel /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-server /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-trib.rb /usr/local/redis/<br><span class="hljs-built_in">cp</span> src/redis-check-rdb /usr/local/redis/<br><span class="hljs-built_in">cp</span> redis.conf /usr/local/redis/<br><span class="hljs-built_in">cp</span> sentinel.conf /usr/local/redis/<br></code></pre></td></tr></table></figure><h3 id="注册为服务"><a class="header-anchor" href="#注册为服务"></a>注册为服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/init.d/redis<br><br><span class="hljs-comment">#！/bin/sh</span><br><span class="hljs-comment"># chkconfig: 2345 10 90</span><br><span class="hljs-comment"># description: Start and Stop redis</span><br><br>PORT=6379<br>REDISDIR=/usr/local/redis<br>EXEC=<span class="hljs-variable">$REDISDIR</span>/redis-server<br>REDIS_CLI=<span class="hljs-variable">$REDISDIR</span>/redis-cli<br>CONF=<span class="hljs-variable">$REDISDIR</span>/redis.conf<br>PASSWD=<span class="hljs-string">&quot;***&quot;</span><br>PIDFILE=/var/run/redis_6379.pid<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span> <br>        start)<br>                <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$PIDFILE</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PIDFILE</span> exists, process is already running or crashed.&quot;</span><br>                <span class="hljs-keyword">else</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Starting Redis server...&quot;</span><br>                        <span class="hljs-variable">$EXEC</span> <span class="hljs-variable">$CONF</span><br>                <span class="hljs-keyword">fi</span><br>                <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;$?&quot;</span>=<span class="hljs-string">&quot;0&quot;</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Redis is running...&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                ;;<br>        stop)<br>                <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$PIDFILE</span> ]<br>                <span class="hljs-keyword">then</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PIDFILE</span> exists, process is not running.&quot;</span><br>                <span class="hljs-keyword">else</span><br>                        PID=$(<span class="hljs-built_in">cat</span> <span class="hljs-variable">$PIDFILE</span>)<br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stopping...&quot;</span><br>                       <span class="hljs-variable">$REDIS_CLI</span> -p <span class="hljs-variable">$PORT</span> -a <span class="hljs-variable">$PASSWD</span> SHUTDOWN<br>                       <span class="hljs-built_in">sleep</span> 2<br>                       <span class="hljs-keyword">while</span> [ -x <span class="hljs-variable">$PIDFILE</span> ]<br>                       <span class="hljs-keyword">do</span><br>                                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Waiting for Redis to shutdown...&quot;</span><br>                               <span class="hljs-built_in">sleep</span> 1<br>                        <span class="hljs-keyword">done</span><br>                        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Redis stopped&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                ;;<br>        restart|force-reload)<br>                <span class="hljs-variable">$&#123;0&#125;</span> stop<br>                <span class="hljs-variable">$&#123;0&#125;</span> start<br>                ;;<br>        *)<br>               <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot;</span> &gt;&amp;2<br>                <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>赋权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /etc/init.d/redis<br></code></pre></td></tr></table></figure><h3 id="开机自启"><a class="header-anchor" href="#开机自启"></a>开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chkconfig redis on<br></code></pre></td></tr></table></figure><h2 id="修改redis-conf"><a class="header-anchor" href="#修改redis-conf"></a>修改redis.conf</h2><ol><li><p><code>主从服务器</code>的<code>redis.conf</code>文件都需要修改以下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">#后台运行<br><span class="hljs-deletion">- daemonize no</span><br><span class="hljs-addition">+ daemonize yes</span><br><br>#关闭保护模式，允许远程访问<br><span class="hljs-deletion">- protected-mode yes</span><br><span class="hljs-addition">+ protected-mode no</span><br><br>#注释ip绑定<br><span class="hljs-deletion">- bind 127.0.0.1</span><br><span class="hljs-addition">+ #bind 127.0.0.1</span><br><br>#连接密码（可不填<br><span class="hljs-addition">+ requirepass ***</span><br><br>#master密码（若填了连接密码时需要填写<br><span class="hljs-addition">+ masterauth ***</span><br></code></pre></td></tr></table></figure></li><li><p><code>从服务器</code>的<code>redis.conf</code>文件在上面的修改基础上还需要修改以下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ replicaof 主服务器ip 6379</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="修改sentinel-conf"><a class="header-anchor" href="#修改sentinel-conf"></a>修改sentinel.conf</h2><p>备份<code>sentinel.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> sentinel.conf sentinel.conf.bak<br></code></pre></td></tr></table></figure><p>新建<code>sentinel.conf</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi sentinel.conf<br></code></pre></td></tr></table></figure><p>编辑<code>主从服务器</code>上的<code>sentinel.conf</code>文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">daemonize yes<br>port 26379<br>protected-mode no<br>sentinel monitor redis-master 主服务器ip 6379 1<br>sentinel down-after-milliseconds redis-master 30000<br>sentinel failover-timeout redis-master 180000<br>sentinel parallel-syncs redis-master 1<br>#若redis设置了密码则进行下面的设置<br>sentinel auth-pass redis-master ***<br></code></pre></td></tr></table></figure><h2 id="启动主从服务器"><a class="header-anchor" href="#启动主从服务器"></a>启动主从服务器</h2><p>在<code>主从服务器</code>上分别执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-server redis.conf<br>./redis-sentinel sentinel.conf<br></code></pre></td></tr></table></figure><p>检查<code>主服务器</code>集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-cli <br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.10.10.5,port=6379,state=online,offset=17460264,lag=1<br></code></pre></td></tr></table></figure><p>检查<code>从服务器</code>集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-cli <br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:10.10.10.4<br>master_port:6379<br>master_link_status:up<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring基础知识</title>
    <link href="/posts/1056427202/"/>
    <url>/posts/1056427202/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring基础知识"><a class="header-anchor" href="#Spring基础知识"></a>Spring基础知识</h2><h3 id="什么是spring"><a class="header-anchor" href="#什么是spring"></a>什么是spring</h3><p>spring是一个容器，把每一个bean与bean的关系全部交给spring管理。</p><p>spring的核心是ioc（控制反转）、di（依赖注入）、aop（面向切面编程）。</p><p>di与ioc的区别：di做注入，ioc是创建对象。</p><p>spring可以整合很多框架。</p><p>spring默认是单例的。</p><h3 id="spring的作用域"><a class="header-anchor" href="#spring的作用域"></a>spring的作用域</h3><ul><li>singleton（单例模式）：单例，spring容器加载时初始化</li><li>Prototype（原型模式）：多例，调用getbean时才会初始化</li><li>request：在一次http请求中，容器返回该bean的同一实例，该bean只在当前http request内有效，不同http请求产生不同的实例，请求结束后实例销毁</li><li>session：在一次http session中，容器返回该bean的同一实例，该bean只在当前http session内有效，不同session请求产生不同的实例，请求结束后实例销毁</li></ul><h3 id="spring-IOC创建对象的方式"><a class="header-anchor" href="#spring-IOC创建对象的方式"></a>spring IOC创建对象的方式</h3><ul><li><p>无参构造函数：默认</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--无参构造函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userEntity&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.model.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>有参构造函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userEntity1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.model.User&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yushengjun&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>工厂</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;objectFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.model.ObjectFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 工厂创建方式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserEntity&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;objectFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserEntity&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>静态工厂</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 静态工厂 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStaticUserEntity&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.model.ObjectFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getStaticUserEntity&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注解</p></li></ul><h3 id="spring如何给对象属性赋值"><a class="header-anchor" href="#spring如何给对象属性赋值"></a>spring如何给对象属性赋值</h3><ul><li><p>有参构造函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--有参构造函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userEntity1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.model.User&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yushengjun&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>set方法（java反射机制中通过set来给对象属性赋值）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.dao.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- UserService中需要有 setUserDao方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.service.UserService&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.service.UserService&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>p名称空间（原理是set方法）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.dao.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zhuweitung.service.UserService&quot;</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注解</p><p>xml中需开启注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.zhuweitung&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>@Resource与@Autowired的区别：前者是jdk1.6的，后者是spring框架的；前者默认以属性名查找，再以属性类型查找，后者默认以属性类型查找，再以属性名查找</li><li>注解与xml一同配置时优先使用xml配置</li></ul></li></ul><h3 id="spring-AOP"><a class="header-anchor" href="#spring-AOP"></a>spring AOP</h3><p>作用是将代码分离，重复代码就是<code>关注点</code>，关注点形成的类就是<code>切面</code>。</p><p>面向切面编程就是指对很多功能都有重复的代码抽取，再在运行时往业务方法上动态植入“切面类代码”。</p><p>植入“切面类代码”的对象就是<code>切入点</code>。</p><h4 id="应用场景"><a class="header-anchor" href="#应用场景"></a>应用场景</h4><ul><li>权限</li><li>日志</li><li>控制</li><li>事务</li></ul><h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 切面类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020/10/13 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopTest</span> &#123;<br><br>    <span class="hljs-comment">//通过注解声明切点表达式</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.zhuweitung.mybatis.service.UserService.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//通知方法会在目标方法调用前执行</span><br>    <span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AopTest before.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//通知方法会在目标方法返回或异常后执行</span><br>    <span class="hljs-meta">@After(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AopTest after.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//通知方法会在目标方法返回后执行</span><br>    <span class="hljs-meta">@AfterReturning(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AopTest afterReturning.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//通知方法会在目标方法抛出异常后执行</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AopTest afterThrowing.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//通知方法会将目标方法封装起来</span><br>    <span class="hljs-meta">@Around(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;AopTest around start.&quot;</span>);<br>            joinPoint.proceed();<br>            System.out.println(<span class="hljs-string">&quot;AopTest around end.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解http协议</title>
    <link href="/posts/2409515937/"/>
    <url>/posts/2409515937/</url>
    
    <content type="html"><![CDATA[<h2 id="深入理解http协议"><a class="header-anchor" href="#深入理解http协议"></a>深入理解http协议</h2><h3 id="概念"><a class="header-anchor" href="#概念"></a>概念</h3><p>http协议：超文本传输协议，基于socket与tcp协议。</p><ul><li>请求<ul><li>请求行</li><li>请求头</li><li>请求内容</li><li>请求体（只能在post请求中）</li></ul></li><li>响应<ul><li>响应行</li><li>响应内容</li><li>响应体</li></ul></li></ul><h3 id="防盗链"><a class="header-anchor" href="#防盗链"></a>防盗链</h3><p>原理：通过请求头中的referer值进行判断，若不等于本站域名说明就是其他网站在请求。</p><p>使用过滤器获取每次请求来源，并进行判断。</p><p><strong>静态资源防盗链过滤器</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态资源防盗链过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020/9/19 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(filterName = &quot;RefererFilter&quot;, urlPatterns = &#123;&quot;static/*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefererFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServerRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServerRequest) servletRequest;<br>        <span class="hljs-comment">//请求域名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">referer</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;referer&quot;</span>);<br>        <span class="hljs-comment">//服务器域名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">serverName</span> <span class="hljs-operator">=</span> servletRequest.getServerName();<br><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(referer) || !referer.contains(serverName)) &#123;<br>            <span class="hljs-comment">//显示错误图片</span><br>            servletRequest.getRequestDispatcher(<span class="hljs-string">&quot;static/error.png&quot;</span>).forward(servletRequest, servletResponse);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//放行</span><br>            filterChain.doFilter(servletRequest, servletResponse);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="重定向实现原理"><a class="header-anchor" href="#重定向实现原理"></a>重定向实现原理</h3><p>服务端收到请求后设置响应状态为302，将重定向地址放入响应头的<code>Location</code>中，客户端收到响应浏览器判断状态为302并自动跳转到Location值的地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/servlet1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//302为重定向状态码</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置重定向地址</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, getServletContext().getContextPath() + <span class="hljs-string">&quot;servlet2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/servlet2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;this is servlet2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="https与http的区别"><a class="header-anchor" href="#https与http的区别"></a>https与http的区别</h3><ul><li>https协议需要到ca申请证书，一般证书都需要收费</li><li>http中的数据是明文传输，而https则是具有安全性的ssl加密传输协议</li><li>http与https使用的是完全不同的连接方式，http一般使用80端口，https一般使用443端口</li><li>http的连接很简单，是无状态的，而hhtps协议是由ssl+http协议构建的，可进行加密传输、身份认证的网络协议，比http协议安全，但效率低</li></ul><h3 id="模拟http请求技术"><a class="header-anchor" href="#模拟http请求技术"></a>模拟http请求技术</h3><ul><li>后端：<ul><li>HttpClient</li><li>HttpUrl</li></ul></li><li>前端：<ul><li>ajax</li></ul></li><li>工具<ul><li>postman</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session与cookie</title>
    <link href="/posts/3265766969/"/>
    <url>/posts/3265766969/</url>
    
    <content type="html"><![CDATA[<h2 id="session与cookie"><a class="header-anchor" href="#session与cookie"></a>session与cookie</h2><h3 id="cookie"><a class="header-anchor" href="#cookie"></a>cookie</h3><p>会话数据保存再客户端，不能跨浏览器。</p><ul><li><p>服务端给客户端设置cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//自定义cookie</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-comment">//cookie发送给客户端</span><br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器请求的响应头中会带有设置cookie的信息</p><img src="https://img.kedr.cc/picbed/20200916202436.png" style="display:inline-block"/></li><li><p>服务端获取客户端的cookie（同一浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    Cookie[] cookies = req.getCookies();<br>    <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookies.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;username&quot;</span>.equals(cookies[i].getName())) &#123;<br>                username = cookies[i].getValue();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        resp.getWriter().write(<span class="hljs-string">&quot;the value of username in cookie is &quot;</span> + username);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;the cookie is null&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器的请求头中会带有cookie信息</p><img src="https://img.kedr.cc/picbed/20200916202243.png" style="display:inline-block"/></li><li><p>设置cookie有效时长</p><p>默认关闭浏览器后cookie失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置cookie时长 为负数时浏览器关闭就失效，正数以秒为单位</span><br>cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="cookie的局限"><a class="header-anchor" href="#cookie的局限"></a>cookie的局限</h4><ul><li>cookie只能存字符串类型，不能保存对象</li><li>只能存非中文</li><li>1个cookie的容量不超过4kb</li></ul><h3 id="session"><a class="header-anchor" href="#session"></a>session</h3><p>会话数据保存再服务器端，内存中，客户端与服务端之间通讯使用<code>sessionid</code>。</p><p>自定义session</p><p><strong>Cache</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span> &#123;<br>    <br>    <span class="hljs-meta">@MetaData(name = &quot;键&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-meta">@MetaData(name = &quot;值&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Object value;<br>    <span class="hljs-meta">@MetaData(name = &quot;有效期&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Long timeout;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CacheManager</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheManager</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Cache&gt; cacheMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value, Long timeout)</span> &#123;<br>        <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>();<br>        cache.setKey(key);<br>        cache.setValue(value);<br>        <span class="hljs-keyword">if</span> (timeout != <span class="hljs-literal">null</span>) &#123;<br>            cache.setTimeout(System.currentTimeMillis() + timeout);<br>        &#125;<br>        cacheMap.put(key, cache);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        put(key, value, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cacheMap.containsKey(key)) &#123;<br>            <span class="hljs-keyword">return</span> cacheMap.get(key).getValue();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cacheMap.containsKey(key)) &#123;<br>            cacheMap.remove(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//检查并移除超期缓存</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkValidityData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Cache&gt; entry : cacheMap.entrySet()) &#123;<br>            <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> entry.getValue();<br>            <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> cache.getTimeout();<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-keyword">if</span> (now &gt; timeout) &#123;<br>                remove(entry.getKey());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TokenUtil</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> UUID.randomUUID().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SessionUtil</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheManager</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">setAtttibute</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sessionId</span> <span class="hljs-operator">=</span> TokenUtil.getToken();<br>        cacheManager.put(sessionId, value);<br>        <span class="hljs-keyword">return</span> sessionId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getAtttibute</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> cacheManager.get(key);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>session</tag>
      
      <tag>cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解servlet</title>
    <link href="/posts/3236163550/"/>
    <url>/posts/3236163550/</url>
    
    <content type="html"><![CDATA[<h2 id="深入理解servlet"><a class="header-anchor" href="#深入理解servlet"></a>深入理解servlet</h2><h3 id="web项目目录结构"><a class="header-anchor" href="#web项目目录结构"></a>web项目目录结构</h3><p>webapp</p><ul><li>static：静态资源</li><li>WEB-INF：Tomcat无法访问此目录<ul><li>classes：字节码文件（后端java代码）</li><li>lib：项目依赖类库</li><li>web.xml：核心web配置，后端代码的入口</li></ul></li></ul><h3 id="静态资源和动态资源的区别"><a class="header-anchor" href="#静态资源和动态资源的区别"></a>静态资源和动态资源的区别</h3><ul><li><p>静态资源每次访问源代码不会发生改变</p></li><li><p>动态资源每次访问代码都有可能会发生改变</p><ul><li><p>servlet其实就是动态资源开发技术（Java）</p><p>继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 接收get请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, &quot;</span> + DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet自定义名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet对应类路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhuweitung.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--servlet路径映射--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--对外暴露的地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或使用注解<code>@WebServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/hello2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 接收get请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/14</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, &quot;</span> + DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="servlet的生命周期"><a class="header-anchor" href="#servlet的生命周期"></a>servlet的生命周期</h3><ul><li>init()：只会执行一次，执行初始化操作</li><li>service()：处理请求，执行doGet或doPost</li><li>destroy()：只执行一次，执行销毁操作</li></ul><p>servlet只会初始化一次，多个请求同时访问servlet时只会实例化一次，即**servlet是单例（懒汉式）**的。</p><p>证明：由于servlet是通过xml配置文件或注解来生成的，所以是通过反射并调用servlet实现类的无参构造实例化的，只要在无参构造函数中输出即可证明</p><h3 id="servlet自动加载"><a class="header-anchor" href="#servlet自动加载"></a>servlet自动加载</h3><p>由于servlet是懒汉式单例模式的，当有请求时servlet才会被实例化，若要实现自动加载可以使用一下方法：</p><ul><li><p>在xml中配置<code>load-on-startup</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet自定义名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet对应类路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhuweitung.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自动加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在注解<code>@WebServlet</code>中加上<code>loadOnStartup = 1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(value = &quot;/hello2&quot;, loadOnStartup = 1)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="servlet线程不安全"><a class="header-anchor" href="#servlet线程不安全"></a>servlet线程不安全</h3><p>证明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 共享变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloServlet2 doGet&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;hello servlet, 第&quot;</span> + count + <span class="hljs-string">&quot;次访问&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个浏览器进行访问，结果都显示第一次访问。</p><p>加锁解决线程安全问题。</p><p><em>注：使用servlet时不要使用共享全局变量。</em></p><h3 id="servlet上下文"><a class="header-anchor" href="#servlet上下文"></a>servlet上下文</h3><p>ServletContext也叫做“公共区域”，在同一个WEB应用程序中，所有的Servlet和JSP都可以共享同一个区域。</p><p>ServletContext在WEB服务器启动时创建，服务器关闭时销毁。</p><h3 id="转发与重定向"><a class="header-anchor" href="#转发与重定向"></a>转发与重定向</h3><h4 id="转发"><a class="header-anchor" href="#转发"></a>转发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;forward&quot;</span>);<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/test&quot;</span>).forward(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>转发的特点</strong>:</p><ul><li>地址栏不发生变化</li><li>只有一次请求</li><li>转发地址中不需要加上下文地址</li><li>请求域中的数据不会丢失</li><li>是服务端行为</li><li>效率高</li></ul><h4 id="重定向"><a class="header-anchor" href="#重定向"></a>重定向</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;redirect&quot;</span>);<br>    resp.sendRedirect(<span class="hljs-string">&quot;/test&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重定向的特点</strong>：</p><ul><li>地址栏中地址变为重定向后的地址</li><li>请求两次（客户端第一次请求后响应<code>302</code>状态，再请求重定向地址）</li><li>重定向地址中需要加上下文地址以保证路径的正确</li><li>请求域中的数据丢失</li><li>是客户端行为</li><li>效率低</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程之Socket</title>
    <link href="/posts/349534411/"/>
    <url>/posts/349534411/</url>
    
    <content type="html"><![CDATA[<h2 id="Java网络编程之Socket"><a class="header-anchor" href="#Java网络编程之Socket"></a>Java网络编程之Socket</h2><h3 id="什么是Socket"><a class="header-anchor" href="#什么是Socket"></a>什么是Socket</h3><p>通常也称作”套接字“，用于描述<code>IP地址</code>和<code>端口</code>，是一个通信链的句柄。应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p><h3 id="TCP与UDP的区别"><a class="header-anchor" href="#TCP与UDP的区别"></a>TCP与UDP的区别</h3><ul><li>TCP是一种面向连接的保证可靠传输的协议，可靠，效率稍低；</li><li>UDP是一种无连接的协议，不可靠，效率高；</li><li>建立起一个TCP连接需要经过“三次握手”；</li><li>TCP传输数据没有大小限制；</li><li>UDP的每个数据报中都给出了完整的地址信息；</li><li>UDP传输数据时是有大小限制的，每个被传输的数据报必须限定在64KB之内；</li></ul><h4 id="TCP连接的三次握手"><a class="header-anchor" href="#TCP连接的三次握手"></a>TCP连接的三次握手</h4><p><img src="https://img.kedr.cc/picbed/20200912162951.png" alt=""></p><h4 id="Java-Udp实现"><a class="header-anchor" href="#Java-Udp实现"></a>Java Udp实现</h4><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UdpServer</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;UDP服务端启动&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br>        <span class="hljs-comment">//等待客户端发送内容，若客户端不发送则一直等待，阻塞效果</span><br>        socket.receive(packet);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), packet.getLength());<br>        System.out.println(<span class="hljs-string">&quot;服务端收到数据：&quot;</span> + data);<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UdpClient</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(String targetIp, Integer targetPort)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;UDP客户端启动&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data.getBytes(), data.getBytes().length, InetAddress.getByName(targetIp), targetPort);<br>        System.out.println(<span class="hljs-string">&quot;UDP客户端发送消息&quot;</span>);<br>        socket.send(packet);<br>        socket.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">serverPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">15367</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">clientPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">15369</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">UdpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UdpServer</span>(serverPort);<br>            server.start();<br>        &#125;<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">UdpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UdpClient</span>(clientPort);<br>            client.start(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, serverPort);<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Java-Tcp实现"><a class="header-anchor" href="#Java-Tcp实现"></a>Java Tcp实现</h4><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TcpServer</span><span class="hljs-params">(Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tcp服务端启动&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//等待客户端连接，阻塞状态</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> accept.getInputStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> is.read(bytes);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, len);<br>            System.out.println(<span class="hljs-string">&quot;服务端接收到数据：&quot;</span> + data);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            serverSocket.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClient</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;服务端ip&quot;)</span><br>    <span class="hljs-keyword">private</span> String ip;<br>    <span class="hljs-meta">@MetaData(name = &quot;服务端端口&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TcpClient</span><span class="hljs-params">(String ip, Integer port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ip = ip;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tcp客户端启动&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-built_in">this</span>.ip, <span class="hljs-built_in">this</span>.port);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Tcp客户端发送消息&quot;</span>);<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>            os.write(data.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            socket.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">16487</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">TcpServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TcpServer</span>(port);<br>            server.start();<br>        &#125;<br>    &#125;).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">TcpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TcpClient</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port);<br>            client.start();<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用设计模式</title>
    <link href="/posts/511749417/"/>
    <url>/posts/511749417/</url>
    
    <content type="html"><![CDATA[<h2 id="常用设计模式"><a class="header-anchor" href="#常用设计模式"></a>常用设计模式</h2><h3 id="设计模式六大原则"><a class="header-anchor" href="#设计模式六大原则"></a>设计模式六大原则</h3><ul><li>开闭原则：对拓展开放，对修改关闭。（接口和抽象类）</li><li>里氏替换原则：任何基类可以出现的地方，子类一定可以出现。</li><li>依赖倒转原则：面向接口编程，依赖于抽象而不依赖与具体。</li><li>接口隔离原则：使用多个隔离的接口比使用单个接口要好，降低类之间的耦合。</li><li>迪米特原则（最少知识原则）：一个软件实体应当尽可能少的与其他实体发生相互作用。</li><li>合成复用原则：尽量采用合成/聚合的方式，而不是使用继承。</li></ul><h3 id="单例模式"><a class="header-anchor" href="#单例模式"></a>单例模式</h3><h4 id="懒汉式"><a class="header-anchor" href="#懒汉式"></a>懒汉式</h4><p>当需要时才会被实例化，没实例化时节约内存。</p><p>需要使用synchronized关键字实现同步来解决线程不安全问题，会降低效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy01</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy01 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy01</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> SingletonLazy01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy01</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-优化"><a class="header-anchor" href="#懒汉式-优化"></a>懒汉式-优化</h4><p>上面的案例使用静态同步函数来进行同步，导致每次调用 getInstance() 方法时，都需要进行线程锁定判断，在多线程高并发访问情况下，将会导致系统性能大幅度降低。将静态同步函数改为同步代码块来提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy02</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy02 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy02</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonLazy02 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonLazy02.class) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy02</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式-双重检查锁定"><a class="header-anchor" href="#懒汉式-双重检查锁定"></a>懒汉式-双重检查锁定</h4><p>上面的案例中，当两个线程都进入getInstance()方法并通过instance == null判断后，线程1拿到锁进行实例化，实例化完成后线程2也拿到锁又会再次实例化导致线程不安全。因此需要再进行一次判断保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonLazy03</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingletonLazy03 instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonLazy03</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonLazy03 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonLazy03.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonLazy03</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="饿汉式"><a class="header-anchor" href="#饿汉式"></a>饿汉式</h4><p>当class被加载时就会初始化，天生线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHungry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingletonHungry</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonHungry</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonHungry</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonHungry <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a class="header-anchor" href="#工厂模式"></a>工厂模式</h3><p>实现创建者和调用者分离。</p><h4 id="简单工厂模式"><a class="header-anchor" href="#简单工厂模式"></a>简单工厂模式</h4><p>该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。该模式通过向工厂传递类型来指定要创建的对象，其UML类图如下：</p><p><img src="https://img.kedr.cc/picbed/20200910204908.png" alt=""></p><p>以下通过火箭发射案例来说明该模式：</p><p><strong>火箭抽象类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRocket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFight</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;名称&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@MetaData(name = &quot;型号&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> String model;<br>    <span class="hljs-meta">@MetaData(name = &quot;高度&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double height;<br>    <span class="hljs-meta">@MetaData(name = &quot;重量&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double weight;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>神舟火箭类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocket</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;是否载人&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isManned;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot;--- fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>长征火箭类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CZRocket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocket</span> &#123;<br><br>    <span class="hljs-meta">@MetaData(name = &quot;有效载荷&quot;, desc = &quot;&quot;)</span><br>    <span class="hljs-keyword">private</span> Double payload;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&quot;--- fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>火箭发射工厂</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RocketLaunchSimpleFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rocketType 火箭类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 发射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/10</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">launch</span><span class="hljs-params">(String rocketType)</span> &#123;<br>        <span class="hljs-type">IFight</span> <span class="hljs-variable">rocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (rocketType) &#123;<br>            <span class="hljs-keyword">case</span> ROCKET_TYPE_SZ:<br>                rocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ROCKET_TYPE_CZ:<br>                rocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CZRocket</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        rocket.fly();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发射！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">RocketLaunchSimpleFactory</span> <span class="hljs-variable">rocketSimpleFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RocketLaunchSimpleFactory</span>();<br>    rocketSimpleFactory.launch(RocketLaunchSimpleFactory.ROCKET_TYPE_SZ);<br>    rocketSimpleFactory.launch(RocketLaunchSimpleFactory.ROCKET_TYPE_CZ);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="工厂方法模式"><a class="header-anchor" href="#工厂方法模式"></a>工厂方法模式</h4><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其UML类图如下：</p><p><img src="https://img.kedr.cc/picbed/20200910205400.png" alt=""></p><p><strong>火箭创建抽象工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> AbstractRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>神舟火箭创建工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocketCreateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SZRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>长征火箭创建工厂类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SZRocketCreateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRocketCreateFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> SZRocket <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocket</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发射！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">AbstractRocketCreateFactory</span> <span class="hljs-variable">szFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SZRocketCreateFactory</span>();<br>    <span class="hljs-type">AbstractRocketCreateFactory</span> <span class="hljs-variable">czFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CZRocketCreateFactory</span>();<br>    szFactory.create().fly();<br>    czFactory.create().fly();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="抽象工厂模式"><a class="header-anchor" href="#抽象工厂模式"></a>抽象工厂模式</h4><p>抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建。</p><p><img src="https://img.kedr.cc/picbed/20200910210930.png" alt=""></p><h3 id="代理模式"><a class="header-anchor" href="#代理模式"></a>代理模式</h3><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p><p><img src="https://img.kedr.cc/picbed/20200911191949.png" alt=""></p><p>SpringAOP基于代理模式实现（JDK动态代理和CGLIB代理）。</p><h4 id="静态代理"><a class="header-anchor" href="#静态代理"></a>静态代理</h4><p>需要自己写代理类。在程序运行之前，代理类.class文件就已经被创建了。</p><p>使用下面的案例来说明：</p><p><strong>卖房接口类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房东类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseOwner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;房东卖房&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>房屋中介类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISellHouse</span> &#123;<br><br>    <span class="hljs-keyword">private</span> HouseOwner houseOwner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseProxy</span><span class="hljs-params">(HouseOwner houseOwner)</span> &#123;<br>        <span class="hljs-built_in">this</span>.houseOwner = houseOwner;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介介入&quot;</span>);<br>        houseOwner.sell();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HouseProxy</span> <span class="hljs-variable">houseProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseOwner</span>());<br>    houseProxy.sell();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态代理"><a class="header-anchor" href="#动态代理"></a>动态代理</h4><p>动态代理是在程序运行时通过反射机制动态创建的。</p><h5 id="JDK动态代理"><a class="header-anchor" href="#JDK动态代理"></a>JDK动态代理</h5><p>通过Java的反射机制实现代理类</p><p>使用下面的案例来说明：</p><p><strong>JDK动态代理类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdkDynamicProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;JDK动态代理&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdkDynamicProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HouseOwner</span> <span class="hljs-variable">houseOwner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseOwner</span>();<br>    <span class="hljs-type">JdkDynamicProxy</span> <span class="hljs-variable">jdkDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkDynamicProxy</span>(houseOwner);<br>    <span class="hljs-comment">//JDK动态代理通过反射机制生成代理</span><br>    <span class="hljs-type">ISellHouse</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (ISellHouse) Proxy.newProxyInstance(houseOwner.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ISellHouse.class&#125;, jdkDynamicProxy);<br>    proxyInstance.sell();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意Proxy.newProxyInstance()方法接受三个参数：</p><ul><li><code>ClassLoader loader</code>：指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li><li><code>Class&lt;?&gt;[] interfaces</code>：指定目标对象实现的接口的类型,使用泛型方式确认类型</li><li><code>InvocationHandler</code>：指定<code>动态处理器</code>，执行目标对象的方法时,会触发事件处理器的方法</li></ul></blockquote><h5 id="CGLIB代理"><a class="header-anchor" href="#CGLIB代理"></a>CGLIB代理</h5><p>其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。但因为采用的是继承，所以不能对<strong>final</strong>修饰的类进行代理。</p><p><strong>CGLIB动态代理类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibDynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;CGLIB动态代理&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invokeSuper</span> <span class="hljs-operator">=</span> methodProxy.invokeSuper(o, args);<br>        <span class="hljs-keyword">return</span> invokeSuper;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cglibDynamicProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">CglibDynamicProxy</span> <span class="hljs-variable">cglibDynamicProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibDynamicProxy</span>();<br>    <span class="hljs-comment">//使用asm框架生成代理类</span><br>    <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>    enhancer.setSuperclass(HouseOwner.class);<br>    enhancer.setCallback(cglibDynamicProxy);<br>    <span class="hljs-type">ISellHouse</span> <span class="hljs-variable">sellHouse</span> <span class="hljs-operator">=</span> (ISellHouse) enhancer.create();<br>    sellHouse.sell();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>CGLIB创建的动态代理对象比JDK创建的动态代理对象的性能更高，但是CGLIB创建代理对象时所花费的时间却比JDK多得多。</p></li><li><p>对于单例的对象，因为无需频繁创建对象，用CGLIB合适，反之使用JDK方式要更为合适一些。</p></li><li><p>由于CGLib由于是采用动态创建子类的方法，对于final修饰的方法无法进行代理。</p></li></ul></blockquote><p><em>注：ASM是Java字节码控制</em></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringIOC</title>
    <link href="/posts/839291940/"/>
    <url>/posts/839291940/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringIOC"><a class="header-anchor" href="#SpringIOC"></a>SpringIOC</h2><h3 id="什么是Java反射"><a class="header-anchor" href="#什么是Java反射"></a>什么是Java反射</h3><p>就是正在运行，动态获取这个类的所有信息。</p><p>通过反射机制可以访问Java对象的属性，方法，构造方法等。</p><h3 id="反射机制的应用场景"><a class="header-anchor" href="#反射机制的应用场景"></a>反射机制的应用场景</h3><ul><li>JDBC加载驱动</li><li>SpringIOC实现</li></ul><h3 id="什么是SpringIOC"><a class="header-anchor" href="#什么是SpringIOC"></a>什么是SpringIOC</h3><p>spring ioc指的是控制反转，IOC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。交由Spring容器统一进行管理，从而实现松耦合。</p><h3 id="IOC实现原理"><a class="header-anchor" href="#IOC实现原理"></a>IOC实现原理</h3><p>反射机制+XML读取解析技术</p><ul><li>读取xml文件</li><li>获取xml文件中的bean配置信息</li><li>通过bean中的class值反射并实例化对象</li><li>通过反射api未私有属性赋值</li></ul><p>SpringIOC模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟SpringIOC</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020/9/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringIOCDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 获取bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/9</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanId)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//读取xml文件</span><br>        <span class="hljs-comment">//获取xml文件中的bean配置信息</span><br>        <span class="hljs-comment">//通过bean中的class反射并实例化对象，再通过反射api为私有属性赋值</span><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(SpringIOCDemo.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;user.xml&quot;</span>));<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>        List&lt;Element&gt; elements = root.elements();<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">beanElement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>            <span class="hljs-keyword">if</span> (element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>).equals(beanId)) &#123;<br>                beanElement = element;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (beanElement != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(beanElement.attributeValue(<span class="hljs-string">&quot;class&quot;</span>));<br>            <span class="hljs-comment">//通过反射实例化对象</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>            List&lt;Element&gt; propertys = beanElement.elements();<br>            <span class="hljs-comment">//获取bean的属性</span><br>            <span class="hljs-keyword">for</span> (Element element : propertys) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> element.attributeValue(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fieldValue</span> <span class="hljs-operator">=</span> element.attributeValue(<span class="hljs-string">&quot;value&quot;</span>);<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">if</span> (field.getType() == Integer.class) &#123;<br>                    field.set(obj, Integer.parseInt(fieldValue));<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (field.getType() == String.class) &#123;<br>                    field.set(obj, fieldValue);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> (User) obj;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>spring</tag>
      
      <tag>ioc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/posts/2730732825/"/>
    <url>/posts/2730732825/</url>
    
    <content type="html"><![CDATA[<h2 id="Java多线程"><a class="header-anchor" href="#Java多线程"></a>Java多线程</h2><h3 id="线程与进程"><a class="header-anchor" href="#线程与进程"></a>线程与进程</h3><p>进程是所有线程的集合，每一个线程是进程中的一条执行路径。</p><h3 id="多线程应用场景"><a class="header-anchor" href="#多线程应用场景"></a>多线程应用场景</h3><p>多线程提高程序效率。</p><p>如迅雷多线程下载、分批发送短信等。</p><h3 id="多线程创建方式"><a class="header-anchor" href="#多线程创建方式"></a>多线程创建方式</h3><ul><li>继承Thread类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Thread01.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能描述: 线程执行的任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/2</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread01</span>().start();<br></code></pre></td></tr></table></figure><ul><li>实现Runable接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Thread02.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread02</span>()).start();<br></code></pre></td></tr></table></figure><ul><li>继承Thread类好还是实现Runable接口好？</li></ul><blockquote><p>接口好，接口可以实现多个，而继承只能继承一个</p></blockquote><ul><li>使用匿名内部类方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能描述: 匿名内部类方式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startThread03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>                LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>            &#125;<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注：在run方法中不能抛出异常</em></p><h3 id="线程常用API"><a class="header-anchor" href="#线程常用API"></a>线程常用API</h3><table><thead><tr><th>方法</th><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>sleep</td><td>毫秒</td><td>让当前线程从运行状态变为休眠状态，到时间再变为运行状态。不能释放锁，多线程之间实现同步</td><td>Thread.sleep(1000);</td></tr><tr><td>getId</td><td></td><td>获取当前线程id</td><td></td></tr><tr><td>getName</td><td></td><td>获取当前线程名称，在实现runable接口的线程类中使用Thread.currentThread()来调用</td><td></td></tr><tr><td>join</td><td></td><td>让其他线程等待，只有当前线程执行完毕才会释放资格</td><td></td></tr></tbody></table><h3 id="线程生命周期"><a class="header-anchor" href="#线程生命周期"></a>线程生命周期</h3><blockquote><p>线程从创建、运行到结束总是处于五个状态之中：新建状态、就绪状态、阻塞状态、运行状态、死亡状态</p></blockquote><p><img src="https://img.kedr.cc/picbed/20200903202154.png" alt=""></p><p>新建状态：线程实例化但没有调用start()状态；</p><p>就绪状态：线程调用了start()方法，但没有得到cpu分配的资源；</p><p>运行状态：线程在执行run()方法；</p><p>死亡状态：run()方法运行完；一个未捕获的异常终止了run方法导致线程猝死；</p><p>阻塞状态：调用sleep()方法；线程调用一个在I/O上被阻塞的操作；线程试图得到一个锁，而该锁正被其他线程持有；线程在等待某个触发条件；</p><h3 id="线程安全"><a class="header-anchor" href="#线程安全"></a>线程安全</h3><ul><li>为什么会有线程安全问题？</li></ul><p>当多个线程同时写一个共享全局变量时，可能会发生数据冲突问题，也就是线程安全问题。</p><ul><li><p>线程安全问题怎么解决？</p><ul><li><p>synchronized</p><ul><li><p>同步代码块：将可能发生线程安全问题的代码，给包括起来（有问题的写操作）</p><ul><li><pre><code class="language-java">/** * @description 同步代码块 * @param * @return void * @author zhuweitung * @date 2020/9/5 */private void synchronizedCodeBlock() &#123;    while (count &gt; 0) &#123;        try &#123;            Thread.sleep(20);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        //synchronized包裹的代码一次只能有一个线程执行        synchronized (lock) &#123;            if (count &gt; 0) &#123;                log.info(&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;, Thread.currentThread().getName(), count);                count--;            &#125;        &#125;    &#125;&#125;<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>+ 同步函数：<span class="hljs-keyword">synchronized</span> 关键字修饰在方法上，相当于使用<span class="hljs-keyword">this</span>锁的同步代码块<br><br>  + ```java<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 同步函数</span><br><span class="hljs-comment">     * synchronized 关键字修饰在方法上</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">synchronizedFunction</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">20</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), count);<br>            count--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 同步函数相当于使用this锁的同步代码块</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> zhuweitung</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020/9/5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">synchronizedFunction2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">20</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//synchronized包裹的代码一次只能有一个线程执行</span><br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                    log.info(<span class="hljs-string">&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;</span>, Thread.currentThread().getName(), count);<br>                    count--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>静态同步函数：static、synchronized关键字修饰在方法上，相当于使用当前线程类.class锁的同步代码块</p><ul><li><pre><code class="language-java">/** * @description 静态同步函数 * static、synchronized关键字修饰在方法上 * @param * @return void * @author zhuweitung * @date 2020/9/5 */private static synchronized void staticSynchronizedFunction() &#123;    while (staticCount &gt; 0) &#123;        try &#123;            Thread.sleep(20);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        log.info(&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;, Thread.currentThread().getName(), staticCount);        staticCount--;    &#125;&#125;/** * @description 静态同步函数相当于使用当前线程类.class锁的同步代码块 * @param * @return void * @author zhuweitung * @date 2020/9/5 */private static void staticSynchronizedFunction2() &#123;    while (staticCount &gt; 0) &#123;        try &#123;            Thread.sleep(20);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        //synchronized包裹的代码一次只能有一个线程执行        synchronized (Thread04.class) &#123;            if (staticCount &gt; 0) &#123;                log.info(&quot;threadName=&#123;&#125;,count=&#123;&#125;&quot;, Thread.currentThread().getName(), staticCount);                staticCount--;            &#125;        &#125;    &#125;&#125;</code></pre></li></ul></li><li><p>适合场景：单个jvm环境下，集群中不可行</p></li></ul></li><li><p>lock</p></li></ul></li><li><p>多线程死锁：同步中嵌套同步，导致锁无法释放</p></li></ul><h3 id="线程间的通讯"><a class="header-anchor" href="#线程间的通讯"></a>线程间的通讯</h3><ul><li>wait：可以让当前线程由运行状态变为阻塞状态，可以释放锁，与synchronized一起使用，且使用同一个锁</li><li>notify：唤醒另一个线程（由阻塞状态变为运行状态 ），一般和wait一起使用</li><li>Lock接口：配合Condition接口实现等待/通知模式，常用lock()、unlock()方法，常用实现类ReentrantLock</li><li>Condition接口：依赖于Lock对象，常用await()、signal()方法</li></ul><p>线程的停止方法：</p><ul><li>使用退出标志，是线程正常退出，也就是当run方法执行完成后线程终止</li><li>使用stop()方法强行终止线程（不建议使用stop()方法，因为没有异常处理，可能会出现不可预料的结果）</li><li>使用interrupt()方法中断线程</li></ul><h3 id="守护线程"><a class="header-anchor" href="#守护线程"></a>守护线程</h3><blockquote><p>线程分为两类：用户线程（前台线程）和守护线程（后台线程）；</p></blockquote><p>守护线程（deamon）是为我们创建的用户线程提供服务的线程，如jvm的gc等；</p><ul><li>当用户线程运行结束的时候,daemon线程将会自动退出</li></ul><h3 id="线程的三大特性"><a class="header-anchor" href="#线程的三大特性"></a>线程的三大特性</h3><h4 id="原子性"><a class="header-anchor" href="#原子性"></a>原子性</h4><p>即一个或多个操作，要么全部执行并执行的过程不会被任何元素打断，要么就都不执行；</p><p>使用同步和lock来确保这个特性。</p><p>原子性其实就是保证数据一致，线程安全一部分。</p><h4 id="可见性"><a class="header-anchor" href="#可见性"></a>可见性</h4><p>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><h4 id="有序性"><a class="header-anchor" href="#有序性"></a>有序性</h4><p>程序执行的顺序按照代码的先后顺序执行。</p><p><em>注：线程安全包括两个方面：可见性，原子性</em></p><h3 id="Java内存模型"><a class="header-anchor" href="#Java内存模型"></a>Java内存模型</h3><p>共享内存模型就是Java内存模型（简称JMM，JMM决定一个线程对共享变量的写入时，能对另一个线程可见）。线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。</p><p><img src="https://img.kedr.cc/picbed/20200907193742.png" alt=""></p><p><em>注：与Java内存结构（方法区，堆，栈等）要区分概念</em></p><h3 id="Volatile"><a class="header-anchor" href="#Volatile"></a>Volatile</h3><p>作用：变量在多个线程之间可见，强制线程每次读取volatile关键字修饰的变量时都去主内存中取值。</p><p><em>注：不能解决原子性问题，在高并发下i++无法保证原子性，往往会出现问题，所以引入了AtomicInteger类。synchronized不仅保证可见性，而且保证原子性</em></p><h3 id="ThreadLocal"><a class="header-anchor" href="#ThreadLocal"></a>ThreadLocal</h3><p>ThreadLocal中填充的变量属于<strong>当前</strong>线程，该变量对其他线程而言是隔离的，线程之间互不影响。</p><p>ThreadLocal底层用Map实现，key:当前线程，value：值。</p><h3 id="强引用、软引用、弱引用、虚引用"><a class="header-anchor" href="#强引用、软引用、弱引用、虚引用"></a>强引用、软引用、弱引用、虚引用</h3><p>Java中4种引用的级别由高到低依次为：</p><p>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</p><p>他们之间在垃圾回收时的区别：</p><p><img src="https://img.kedr.cc/picbed/20200907203610.png" alt=""></p><p>各引用间的区别：</p><p><img src="https://img.kedr.cc/picbed/20200907203624.png" alt=""></p><h3 id="线程池"><a class="header-anchor" href="#线程池"></a>线程池</h3><p>为什么使用线程池？</p><p>因为启动或停止一个线程非常耗资源，将线程交给线程池来管理可以节约内存。</p><p>Java通过Executors（jdk1.5并发包）提供四种线程池，分别为：</p><ul><li><strong>newCachedThreadPool</strong> 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收线程，则新建线程</li><li>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</li><li>newScheduledThreadPool 创建一个定长的线程池。支持定时及周期性任务执行</li><li>newSingleThreadExecutor  创建一个<strong>单线程</strong>化线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>架构师</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM学习一</title>
    <link href="/posts/2373592892/"/>
    <url>/posts/2373592892/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM学习一"><a class="header-anchor" href="#JVM学习一"></a>JVM学习一</h1><h2 id="什么是JVM？"><a class="header-anchor" href="#什么是JVM？"></a>什么是JVM？</h2><p>java virtual machine：java虚拟机</p><p>特点：</p><ul><li>一次编写，到处运行（跨平台）</li><li>自动内存管理，垃圾回收功能（gc）</li></ul><p>运行图：</p><p><img src="https://img.kedr.cc/picbed/20200719115116.png" alt=""></p><ul><li>源代码编译为字节码文件</li><li>类加载器加载到JJVM内存中</li><li>类放在方法区，类的实例对象放在堆</li><li>实例对象调用方法时会用到虚拟机栈、程序计数器、本地方法栈</li><li>方法执行时，每行代码由执行引擎中的解释器逐行执行</li><li>方法中被频繁调用的代码会由即时编译器优化执行</li><li>垃圾回收会对堆中不再使用的对象回收</li><li>和操作系统交互时使用本地方法接口来调用操作系统提供的方法</li></ul><h2 id="JVM内存结构"><a class="header-anchor" href="#JVM内存结构"></a>JVM内存结构</h2><h3 id="程序计数器"><a class="header-anchor" href="#程序计数器"></a>程序计数器</h3><blockquote><p>program counter register 程序计数器（寄存器）</p></blockquote><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br>    System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译Java字节码文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">0:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String hello world!</span><br> <span class="hljs-attr">2:</span> <span class="hljs-string">astore_1</span><br> <span class="hljs-attr">3:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br> <span class="hljs-attr">6:</span> <span class="hljs-string">aload_1</span><br> <span class="hljs-attr">7:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="hljs-attr">10:</span> <span class="hljs-string">return</span><br></code></pre></td></tr></table></figure><p>左边为二进制字节码，中间为jvm指令</p><p>解释器读取指令解释为机器码，机器码再给CPU执行</p><p><strong>程序计数器作用：</strong></p><ul><li>记住下一条jvm指令的执行地址</li></ul><p>程序计数器特点：</p><ul><li>线程私有</li><li>不会存在内存溢出</li></ul><h3 id="虚拟机栈"><a class="header-anchor" href="#虚拟机栈"></a>虚拟机栈</h3><blockquote><p>Java virtual machine stacks</p></blockquote><ul><li>每个线程运行时所需要的内存，称为虚拟机栈</li><li>每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的方法</li></ul><p><em>按方法的调用关系入栈出栈</em></p><p>在IDEA中查看虚拟机栈（debug模式下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    function1();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function1</span><span class="hljs-params">()</span> &#123;<br>    function2();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function2</span><span class="hljs-params">()</span> &#123;<br>    function3();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">function3</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;function3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://img.kedr.cc/picbed/20200719123511.png" align="left"/><p><em>配置文件中</em>*-Xss**来设置栈内存*</p><p>方法中的局部变量线程安全</p><p><strong>栈内存溢出：</strong></p><ul><li>栈帧过多（递归没有出口）</li><li>栈帧多大（局部变量太多？）</li></ul><p><strong>线程运行诊断</strong></p><ol><li>cpu占用过高<ol><li>top命令定位cpu高占用进程id</li><li>ps H -eo pid,tid,%cpu | grep 进程id 命令定位cpu占用高的线程id</li><li>jstack 进程id 列出所有的线程信息，把线程id转换为16进制来定位具体的线程</li><li>分析有问题的线程代码来解决问题</li></ol></li></ol><h3 id="本地方法栈"><a class="header-anchor" href="#本地方法栈"></a>本地方法栈</h3><p>与 Java 虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native 方法服务。</p><p>native方法是Java通过JNI直接调用本地C/C++库。</p><p>线程私有。</p><h3 id="堆"><a class="header-anchor" href="#堆"></a>堆</h3><blockquote><p>通过new关键字创建的对象都会使用堆内存</p></blockquote><ul><li>线程共享，堆中的对象需要考虑线程安全的问题</li><li>有垃圾回收机制</li></ul><h4 id="堆内存溢出"><a class="header-anchor" href="#堆内存溢出"></a>堆内存溢出</h4><p>outofmemoryerror: java heap space</p><p>-Xmx设置堆空间</p><h4 id="堆内存诊断"><a class="header-anchor" href="#堆内存诊断"></a>堆内存诊断</h4><ul><li>jps：刹那可能当前系统中有哪些java进程</li><li>jmap：查看堆内存占用情况</li><li>jconsole：图形界面，多功能监测工具，可以连续监测</li><li>jvisualvm</li></ul><h3 id="方法区"><a class="header-anchor" href="#方法区"></a>方法区</h3><blockquote><p>在虚拟机启动时被创建，逻辑上是堆的一部分</p></blockquote><h4 id="方法区内存溢出"><a class="header-anchor" href="#方法区内存溢出"></a>方法区内存溢出</h4><ol><li>1.8以前<strong>永久代</strong>内存溢出：outofmemoryerror: premgen space</li><li>1.8以后<strong>元空间</strong>内存溢出：outofmemoryerror: metaspace</li></ol><h4 id="运行时常量池"><a class="header-anchor" href="#运行时常量池"></a>运行时常量池</h4><blockquote><p>常量池就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><p>运行时常量池，常量池是.class文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p></blockquote><p>javap -v .class文件 命令反编译查看类的字节码文件</p><p>类的字节码文件包含类基本信息、常量池、类方法定义（包含了虚拟机指令）的信息。</p><h4 id="StringTable"><a class="header-anchor" href="#StringTable"></a>StringTable</h4><ul><li>常量池中的字符串仅是符号，第一次用到时才变为对象</li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串变量拼接的原理是StringBuilder</li><li>字符串常量拼接的原理是编译期优化</li><li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池，会把串池中的对象返回</li></ul><h2 id="垃圾回收"><a class="header-anchor" href="#垃圾回收"></a>垃圾回收</h2>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux知识分享</title>
    <link href="/posts/449031110/"/>
    <url>/posts/449031110/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux知识分享"><a class="header-anchor" href="#Linux知识分享"></a>Linux知识分享</h1><h2 id="操作系统"><a class="header-anchor" href="#操作系统"></a>操作系统</h2><ol><li><p>什么是操作系统？</p><blockquote><p>操作系统(Operating System，简称OS)是管理计算机硬件资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。————摘自百度百科</p></blockquote></li><li><p>操作系统有哪些？</p><p>目前使用比较多的有WINDOWS <img src="https://img.kedr.cc/picbed/20200711133947.png" style="zoom:5%;" />，LINUX  <img src="https://img.kedr.cc/picbed/200812941912588_2.jpg" style="zoom:25%;" />，MAC  <img src="https://img.kedr.cc/picbed/20200711134109.png" style="zoom:1.5%;" />，UNIX。</p></li><li><p>各操作系统间的关系</p><p>不管是WINDOWS操作系统、LINUX系统还是苹果操作系统，甚至包括操作系统的鼻祖UNIX操作系统，最早都是用C语言编写的。</p><p><img src="http://www.gonet.com.cn/~editor/eweditor/uploadfile/20171027141729471.png" alt="区别"></p><p>WINDOWS，LINUX，MAC的诞生都或多或少的借鉴了UNIX。</p><p>UNIX是一种<code>分时操作系统</code>。</p><blockquote><p>说明：分时操作系统使一台计算机可以同时为<code>多个用户</code>服务，连接计算机的终端用户交互式发出命令，操作系统采用时间片轮转的方式处理用户的服务请求并在终端上显示结果（操作系统将CPU的时间划分成若干个片段，称为时间片）。操作系统以时间片为单位，轮流为每个终端用户服务，每次服务一个时间片。</p></blockquote><p>UNIX系统在结构上分为核心程序(<strong>kernel</strong>)和外围程序(<strong>shell</strong>)两部分。</p><p>核心部分承担系统内部的各个模块的功能，即处理机和进程管理、存储管理、设备管理和文件系统。</p><p>外围部分包括系统的用户界面、系统实用程序以及应用程序，用户通过外围程序使用计算机。</p></li><li><p>各操作系统优缺点：</p><table><thead><tr><th>操作系统</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Windows</td><td>啥都有，啥都会</td><td>经常出现你不想要的东西</td></tr><tr><td>Linux</td><td>你让它干嘛，它就能干嘛。</td><td>容易折腾坏</td></tr><tr><td>Mac</td><td>稳定，好看</td><td>得按它的规则来</td></tr></tbody></table></li></ol><h2 id="Linux的诞生"><a class="header-anchor" href="#Linux的诞生"></a>Linux的诞生</h2><p>Linux 内核最初是由李纳斯•托瓦兹（<strong>Linus Torvalds</strong>）在赫尔辛基大学读书时出于个人爱好而编写的，当时他觉得教学用的迷你版 UNIX 操作系统 Minix 太难用了，于是决定自己开发一个操作系统。</p><p>Linus Torvalds没有保留 Linux 源代码的版权，公开了代码，并邀请他人一起完善 Linux。与 Windows 及其他有专利权的操作系统不同，Linux 开放源代码，任何人都可以免费使用它。</p><p>Linux的logo是一只企鹅。</p>   <img src="https://img.kedr.cc/picbed/200812941912588_2.jpg" style="zoom:100%;" align="left" /><p>为什么选择企鹅，坊间流传一种说法：</p><blockquote><p>企鹅是南极洲的标志性动物，根据国际公约，南极洲为全人类共同所有，不属于世界上的任何国家，可国家都无权将南极洲纳入其版图。Linux 选择企鹅图案作为 Logo，其含义是：开放源代码的 Linux 为全人类共同所有，可公司无权将其私有。</p></blockquote><h2 id="Linux系统结构"><a class="header-anchor" href="#Linux系统结构"></a>Linux系统结构</h2><p>Linux系统的结构可以概括为4个部分：内核、shell、文件系统和应用程序。</p><img src="https://img.kedr.cc/picbed/20200711142210.png" style="zoom:80%;" /><p>这个结构与UNIX基本上是一致的，所以UNIX和Linux之间可以说是父子关系。</p><h3 id="内核"><a class="header-anchor" href="#内核"></a>内核</h3><p><strong>内核是操作系统的核心</strong>，具有很多最基本功能，如虚拟内存、多任务、共享库、需求加载、可执行程序和TCP/IP网络功能。Linux内核的模块分为以下几个部分：存储管理、CPU和进程管理、文件系统、设备管理和驱动、网络通信、系统的初始化和系统调用等。</p><h3 id="Shell"><a class="header-anchor" href="#Shell"></a>Shell</h3><p>Shell 层是与用户直接交互的界面。用户可以在提示符下输入命令行，由 Shell 解释执行并输出相应结果或者有关信息，所以我们也把 Shell 称作命令解释器，利用系统提供的丰富命令可以快捷而简便地完成许多工作。</p><h3 id="文件系统"><a class="header-anchor" href="#文件系统"></a>文件系统</h3><p>在Linux中一切皆文件。</p><p>Linux中的文件类型：</p><p>a) 普通文件(-)</p><p>js、class、html等这些文件类型都属于普通文件，Linux用户可以根据访问权限对普通文件进行查看、更改、删除。</p><img src="https://img.kedr.cc/picbed/20200711151221.png" align="left" /><p>b) 目录文件(d)</p><p>目录文件包含了各自目录下的文件名和指向这些文件的指针。</p><img src="https://img.kedr.cc/picbed/20200711151331.png" align="left" /><p>c) 符号链接文件(l)</p><p>类似于windows中的快捷方式，通常称为软连接。</p><img src="https://img.kedr.cc/picbed/20200711151412.png" align="left"/><p>d) 设备文件(b/c)</p><p>包括块设备文件(b)</p><img src="C:\Users\zhuweitung\AppData\Roaming\Typora\typora-user-images\image-20200711151836544.png" alt="image-20200711151836544" align="left" /><p>和字符设备文件©</p><img src="https://img.kedr.cc/picbed/20200711151746.png" align="left" /><p>这些设备文件一般都在/dev/目录下。</p><p>e) 管道文件§</p><p>管道文件主要用户进程间的通讯。进程关闭管道文件也会关闭。</p><p>…</p><p>linux中的文件是没有拓展名的，一个文件能不能被执行与它是否可执行的属性有关。</p><img src="https://img.kedr.cc/picbed/20200711152800.png" align="left" /><p>上图中第一位为文件类型，“-”表示此文件为普通文件；</p><p>第一组&quot;rwx&quot;表示文件创建用户的权限，&quot;r&quot;表示有读权限，&quot;w&quot;表示有写权限，“x&quot;表示有执行权限，那一项为”-&quot;表示没有该权限；</p><p>第二组&quot;rwx&quot;表示文件创建用户所属组的权限；</p><p>第三组&quot;rwx&quot;表示其他用户的权限；</p><p><strong>Linux的目录结构：</strong></p><p><img src="https://img.kedr.cc/picbed/20200712143219.png" alt=""></p><ul><li><p>bin (binaries)存放二进制可执行文件</p></li><li><p>sbin (super user binaries)存放二进制可执行文件，只有root才能访问</p></li><li><p>etc (etcetera)存放系统配置文件</p></li><li><p>usr (unix shared resources)用于存放共享的系统资源</p></li><li><p>home 存放用户文件的根目录</p></li><li><p>root 超级用户目录</p></li><li><p>dev (devices)用于存放设备文件</p></li><li><p>lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块</p></li><li><p>mnt (mount)系统管理员安装临时文件系统的安装点</p></li><li><p>boot 存放用于系统引导时使用的各种文件</p></li><li><p>tmp (temporary)用于存放各种临时文件</p></li><li><p>var (variable)用于存放运行时需要改变数据的文件</p></li></ul><h2 id="Linux发行版"><a class="header-anchor" href="#Linux发行版"></a>Linux发行版</h2><p>以Linux内核为中心，再集成搭配各种各样的系统管理软件或应用工具软件组成一套完整的操作系统，如此的组合便称为Linux发行版。</p><p>常见的Linux发行版有Debian、centos、Ubuntu、Fedora、deepin、manjaro、Linux mint等。</p><h3 id="Debian"><a class="header-anchor" href="#Debian"></a>Debian</h3><ul><li>免费，最符合开源精神的发行版，默认不包含如何专有驱动</li><li>软件包通常选择稳定的版本而不是最新的</li><li>系统的开发维护由社区驱动</li><li><strong>apt</strong>包管理</li><li>图形化安装</li></ul><p><img src="https://img.kedr.cc/picbed/20200712135143.png" alt=""></p><h3 id="Ubuntu"><a class="header-anchor" href="#Ubuntu"></a>Ubuntu</h3><p>比较热门的Linux发行版。</p><ul><li>安装简单</li><li>unity3d图形界面</li><li>有些驱动支持较好，比如显卡驱动</li><li>社区活跃，遇到问题能够很快找到解决方案</li><li>版本更新快</li><li><strong>apt</strong>包管理</li></ul><p>Ubuntu还有一些衍生版，主要是桌面环境不一样。</p><ol><li><p>Ubuntu</p><p>基于Gnome</p><p><img src="https://img.kedr.cc/picbed/Ubuntu-18.04-GNOME-DE.png" alt=""></p></li><li><p>Kubuntu</p><p>基于KDE</p><p><img src="https://img.kedr.cc/picbed/kubuntu.png" alt=""></p></li><li><p>Lubuntu</p><p>基于LXDE</p><p><img src="https://img.kedr.cc/picbed/20200712135559.png" alt=""></p></li><li><p>Xubuntu</p><p>基于Xfce</p><p><img src="https://img.kedr.cc/picbed/20200712135711.png" alt=""></p></li></ol><h3 id="Centos"><a class="header-anchor" href="#Centos"></a>Centos</h3><p>是著名的RedHat Linux的社区版。</p><ul><li>相当相当稳定</li><li>版本更新紧跟RedHat</li><li>适合最为服务器操作系统使用</li><li><strong>yum</strong>包管理</li></ul><p><img src="https://img.kedr.cc/picbed/20200712140218.png" alt=""></p><h3 id="Fedora"><a class="header-anchor" href="#Fedora"></a>Fedora</h3><p>经常和Ubuntu比较的发行版，与Ubuntu最大的不同就是包管理不一样</p><ul><li><strong>yum</strong>包管理</li><li>新技术吸纳较快</li><li>提供多种桌面环境镜像，默认Gnome，可以轻松切换到KDE， XFce， MATE 以及 Cinnamon</li><li>版本更新快</li><li>图形化安装</li></ul><p><img src="https://img.kedr.cc/picbed/20200712140558.png" alt=""></p><h3 id="Deepin"><a class="header-anchor" href="#Deepin"></a>Deepin</h3><ul><li>国产系统</li><li><strong>dpkg</strong>包管理</li><li>UI好看</li><li>中文社区活跃</li><li>图形化安装</li><li>仓库中软件版本滞后</li><li>驱动支持不完善</li><li>官方文档不更新</li></ul><p><img src="https://img.kedr.cc/picbed/20200712141208.png" alt=""></p><h3 id="Manjaro"><a class="header-anchor" href="#Manjaro"></a>Manjaro</h3><p>基于 Arch Linux， 它是一个运行快速，容易使用，轻量级的发行版。</p><ul><li><strong>pacman</strong>包管理</li><li>轻量级</li><li>滚动更新</li><li>软件生态差</li></ul><p><img src="https://img.kedr.cc/picbed/manjaro-linux-kde-15-09-bellatrix-ships-with-the-kde-plasma-5-4-1-desktop-492919-2.png" alt=""></p><h3 id="Linux-Mint"><a class="header-anchor" href="#Linux-Mint"></a>Linux Mint</h3><p>基于Ubuntu开发，易用且功能强大</p><ul><li>默认使用Cinnamon桌面环境</li><li>与ubuntu相同特点</li></ul><p><img src="https://img.kedr.cc/picbed/20200712142204.png" alt=""></p><h2 id="连接工具"><a class="header-anchor" href="#连接工具"></a>连接工具</h2><ul><li>Putty<ul><li>轻量</li><li>支持ppk，pub格式密码连接</li></ul></li><li>secureCRT<ul><li>支持普通密码和pub格式密码，不支持pem密码连接</li><li>可实现文件本地与服务器界面式样的上传下载，双击即可使用</li></ul></li><li>xshell<ul><li>个人版免费</li><li>支持pem、pub、ppk多种密钥格式</li><li>自定义配色</li><li>使用xftp进行文件传输</li></ul></li></ul><h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2><p>命令格式：命令 -选项 参数 （选项和参数可以为空），如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lh /usr<br></code></pre></td></tr></table></figure><h3 id="操作文件及目录"><a class="header-anchor" href="#操作文件及目录"></a>操作文件及目录</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>-n 显示行号</td><td>文件路径</td><td>显示文本内容</td></tr><tr><td>mo=</td><td>-NUM 每次显示NUM行 +NUM 从第NUM行开始 +/String 查找字符串</td><td>文件路径</td><td>分页显示文件内容，空格向后翻，b向前</td></tr><tr><td>head</td><td>-n 显示行数</td><td>文件路径</td><td>查看文本开头部分指定行数</td></tr><tr><td>tail</td><td>-f 循环滚动读取文件动态显示在屏幕上</td><td>文件路径</td><td>查看文本结尾内容</td></tr><tr><td>wc</td><td></td><td>文件路径</td><td>统计文本的行数、字数、字符数</td></tr><tr><td>cd</td><td></td><td>路径</td><td>进入路径</td></tr><tr><td>mv</td><td></td><td>源文件 目标文件</td><td>移动文件或将文件改名</td></tr><tr><td>cp</td><td></td><td>源文件 目标文件</td><td>复制文件或目录</td></tr><tr><td>touch</td><td></td><td>文件名</td><td>创建空文件</td></tr><tr><td>mkdir</td><td>-p 递归创建</td><td>文件夹名</td><td>创建文件夹</td></tr><tr><td>rm</td><td>-rf 递归+强制删除</td><td>文件或目录路径</td><td>删除文件或目录</td></tr></tbody></table><h3 id="系统常用命令"><a class="header-anchor" href="#系统常用命令"></a>系统常用命令</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>-p 指定监控某一进程</td><td>top</td><td>显示系统中各个进程的资源占用状况</td></tr><tr><td>ps</td><td>-ef 显示所有进程+全格式</td><td>ps -ef | grep java</td><td>查看进程</td></tr><tr><td>netstat</td><td>-p 显示进程id和进程名</td><td>netstat  -ap | grep ssh</td><td>查看端口情况</td></tr><tr><td>kill</td><td>-9 强制终止 -15 终止</td><td>kill -9 4563</td><td>杀死进程</td></tr></tbody></table><p>*注：管道符“|”的作用：格式 命令A|命令B，将命令A的正确输出作为命令B的操作对象</p><h3 id="压缩解压缩"><a class="header-anchor" href="#压缩解压缩"></a>压缩解压缩</h3><table><thead><tr><th>命令</th><th>-常用选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>zip</td><td>[参数] [压缩后文件名] [要压缩的目录] -r 将目录压缩</td><td>zip -r test.zip tmp/</td><td>压缩文件或目录</td></tr><tr><td>unzip</td><td>[参数] [待解压缩文件] -d 解压到的路径</td><td>zip -d /opt test.zip</td><td>解压缩文件</td></tr><tr><td>tar</td><td>-zcvf 压缩 -zxvf 解压</td><td>tar -zcvf test.tar.gz tmp/</td><td>解压缩文件或目录</td></tr></tbody></table><h3 id="文件权限操作"><a class="header-anchor" href="#文件权限操作"></a>文件权限操作</h3><img src="https://img.kedr.cc/picbed/20200712153414.png" align="left" /><table><thead><tr><th>命令</th><th>选项</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>chmod</td><td>u表示所属用户，g表示所属组，o表示其他用户，a表示所有用户；+表示增加权限，-表示取消权限，=表示唯一设定权限；r表示可读，w表示可写，x表示可执行，也可以三位数表示</td><td>chmod                      a+x <a href="http://test.sh">test.sh</a></td><td>设置文件或目录的权限</td></tr><tr><td>chown</td><td>-R 递归文件夹</td><td>chown mysql mysql.ini</td><td>改变文件或目录的用户或组</td></tr></tbody></table><h2 id="常用快捷键"><a class="header-anchor" href="#常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>ctrl+c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏</td></tr><tr><td>ctrl+r</td><td>搜索历史命令</td></tr><tr><td>ctrl+q</td><td>退出</td></tr><tr><td>tab</td><td>自动补全</td></tr></tbody></table><h2 id="vim编辑器"><a class="header-anchor" href="#vim编辑器"></a>vim编辑器</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在光标前插入</td></tr><tr><td>I</td><td>在光标当前行开始插入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>A</td><td>在光标当前行末尾插入</td></tr><tr><td>o</td><td>在光标当前行的下一行插入新行</td></tr><tr><td>O</td><td>在光标当前行的上一行插入新行</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>gg</td><td>跳到行首</td></tr><tr><td>G</td><td>跳到行末</td></tr><tr><td>:n</td><td>跳到第n行</td></tr><tr><td>u</td><td>undo，取消上一步操作</td></tr><tr><td>ctrl+r</td><td>redo，取消到undo之前</td></tr><tr><td>x</td><td>删除光标所在处字符</td></tr><tr><td>dd</td><td>删除光标所在行</td></tr><tr><td>dG</td><td>删除光标所在行到末尾行的所有内容</td></tr><tr><td>D</td><td>删除光标到行尾的内容</td></tr><tr><td>shift+zz</td><td>保存并退出，与:wq作用一样</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>centos</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL学习笔记（一）</title>
    <link href="/posts/1545079908/"/>
    <url>/posts/1545079908/</url>
    
    <content type="html"><![CDATA[<h2 id="MYSQL学习笔记（一）"><a class="header-anchor" href="#MYSQL学习笔记（一）"></a>MYSQL学习笔记（一）</h2><h3 id="sql语言的分类"><a class="header-anchor" href="#sql语言的分类"></a>sql语言的分类</h3><h4 id="DDL"><a class="header-anchor" href="#DDL"></a>DDL</h4><blockquote><p>数据定义语言 Data Definition Language。DDL用于数据库、表、视图等的建立、删除。DDL包括CREATE、 ALTER、 DROP等。</p></blockquote><h4 id="DML"><a class="header-anchor" href="#DML"></a>DML</h4><blockquote><p>数据操纵语言 Data Manipulation Language。DML用于添加、删除和修改数据表中的记录。DML包括INSERT、 DELETE和UPDATE。</p></blockquote><h4 id="DQL"><a class="header-anchor" href="#DQL"></a>DQL</h4><blockquote><p>数据控制语言 Data Control Language。DCL包括数据库对象的权限管理和事务管理。DCL包括COMMIT、 ROLLBACK、 GRANT等 。</p></blockquote><h4 id="DCL"><a class="header-anchor" href="#DCL"></a>DCL</h4><blockquote><p>数据查询语言 Data Query Language。查询是数据库的基本功能。DQL中使用SELECT查询数据表中的记录 。</p></blockquote><h3 id="MySQL支持的存储引擎"><a class="header-anchor" href="#MySQL支持的存储引擎"></a>MySQL支持的存储引擎</h3><blockquote><p>存储引擎就是如何存储数据、如何更新数据、如何查询数据、如何为存储的数据建立索引等一系列技术的实现方法。</p></blockquote><table><thead><tr><th>存储引擎</th><th>描述</th></tr></thead><tbody><tr><td>myisam</td><td>拥有较快的插入、查询速度，但不支持事务</td></tr><tr><td><strong>innodb</strong></td><td><strong>支持ACID事务</strong>，支持行级锁，支持外键；MySQL5.5版本之后的默认存储引擎</td></tr><tr><td>MRG_MYISAM</td><td>将一组结构相同的MyISAM表聚合成一个整体，在进行增删改查操作</td></tr><tr><td>memory</td><td>所有数据存储在内存中，响应快；MySQL重启时数据全部丢失</td></tr><tr><td>archive</td><td>归档，且有压缩机制，适用于历史数据归档</td></tr><tr><td>CSV</td><td>逻辑上由逗号分隔数据，会为每张表创建一个.csv文件</td></tr></tbody></table><h3 id="MySQL数据类型"><a class="header-anchor" href="#MySQL数据类型"></a>MySQL数据类型</h3><blockquote><p>在创建表时，准确的定义字段的数据类型是非常重要的。 MySQL的数据类型大致可以分为3类：数值、日期/时间和字符串类型。</p></blockquote><h4 id="数值类型"><a class="header-anchor" href="#数值类型"></a>数值类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>小整数值，如状态</td></tr><tr><td>smallint</td><td>2</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3</td><td>大整数值</td></tr><tr><td>int</td><td>4</td><td>大整数值</td></tr><tr><td>bigint</td><td>8</td><td>极大整数值</td></tr><tr><td>float</td><td>4</td><td>单精度浮点数值</td></tr><tr><td>double</td><td>8</td><td>双精度浮点数值</td></tr><tr><td>decimal</td><td>Max(D+, M+)</td><td>含小数值，例如金额</td></tr></tbody></table><h4 id="日期和时间类型"><a class="header-anchor" href="#日期和时间类型"></a>日期和时间类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>YYYY-MM-DD</td></tr><tr><td>time</td><td>3</td><td>HH:MM:SS</td></tr><tr><td>year</td><td>1</td><td>YYYY</td></tr><tr><td>datetime</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td></tr><tr><td>timestamp</td><td>8</td><td>YYYYMMDDHHMMSS</td></tr></tbody></table><h4 id="字符串类型"><a class="header-anchor" href="#字符串类型"></a>字符串类型</h4><table><thead><tr><th>类型</th><th>所占字节数</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>0~255</td><td>定长字段串</td></tr><tr><td>varchar</td><td>0~65535</td><td>变长字符串</td></tr><tr><td>text</td><td>0~65535</td><td>长文本数据</td></tr><tr><td>blob</td><td></td><td>二进制形式的文本数据</td></tr></tbody></table><h3 id="数据库查询语言"><a class="header-anchor" href="#数据库查询语言"></a>数据库查询语言</h3><h4 id="having"><a class="header-anchor" href="#having"></a>having</h4><p>having的作用和where差不多，区别在于：where关键字无法与聚合函数一起使用，而having可以对分组后的各组数据进行筛选。</p><h4 id="表的连接"><a class="header-anchor" href="#表的连接"></a>表的连接</h4><ul><li><p>内连接：join 或inner join</p></li><li><p>外连接：</p><blockquote><p>left join：左外连接</p><p>right join：右外连接</p><p>full join：全外连接</p></blockquote></li><li><p>自连接：同一张表的连接</p></li></ul><p><img src="https://img.kedr.cc/picbed/20200329141406.png" alt=""></p><h3 id="MySQL权限体系"><a class="header-anchor" href="#MySQL权限体系"></a>MySQL权限体系</h3><h4 id="概念"><a class="header-anchor" href="#概念"></a>概念</h4><p>MySQL的权限体系大致分为5个层级，全局层级、数据库层级、表层级、列层级和子程序层级。</p><table><thead><tr><th>层级</th><th>描述</th></tr></thead><tbody><tr><td>全局层级</td><td>适用于一个给定服务器中的所有数据库。这些权限存储在mysql.user表中。GRANT ALL ON *.*和REVOKE ALL ON *.*只授予和撤销全局权限。</td></tr><tr><td>数据库层级</td><td>适用于一个给定数据库中的所有目标。这些权限存储在mysql.db和mysql.host表中。GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</td></tr><tr><td>表层级</td><td>适用于一个给定表中的所有列。这些权限存储在mysql.talbes_priv表中。GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</td></tr><tr><td>列层级</td><td>适用于一个给定表中的单一列。这些权限存储在mysql.columns_priv表中。当使用REVOKE时，您必须指定与被授权列相同的列。</td></tr><tr><td>子程序层级</td><td>CREATE ROUTINE, ALTER ROUTINE, EXECUTE和GRANT权限适用于已存储的子程序。这些权限可以被授予为全局层级和数据库层级。而且，除了CREATE ROUTINE外，这些权限可以被授予为子程序层级，并存储在mysql.procs_priv表中。</td></tr></tbody></table><h4 id="权限信息存储"><a class="header-anchor" href="#权限信息存储"></a>权限信息存储</h4><p>MySQL的权限信息主要存储在一下几张表中：</p><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td>user</td><td>用户权限表，记录账号、密码及全局性权限信息</td></tr><tr><td>db</td><td>记录数据库相关权限</td></tr><tr><td>table_priv</td><td>用户对某个表拥有的权限</td></tr><tr><td>column_priv</td><td>用户对某表的某个列所拥有的权限</td></tr><tr><td>procs_priv</td><td>用户对存储过程及存储函数的操作权限</td></tr></tbody></table><h4 id="权限列表"><a class="header-anchor" href="#权限列表"></a>权限列表</h4><p><img src="https://img.kedr.cc/picbed/20200329144645.png" alt=""></p><h4 id="授权"><a class="header-anchor" href="#授权"></a>授权</h4><p>格式：grant 权限类型 on databaseName.tableName to 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; grant select on test.user to zhangsan@localhost;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="撤销授权"><a class="header-anchor" href="#撤销授权"></a>撤销授权</h4><p>格式：revoke 权限类型 on databaseName.tableName from 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; revoke select on test.user from zhangsan@localhost;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="刷新权限"><a class="header-anchor" href="#刷新权限"></a>刷新权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="查看权限"><a class="header-anchor" href="#查看权限"></a>查看权限</h4><p>格式：show grants for 用户名@主机名;</p><p>e.g.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show grants <span class="hljs-keyword">for</span> zhangsan@localhost;<br>+-----------------------------------------------+<br>| Grants <span class="hljs-keyword">for</span> zhangsan@localhost                 |<br>+-----------------------------------------------+<br>| GRANT SELECT ON *.* TO <span class="hljs-string">&#x27;zhangsan&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> |<br>+-----------------------------------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="禁止远程登录"><a class="header-anchor" href="#禁止远程登录"></a>禁止远程登录</h4><p>默认情况下Mysql安装完之后root用户是禁止远程登录的。</p><p>是否能远程登录只要修改mysql.user表的host字段即可，修改为<code>localhost</code>或<code>127.0.0.1</code>即表示禁止远程登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use mysql;                  <br>Database changed                   <br>mysql&gt; select user, host from user;<br>+---------------+-----------+<br>| user          | host      |<br>+---------------+-----------+<br>| zhangsan      | %         |<br>| mysql.session | localhost |<br>| mysql.sys     | localhost |<br>| root          | localhost |<br>+---------------+-----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; update user <span class="hljs-built_in">set</span> host = <span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;zhangsan&#x27;</span>;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select user, host from user;<br>+---------------+-----------+<br>| user          | host      |<br>+---------------+-----------+<br>| mysql.session | localhost |<br>| mysql.sys     | localhost |<br>| root          | localhost |<br>| zhangsan      | localhost |<br>+---------------+-----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客部署到私有服务器</title>
    <link href="/posts/1827970956/"/>
    <url>/posts/1827970956/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo博客部署到私有服务器"><a class="header-anchor" href="#hexo博客部署到私有服务器"></a>hexo博客部署到私有服务器</h2><blockquote><p>上次搭了个v2ray后发现服务器就这么放着有点浪费，于是打算把之前托管到github，码云的hexo博客部署到服务器上。也就是在本地使用hexo写博客后，使用<code>hexo deploy</code>命令将静态网站push到服务上。</p></blockquote><h3 id="服务器环境准备"><a class="header-anchor" href="#服务器环境准备"></a>服务器环境准备</h3><p>确保服务器上安装了webserver 如<code>tomcat</code>, <code>nginx</code>, <code>caddy</code>等，来保证运行hexo生成的静态网站。</p><h3 id="git配置"><a class="header-anchor" href="#git配置"></a>git配置</h3><p>安装git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git<br>git --version<br></code></pre></td></tr></table></figure><p>安装成功之后，配置git用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser git<br></code></pre></td></tr></table></figure><p>为了安全起见，我们需要<strong>关闭git账号登录shell的权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/passwd<br></code></pre></td></tr></table></figure><p>在文件最后找到<code>git</code>行，将<code>/bin/bash</code>替换为<code>/usr/bin/git-shell</code></p><p>创建空仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git<br><span class="hljs-built_in">mkdir</span> repos<br><span class="hljs-built_in">cd</span> repos<br>git init --bare blog.git<br></code></pre></td></tr></table></figure><p>创建网站根目录，之后hexo生成的静态文件会部署到这里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git<br><span class="hljs-built_in">mkdir</span> -p projects/blog<br></code></pre></td></tr></table></figure><p>本地生成<code>ssh key</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成的<code>ssh key</code>在<code>C:\Users\你的用户名\.ssh</code>文件夹下，名为<code>id_rsa.pub</code></p><p>复制<code>id_rsa.pub</code>文件内的内容，将内容加到git用户的authorized_keys文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/.ssh<br><span class="hljs-built_in">touch</span> authorized_keys<br>vim authorized_keys<br></code></pre></td></tr></table></figure><p>配置hooks钩子，保证收到push请求后执行命令将提交的文件部署到网站根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /home/git/repos/blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>将下面的脚本复制到文件内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f<br></code></pre></td></tr></table></figure><p>并给git用户添加可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x post-receive<br></code></pre></td></tr></table></figure><p>网站的根目录也需要给git权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R git:git /home/git/repos/blog.git<br>sudo <span class="hljs-built_in">chown</span> -R git:git /home/git/projects/blog<br></code></pre></td></tr></table></figure><h3 id="hexo配置"><a class="header-anchor" href="#hexo配置"></a>hexo配置</h3><p>修改博客根目录下的<code>_config.yml</code>，将仓库添加到deploy配置中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">git@blog.zhuweitung.space:/home/git/repos/blog.git</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>hexo部署测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo douban<br>hexo deploy<br></code></pre></td></tr></table></figure><p>hexo提示push成功，再到服务器的网站根目录下看一下是否有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/git/projects/blog<br>ll -h<br></code></pre></td></tr></table></figure><p>有文件了！到浏览器里输入域名发现博客部署成功了！</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>git</tag>
      
      <tag>linux</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点六</title>
    <link href="/posts/4243927841/"/>
    <url>/posts/4243927841/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点六"><a class="header-anchor" href="#中级软考知识点六"></a>中级软考知识点六</h2><h3 id="数据结构"><a class="header-anchor" href="#数据结构"></a>数据结构</h3><ul><li><p>线性表</p><ul><li>顺序表</li><li>链表<ul><li>单链表</li><li>循环链表</li><li>双向链表</li></ul></li><li>队列</li><li>栈</li></ul></li><li><p>树</p><ul><li>二叉树<ul><li>先序遍历：根 左 右</li><li>中序遍历：左 根 右</li><li>后序遍历：左 右 根</li><li>层次遍历</li></ul></li><li>最优二叉树（哈弗曼树）</li><li>线索二叉树：节点记录前驱和后驱</li><li>平衡二叉树：任意节点的左右子树深度不超过1</li></ul></li><li><p>图论</p><ul><li>有向图</li><li>无向图</li><li>图的存储<ul><li>邻接矩阵：二维数组</li><li>邻接表：一位数组+链表</li></ul></li><li>图的遍历<ul><li>广度优先BFS</li><li>深度优先DFS</li></ul></li><li>拓扑排序</li><li>图的最小生成树</li></ul></li></ul><h3 id="编译过程"><a class="header-anchor" href="#编译过程"></a>编译过程</h3><ul><li><p><img src="https://img.kedr.cc/picbed/20191108205721.png" alt=""></p></li><li><p>词法错误：非法字符，关键字灬标识符拼写错误</p></li><li><p>语法错误：语法结构出错，if endif不匹配，缺分号</p></li><li><p>语义错误：死循环，零除数，其他逻辑错误</p></li></ul><h3 id="表达式"><a class="header-anchor" href="#表达式"></a>表达式</h3><ul><li><p>前缀表达式：+ab</p></li><li><p>中缀表达式：a+b</p></li><li><p>后缀表达式：ab+</p></li><li><p>程序语言</p><p><img src="https://img.kedr.cc/picbed/20191108211709.png" alt=""></p></li></ul><h3 id="多媒体基础知识"><a class="header-anchor" href="#多媒体基础知识"></a>多媒体基础知识</h3><ul><li>音频容量计算：每秒容量=采样频率（Hz）*样本精度（位）*声道数/8</li><li>图像容量计算：容量=长*宽*位数/8 或 长*宽*\log2(色数)/8</li><li>常见多媒体标准<ul><li>JPEG-2000<ul><li>有损&amp;无损</li><li>压缩比更高</li><li>小波变换</li><li>医学图像应用</li></ul></li><li>MPEG-1<ul><li>离散余弦</li><li>VCD</li><li>MP3</li></ul></li><li>MPEG-2<ul><li>离散余弦</li><li>Huffman</li><li>DVD</li><li>有线/卫星电视</li><li>AAC</li></ul></li><li>MPEG-4<ul><li>网络应用/可视电话</li><li>无线通信</li><li>增强交互性</li><li>数码权限管理</li><li>多媒体传输集成框架</li></ul></li><li>MPEG-7<ul><li>多媒体内容描述接口</li><li>具备描述功能</li><li>不是编码标准</li></ul></li><li>MPEG-21<ul><li>融合不同协议</li><li>制定新标准</li><li>标准集成</li></ul></li><li>JPEG<ul><li>有损</li><li>RGB转YUV</li><li>离散余弦</li></ul></li></ul></li></ul><h3 id="知识产权"><a class="header-anchor" href="#知识产权"></a>知识产权</h3><ul><li>版权</li><li>软件著作权：不需要申请</li><li>专利权：需要申请</li><li>商标权：需要申请</li><li>商业秘密权</li></ul><h3 id="算法"><a class="header-anchor" href="#算法"></a>算法</h3><ul><li>分治法：分而治之，将问题分解为规模较小的子问题，一般用递归求解<ul><li>快排</li><li>并归排序</li><li>矩阵乘法</li><li>大整数乘法</li><li>汉诺塔</li><li>求斐波那契数列</li><li>二分查找</li></ul></li><li>回溯法：选优搜索法，按选优条件向前搜索，若到达某一步发现选择并不优或打不到目标就退回伊布重新选择<ul><li>N皇后问题</li><li>迷宫</li><li>背包问题</li></ul></li><li>贪心法：（用于求满意解）总是做出在当前来说是最好的选择，而并不从整体上加以考虑。局部最优选择，不保证整体最优<ul><li>背包问题（如装箱）</li><li>多机调度</li><li>找零钱问题</li></ul></li><li>动态规划法：（用于求最优解）对于每一步决策，列出各种可能的局部解，再依据某种判定条件，舍弃哪些肯定不能得到最优解的局部解，在每一步都经过筛选，以每一步都是最优解来保证全局是最优解。<ul><li>背包问题</li><li>LCS最长公共子序列</li><li>斐波那契数列</li><li>矩阵乘法</li></ul></li><li>时间复杂度<ul><li><img src="https://img.kedr.cc/picbed/20191108215144.png" alt=""></li><li>二分或与树相关的时间复杂度一般为O(log2(n))</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点五</title>
    <link href="/posts/4209834786/"/>
    <url>/posts/4209834786/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点五"><a class="header-anchor" href="#中级软考知识点五"></a>中级软考知识点五</h2><h3 id="面向对象"><a class="header-anchor" href="#面向对象"></a>面向对象</h3><ul><li>7大设计原则<ul><li>单一职责原则：设计目的单一的类</li><li>开放-封闭原则：对拓展开放，对修改封闭</li><li>里氏替换原则：子类可以替换父类</li><li>依赖倒置原则：要依赖与抽象，而不是具体实现；针对接口编程，不要针对实现编程</li><li>接口隔离原则：使用多个专门的接口比使用单一的总接口要好</li><li>组合重用原则：要尽量使用组合，而不是继承关系达到重用的目的</li><li>迪米特原则（最少知识法则）：一个对象应当对其他对象有尽可能少的了解</li></ul></li></ul><h3 id="UML"><a class="header-anchor" href="#UML"></a>UML</h3><ul><li>面向对象<ul><li>Booch</li><li>OOSE</li><li>OMT</li></ul></li><li>面向数据结构<ul><li>Jackson</li><li>结构化方法</li></ul></li><li>结构图<ul><li><strong>类图</strong><ul><li>依赖关系：一个事件发生变化影响另一个事件</li><li>泛化关系：特殊/一般关系</li><li>关联关系：描述了一组链，链是对象之间的连接</li><li>聚合关系：整体与部分生命周期<strong>不同</strong>（部分离开整体后还能用）</li><li>组合关系：整体与部分生命周期<strong>相同</strong>（部分离开整体后都不能用了）</li><li>实现关系：接口与类之间的关系</li><li><img src="https://img.kedr.cc/picbed/20191107214655.png" alt=""></li></ul></li><li>对象图</li><li>包图</li><li>组合结构图</li><li>构件图</li><li>部署图：软硬件之间的映射</li><li>制品图</li></ul></li><li>行为图<ul><li><strong>用例图：系统与外部参与者的交互</strong></li><li>顺序图：强调按时间顺序</li><li>通信图（协作图）</li><li>定时图</li><li>状态图</li><li>活动图</li><li>交互概览图</li></ul></li><li>设计模式<ul><li>创建型模式<ul><li><strong>工厂方法模式（factory）</strong>：动态生产对象</li><li>抽象方法模式（abstract）：生产成系列对象</li><li>原型模式（prototype）：克隆对象</li><li><strong>单例模式</strong>（singleton）：单实例</li><li>构建器模式（builder）：将复杂类的表示与构造相分离</li></ul></li><li>结构型模式<ul><li><strong>适配器模式</strong>（adapter）：转换接口</li><li><strong>桥接模式</strong>（bridge）：继承树拆分</li><li><strong>组合模式</strong>（composite）：树形目录结构</li><li><strong>装饰模式</strong>（decorator）：附加职责</li><li>外观模式（facade）：对外统一接口</li><li>享元模式（flyweight）：文章共享文字对象</li><li>代理模式（proxy）</li></ul></li><li>行为型模式<ul><li><strong>职责链模式</strong>（chain of responsibility）：传递职责</li><li>**命令模式（command）：**日志记录，可撤销</li><li>解释器模式（interpreter）：虚拟机的机制</li><li>迭代器模式（iterator）：数据库数据集</li><li>中介者模式（mediator）：不直接引用</li><li>备忘录模式（memento）</li><li><strong>观察者模式</strong>（observer）：联动</li><li>状态模式（state）：状态改变类的行为</li><li><strong>策略模式</strong>（strategy）：多方案切换</li><li>模板方法模式（template）</li><li>访问者模式（visitor）</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点四</title>
    <link href="/posts/3876493671/"/>
    <url>/posts/3876493671/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点四"><a class="header-anchor" href="#中级软考知识点四"></a>中级软考知识点四</h2><h3 id="系统开发基础"><a class="header-anchor" href="#系统开发基础"></a>系统开发基础</h3><ul><li>软件开发模型<ul><li>瀑布模型：每个阶段都有相应的产出，适用于需求较明确的项目;<ul><li>软件计划：可行性分析</li><li>需求分析</li><li>软件设计：概要设计、详细设计</li><li>程序编码</li><li>软件测试</li><li>运行维护</li></ul></li><li>V模型：在瀑布模型的基础上改良，重视测试;</li><li>喷泉模型：各阶段并行，管理难度加大;</li><li>原型模型：用户对需求不清楚;</li><li>演化模型</li><li>螺旋模型：在瀑布模型和原型模型的基础上，有风险分析;</li><li>统一过程(RUP)：用例驱动，以架构为中心，迭代和增量，初始-&gt;细化-&gt;构建-&gt;交付;</li><li>敏捷方法<ul><li><img src="https://img.kedr.cc/picbed/20191106213353.png" alt=""></li><li>自适应开发</li><li>水晶方法</li><li>特性驱动开发</li><li>极限编程(XP)</li></ul></li></ul></li><li>软件开发方法<ul><li>结构化方法</li><li>原型法</li><li>面向对象方法：喷泉模型</li><li>面向服务方法：SOA</li><li>面向数据结构方法：Jackson</li></ul></li><li>需求分析<ul><li>数据流图（DFD）</li><li>数据字典（DD）</li></ul></li><li>软件设计<ul><li>高内聚低耦合</li><li>内聚类型又高到低为：功能、顺序、通信、过程、时间、逻辑、偶然</li><li>耦合类型又低到高为：非直接、数据、标记、控制、外部、公共、内容</li></ul></li><li>软件测试<ul><li>动态测试<ul><li>黑盒测试<ul><li>等价类划分</li><li>边界值分析</li><li>错误推测</li><li>因果图</li></ul></li><li>白盒测试<ul><li>语句覆盖</li><li>判定覆盖</li><li>条件覆盖</li><li>条件判定覆盖</li><li>路径覆盖</li></ul></li><li>灰盒测试</li></ul></li><li>静态测试</li><li>Mccabe复杂度<ul><li>V(G)=m-n+2，m为有向弧数量，n为节点数</li></ul></li></ul></li><li>软件维护<ul><li>可维护性因素决定<ul><li>可理解性</li><li>可测试性</li><li>可修改性</li></ul></li><li>软件维护类型<ul><li>改正性维护：发布时就有问题</li><li>适应性维护：外部环境变化</li><li>预防性维护</li><li>完善性维护：扩充功能和改善性能而进行修改</li></ul></li><li>软件质量保证<ul><li>功能性</li><li>可靠性</li><li>易用性</li><li>效率</li><li>维护性</li><li>可移植性</li></ul></li><li>软件过程改进CMMI<ul><li>初始级：有大佬</li><li>可管理级：纪律化</li><li>已定义级：标准一致</li><li>定量管理级：可预测</li><li>优化管理级：不断改进</li></ul></li><li>项目管理<ul><li>时间管理<ul><li>关键路径</li><li>甘特图</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点三</title>
    <link href="/posts/2883384697/"/>
    <url>/posts/2883384697/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点三"><a class="header-anchor" href="#中级软考知识点三"></a>中级软考知识点三</h2><h3 id="计算机网络"><a class="header-anchor" href="#计算机网络"></a>计算机网络</h3><ul><li>OSI七层模型<ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层：TCP，UDP</li><li>网络层：路由器，三层交换机</li><li>数据链路层：网桥，交换机，网卡</li><li>物理层：中继器，集线器（Hub）</li></ul></li><li>TCP/IP模型<ul><li>应用层：对应应用层，表示层和会话层</li><li>传输层：对应传输层</li><li>网际层：对应网络层</li><li>网络接口层：对应数据链路层和物理层</li></ul></li><li>UDP<ul><li>SNMP</li><li>DNS</li><li>DHCP</li><li>TFTP</li></ul></li><li>TCP<ul><li>Telnet</li><li>SMTP</li><li>FTP</li><li>HTTP</li><li>POP3</li></ul></li><li>IP地址<ul><li>A类0~127.0~255.0~255.0~255，还有24位主机号</li><li>B类128~291.0~255.0~255.0~255，还有16位主机号</li><li>C类192~223.0~255.0~255.0~255，还有8位主机号</li></ul></li><li>数字签名<ul><li>发送方使用私钥加密生成签名</li><li>接收方使用发送方的公钥解密验证签名</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点二</title>
    <link href="/posts/3917505396/"/>
    <url>/posts/3917505396/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点二"><a class="header-anchor" href="#中级软考知识点二"></a>中级软考知识点二</h2><h3 id="数据库系统"><a class="header-anchor" href="#数据库系统"></a>数据库系统</h3><ul><li><p>关系代数</p><ul><li>笛卡尔积</li><li>投影（π）：列</li><li>选择（δ）：行</li><li>自然连接：相同属性只保留一个，去掉重复记录</li></ul></li><li><p>规范化理论</p><ul><li>部分函数依赖：设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。</li><li>完全函数依赖：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。</li><li>传递函数依赖：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。</li><li>键<ul><li>候选键：唯一标识元组，且无冗余</li><li>主键：候选键中任选一个</li><li>外键：其他关系的主键</li><li>求候选键时将关系转化为有向图，找入度为0的节点，若没有找可以走完全图的节点</li></ul></li><li>主属性：组成候选码的属性就是主属性</li><li>非主属性：其他的就是非主属性</li><li>第一范式：在关系模式中，所有属性不可再分（列不能再分）</li><li>第二范式：在第一范式的基础上，所有非主属性完全依赖候选键（没有部分函数依赖）</li><li>第三范式：在第二范式的基础上，没有传递函数依赖</li><li>BC范式<ul><li>在第三范式的基础上</li><li>所有非主属性对每一个码都是完全函数依赖、</li><li>所有主属性对每一个不包含它的码，也是完全函数依赖</li><li>没有任何属性完全函数依赖与非码的任何一组属性</li><li>简单来说就是，消除主属性对候选键的部分和传递函数依赖</li></ul></li></ul></li><li><p>事务</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持续性</li></ul></li><li><p>并发控制</p><ul><li>产生的问题<ul><li>丢失更新</li><li>不可重复读问题</li><li>读脏数据</li></ul></li><li>解决方案（封锁协议）<ul><li>S封锁：共享锁（读锁）</li><li>X封锁：排它锁（写锁）</li><li>两段锁协议</li></ul></li><li>死锁</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中级软考知识点一</title>
    <link href="/posts/3523235293/"/>
    <url>/posts/3523235293/</url>
    
    <content type="html"><![CDATA[<h2 id="中级软考知识点一"><a class="header-anchor" href="#中级软考知识点一"></a>中级软考知识点一</h2><p>准备2019年11月9日的中级软考，临时抱个佛脚。</p><h3 id="浮点的运算"><a class="header-anchor" href="#浮点的运算"></a>浮点的运算</h3><ul><li>一般尾数用补码，阶码用移码表示;</li><li>阶码的位数决定数的表示范围，位数越多范围越大;</li><li>尾数的位数决定数的有效精度，位数越多精度越高;</li><li>对阶时，小数向大数看齐;</li><li>对阶是通过较小数的尾数右移实现的;</li></ul><h3 id="计算机结构"><a class="header-anchor" href="#计算机结构"></a>计算机结构</h3><ul><li>计算机基本组成：运算器、控制器、存储器、输入设备、输出设备;</li><li>运算器：算数逻辑单位、累加寄存器、数据缓冲寄存器;</li><li>控制器：程序计数器、指令寄存器、指令译码器、时序部件;</li></ul><h3 id="寻址方式"><a class="header-anchor" href="#寻址方式"></a>寻址方式</h3><ul><li>立即寻址：操作数直接在指令中，速度快，灵活性差;</li><li>直接寻址：指令中存放的是操作数的地址;</li><li>间接寻址：指令中存放了一个地址，这个地址对应的内容是操作数的地址;</li><li>寄存器寻址：寄存器存放操作数;</li><li>寄存器间寻址：寄存器内存放的是操作数的地址;</li></ul><h3 id="指令集"><a class="header-anchor" href="#指令集"></a>指令集</h3><ul><li>复杂指令集CISC：复杂，指令数量多，频率差别大，多寻址;</li><li>精简指令集RISC：精简，指令数量少，操作寄存器，单周期，少寻址，多通用寄存器，流水线;</li></ul><h3 id="流水线"><a class="header-anchor" href="#流水线"></a>流水线</h3><ul><li><p>概念：在程序执行时多条指令重叠进行操作的一种准并行实现技术;</p></li><li><p>流程：取指，分析，执行;</p></li><li><p>计算方式：<img src="https://img.kedr.cc/picbed/20191103145700.png" alt=""></p></li><li><p>流水线的吞吐率是指在单位时间内流水线完成的任务数量或输出的结果数量，攻势如下：<img src="https://img.kedr.cc/picbed/20191103150025.png" alt=""></p></li><li><p>流水线最大吞吐率：1/△t;</p></li></ul><h3 id="层次化存储结构"><a class="header-anchor" href="#层次化存储结构"></a>层次化存储结构</h3><ul><li>使用cache改善系统性能的依据是程序的局部性原理（防止抖动）;</li><li>结果cache的程序总访问时间=cache命中率*cache周期时间+cache未命中率*主存储器周期时间;</li></ul><h3 id="编址与计算"><a class="header-anchor" href="#编址与计算"></a>编址与计算</h3><ul><li><p>例.若内存地址区间炜4000H~43FFH，每个存储单位内科存储16位二进制数，该内存区域用4片存储器芯片构成，则构成该内存所用的存储器芯片的容量是多少？</p><p>解：总容量=(43FFH-4000H+1)*16=(4400H-4000H)<em>16=400H</em>16=1024*16 bit</p><p>每片的容量=总容量/总片数=1024*16/4=4*1024=4kb</p></li><li><p>数据总线：CPU与内存之间数据传递;</p></li><li><p>地址总线：内存之间存储数据地址;</p></li><li><p>控制总线：将微处理器控制单元的信号传送给周边设备;</p></li><li><p>串联系统可靠性计算公式：R=R1*R2*R3*…*Rn;</p></li><li><p>并联系统可靠性计算公式：R=1-(1-R1)*(1-R2)*…*(1-Rn);</p></li><li><p>奇偶校验码：可检查1位的错误，不可纠错;</p></li><li><p>循环校验码：可检错，不可纠错;</p></li><li><p>海明校验码：可检错，可纠错;</p></li></ul><h3 id="进程管理"><a class="header-anchor" href="#进程管理"></a>进程管理</h3><ul><li>PV操作中，P是申请资源的操作，V是释放资源的操作;</li><li>总共m个共享资源，n个进程，每个进程需要k个资源，当m&gt;(k-1)*n时，进程不会死锁;</li></ul><h3 id="存储管理"><a class="header-anchor" href="#存储管理"></a>存储管理</h3><ul><li><p>逻辑地址=页号+页内地址;</p></li><li><p>物理地址=物理块号（页帧地址）+页内地址;</p></li><li><p>页面置换算法</p><ul><li>最优算法：将永不使用的空间清除掉（太过理想）;</li><li>随机算法：随机清除空间;</li><li>先进先出：可能产生抖动;</li><li>最近最少使用算法：目前计算机使用的算法;</li><li>时间局部性：刚被访问的内容，立即又被访问;</li><li>空间局部性：刚被访问的内容，临近的空间很快被访问;</li></ul></li><li><p>磁盘管理</p><ul><li>存取时间=寻道时间(磁头移动到磁道所需时间)+等待时间(等待读写的扇区转到磁头下方所用时间);</li><li>磁盘最外面是0磁道;</li><li>先来先服务算法;</li><li>最短寻道时间优先;</li><li>扫描算法(电梯算法);</li><li>循环扫描算法;</li></ul></li></ul><h3 id="作业管理"><a class="header-anchor" href="#作业管理"></a>作业管理</h3><ul><li>作业调度算法<ul><li>先来先服务算法;</li><li>时间片轮转算法;</li><li>短作业优先算法;</li><li>最高优先权优先算法;</li><li>高响应比优先算法，高响应比=(作业等待时间+作业处理时间)/作业处理时间;</li></ul></li><li>索引文件结构<ul><li>直接索引指向一个物理盘块(1Kb)；</li><li>索引结构共13个（0~12）索引节点;</li><li>0~9的10个索引节点使用直接索引，容量10Kb，地址0~10239;</li><li>10索引节点使用一级间接索引，容量1Kb*256=256Kb;</li><li>11索引节点使用二级间接索引，容量为256Kb*256=64Mb;</li><li>12索引节点使用三级间接索引，容量为64Mb*256=16Gb;</li></ul></li><li>树型目录结构<ul><li>求相对路径和绝对路径;</li></ul></li></ul><h3 id="设备管理"><a class="header-anchor" href="#设备管理"></a>设备管理</h3><ul><li>数据传输控制方式(越往下效率越高)<ul><li>程序控制方式：分为无条件传送和程序查询方式，方法简单，硬件开销小，I/O能力弱，严重影响CPU利用率;</li><li>程序中断方式：与上着相比提高了传输请求的响应速度;</li><li>DMA方式：是为了在主存与外设之间实现高速、批量数据交换而设置的，比上两者高效;</li><li>通道方式;</li><li>I/O处理机;</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac下破解NavicatPremium</title>
    <link href="/posts/3499891971/"/>
    <url>/posts/3499891971/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac下破解NavicatPremium"><a class="header-anchor" href="#Mac下破解NavicatPremium"></a>Mac下破解NavicatPremium</h2><h3 id="1-安装NavicatPremium"><a class="header-anchor" href="#1-安装NavicatPremium"></a>1.安装NavicatPremium</h3><p>先去navicat中文官网下载14天试用版。</p><blockquote><p><a href="https://www.navicat.com.cn/download/navicat-premium">https://www.navicat.com.cn/download/navicat-premium</a></p></blockquote><p>安装全部默认。</p><h3 id="2-安装navicat-keygen"><a class="header-anchor" href="#2-安装navicat-keygen"></a>2.安装<a href="https://github.com/DoubleLabyrinth/navicat-keygen">navicat-keygen</a></h3><ul><li><p>在安装keygen之前，要确保已经安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>openssl<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>capstone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>keystone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>rapidjson<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libplist<br></code></pre></td></tr></table></figure><p>你可以通过brew来安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>openssl<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>capstone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>keystone<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>rapidjson<br>$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>libplist<br></code></pre></td></tr></table></figure></li><li><p>从github上克隆keygen项目：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone -b mac --single-branch https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/DoubleLabyrinth/</span>navicat-keygen.git<br></code></pre></td></tr></table></figure></li><li><p>编译项目：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> cd navicat-keygen<br><span class="hljs-symbol">$</span> make <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p>编译完成之后，你可以在<code>bin/</code>目录找到<code>navicat-keygen</code>和<code>navicat-patcher</code>两个可执行文件。</p></li></ul><h3 id="3-开始破解"><a class="header-anchor" href="#3-开始破解"></a>3.开始破解</h3><p>在开始破解之前，请先备份好数据库以及一些重要的数据。</p><h4 id="创建证书"><a class="header-anchor" href="#创建证书"></a>创建证书</h4><ul><li>1.打开<code>钥匙串访问</code>应用</li><li>2.系统左上角，钥匙串访问&gt;证书助理&gt;创建证书颁发机构</li><li>3.填写证书名称，如<code>foobar</code>，用户证书选择代码签名，创建。</li><li>4.在钥匙串列表中点击<code>系统</code>，在右侧搜索刚才新建的证书名称。</li><li>5.右键选择<code>显示简介</code>，展开<code>信任</code>树节点，设置<code>使用此证书时</code>为<code>始终信任</code>。</li></ul><h4 id="生成激活码"><a class="header-anchor" href="#生成激活码"></a>生成激活码</h4><ul><li><p>1.替换navicat激活公钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/navicat-patcher /</span>Applications<span class="hljs-regexp">/Navicat\ Premium.app/</span><br></code></pre></td></tr></table></figure><p>成功会提示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br><span class="hljs-strong"><span class="hljs-emphasis">*   Patch has been done successfully. Have fun and enjoy~~   *</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">*    DO NOT FORGET TO SIGN NAVICAT BY YOUR CERTIFICATE!!!    *</span></span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br></code></pre></td></tr></table></figure><ul><li><p>若安装的Navicat Premium版本小于<code>12.0.24</code>，</p><p>需要使用<code>openssl</code>生成<code>rpk</code>公钥文件：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>openssl genrsa -<span class="hljs-keyword">out</span> RegPrivateKey.pem <span class="hljs-number">2048</span><br><span class="hljs-variable">$ </span>openssl rsa -in RegPrivateKey.pem -pubout -<span class="hljs-keyword">out</span> rpk<br></code></pre></td></tr></table></figure><p>再将<code>rpk</code>文件放到<code>/Applications/Navicat Premium.app/Contents/Resources/</code>目录下</p></li></ul></li><li><p>2.用证书添加信任</p><p>证书名为刚才新创建的证书名称，我的是<code>foobar</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ codesign -f -s <span class="hljs-string">&quot;foobar&quot;</span> <span class="hljs-regexp">/Applications/</span>Navicat\ Premium.app/<br></code></pre></td></tr></table></figure></li><li><p>3.生成激活码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ .<span class="hljs-regexp">/navicat-keygen ./</span>RegPrivateKey.pem<br></code></pre></td></tr></table></figure><p>语言根据安装的版本选择，如安装英文版选择0，中文版选择1；</p><p>版本号选择12；</p><p>之后终端上会显示系列号：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Serial <span class="hljs-built_in">number</span>:<br>NAVG-Z5H9-NK2L-MAZJ<br></code></pre></td></tr></table></figure><p>继续在终端上输入<code>name</code>和<code>organization</code>；</p><p>不要关闭终端，关闭网络连接，打开navicat premium，点击注册，输入刚才生成的序列号，点击激活，点击手动激活，复制请求码在终端中粘贴，敲两次回车；</p><p>复制生成的激活码，粘贴到navicat premium中并确定；</p><p>到此破解完成。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>install</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java I/O学习笔记</title>
    <link href="/posts/1061884183/"/>
    <url>/posts/1061884183/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-I-O学习笔记"><a class="header-anchor" href="#Java-I-O学习笔记"></a>Java I/O学习笔记</h1><h2 id="1-Java-I-O中常用的类"><a class="header-anchor" href="#1-Java-I-O中常用的类"></a>1.Java I/O中常用的类</h2><p>在java源码的io包中常用的类为File、OutputStream、Inputstream、Writer、Reader、RandomAccessFile。</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>File</td><td>文件类</td></tr><tr><td>OutputStream</td><td>字节输出流</td></tr><tr><td>Inputstream</td><td>字节输入流</td></tr><tr><td>Writer</td><td>字符输出流</td></tr><tr><td>Reader</td><td>字符输入流</td></tr><tr><td>RandomAccessFile</td><td>随机存取文件</td></tr></tbody></table><h2 id="2-字节流与字符流"><a class="header-anchor" href="#2-字节流与字符流"></a>2.字节流与字符流</h2><blockquote><p>什么是字节流？</p><p>字节流–传输过程中，传输数据的最基本单位是字节的流。</p><p>什么是字符流？</p><p>字符流–传输过程中，传输数据的最基本单位是字符的流。</p></blockquote><h2 id="3-节点流和处理流"><a class="header-anchor" href="#3-节点流和处理流"></a>3.节点流和处理流</h2><blockquote><p>节点流：可以从或向一个特定的地方（节点）读写数据。如FileReader。</p><p>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</p></blockquote><h2 id="4-常用字节输入流"><a class="header-anchor" href="#4-常用字节输入流"></a>4.常用字节输入流</h2><p>常用的字节输入流包括Inputstream以及Inputstream的子类。</p><p><img src="https://wx2.sinaimg.cn/large/d67ca93ely1g4yb6pwpmij20qo0dyabr.jpg" alt="IO字节输入流"></p><h2 id="5-常用字节输出流"><a class="header-anchor" href="#5-常用字节输出流"></a>5.常用字节输出流</h2><p>常用字节输出流包括OutputStream以及OutputStream的子类。</p><p><img src="https://ws1.sinaimg.cn/large/d67ca93ely1g4yb6pskqzj20qo0asgmu.jpg" alt="IO字节输出流"></p><h2 id="6-常用字符输入流"><a class="header-anchor" href="#6-常用字符输入流"></a>6.常用字符输入流</h2><p>常用字符输入流包括Reader以及Reader的子类。</p><p><img src="https://wx1.sinaimg.cn/large/d67ca93ely1g4yb6poa62j20qo0ga0uk.jpg" alt="IO字符输入流"></p><h2 id="7-常用字符输出流"><a class="header-anchor" href="#7-常用字符输出流"></a>7.常用字符输出流</h2><p>常用字符输出流包括Writer以及Writer的子类。</p><p><img src="https://ws2.sinaimg.cn/large/d67ca93ely1g4yb6ojw72j20nc0gzabr.jpg" alt="IO字符输出流"></p><h2 id="8-RandomAccessFile类"><a class="header-anchor" href="#8-RandomAccessFile类"></a>8.RandomAccessFile类</h2><p>RandomAccessFile（随机访问文件）类是专门用来处理文件的类。<code>随机访问</code>中的<code>随机</code>指的是可以跳转到文件的任意位置处读写数据。</p><h3 id="8-1读写模式"><a class="header-anchor" href="#8-1读写模式"></a>8.1读写模式</h3><table><thead><tr><th>模式</th><th>作用</th></tr></thead><tbody><tr><td>r</td><td>表示以只读方式打开，调用结果对象的任何write方法都将导致抛出IOException</td></tr><tr><td>rw</td><td>打开以便读取和写入，如果该文件尚不存在，则尝试创建该文件</td></tr><tr><td>rws</td><td>打开以便读取和写入，相对于&quot;rw&quot;，还要求对文件内容或元数据的每个更新都同步写入到底层存储设备</td></tr><tr><td>rwd</td><td>打开以便读取和写入，相对于&quot;rw&quot;，还要求对文件内容的每个更新都同步写入到底层存储设备</td></tr></tbody></table><h3 id="8-2常用方法"><a class="header-anchor" href="#8-2常用方法"></a>8.2常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">getFilePointer</span><span class="hljs-params">()</span>;<span class="hljs-comment">//返回此文件中的当前偏移量</span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;<span class="hljs-comment">//返回此文件的长度</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>;<span class="hljs-comment">//从此文件中读取一个数据字节</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span>;<span class="hljs-comment">//读取byte数组长度的字节到byte数组中，到达文末返回-1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<span class="hljs-comment">//将最多len个数据字节从此文件的指定初始偏移量off读入byte数组</span><br><br>String <span class="hljs-title function_">readLine</span><span class="hljs-params">()</span>;<span class="hljs-comment">//从此文件读取文本的下一行</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span>;<span class="hljs-comment">//向此文件写入指定的字节</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span>;<span class="hljs-comment">//将byte数组长度个字节从指定byte数组写入到此文件中</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<span class="hljs-comment">//将len个字节从指定byte数组写入到此文件，并从偏移量off处开始</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>I/O</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>618配台电脑</title>
    <link href="/posts/854505700/"/>
    <url>/posts/854505700/</url>
    
    <content type="html"><![CDATA[<h1 id="618配台电脑"><a class="header-anchor" href="#618配台电脑"></a>618配台电脑</h1><p>攒了大半年的配置，终于能在几个小时之后的618化为现实了。</p><p>以下就是我的配置：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">CPU</span>：<span class="hljs-built_in">R5</span> <span class="hljs-number">2600</span><br>主板：微星B450M MORTAR<br>显卡：蓝宝石RX580 白金版OC<br>内存：十铨火神DDR4 <span class="hljs-number">3000</span> 8G*<span class="hljs-number">2</span><br>固态硬盘：西部数据SN500<br>机械硬盘：西部数据蓝盘<span class="hljs-number">2T</span><br>散热：大镰刀赤兔马<br>电源：酷冷至尊GX550 550W<br>机箱：先马黑洞标准版<br></code></pre></td></tr></table></figure><p>AMD,YES! 😄</p>]]></content>
    
    
    <categories>
      
      <category>DIY</category>
      
      <category>装机</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Next博客搭建</title>
    <link href="/posts/997970397/"/>
    <url>/posts/997970397/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-Next博客搭建"><a class="header-anchor" href="#Hexo-Next博客搭建"></a>Hexo+Next博客搭建</h2><h3 id="1-安装Hexo"><a class="header-anchor" href="#1-安装Hexo"></a>1.安装Hexo</h3><p>在安装Hexo前，需确保已安装以下程序：</p><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Should be at least nodejs 6.9)</p></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>使用npm进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="2-建站"><a class="header-anchor" href="#2-建站"></a>2.建站</h3><p>安装完成之后，在你的博客目录下初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br></code></pre></td></tr></table></figure><p>进入博客目录安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><h3 id="3-配置站点"><a class="header-anchor" href="#3-配置站点"></a>3.配置站点</h3><p>打开根目录下的_config.yml文件</p><p>配置网站基础信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">zhuweitung&#x27;s</span> <span class="hljs-string">blog</span> <span class="hljs-comment"># 网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">我们的征途是星辰大海。</span> <span class="hljs-comment"># 网站副标题</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">zhuweitung</span> <span class="hljs-comment"># 您的名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span> <span class="hljs-comment"># 网站使用的语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span> <span class="hljs-comment"># 网站时区</span><br></code></pre></td></tr></table></figure><p>配置新建文章的文件名格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year-:month-:day-:title.md</span> <span class="hljs-comment"># 例如.2019-06-02-xxx.md</span><br></code></pre></td></tr></table></figure><h3 id="4-使用Github-Pages进行托管"><a class="header-anchor" href="#4-使用Github-Pages进行托管"></a>4.使用Github-Pages进行托管</h3><p>新建项目，项目名必须要遵守格式：<a href="http://xn--eqr924acs7a.github.io">账户名.github.io</a>，并勾选Initialize this repository with a README。</p><p>建完之后，在账户下的 <code>settings</code> &gt;&gt; <code>SSH and GPG keys</code> 中添加 SSH key，内容为~/.ssh/id_rsa_pub 文件中的内容。</p><p>测试添加ssh是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>复制github项目的ssh地址，并配置_config.yml #Deployment 项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:zhuweitung/zhuweitung.github.io.git</span> <span class="hljs-comment">#github</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>hexo生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>在本地预览效果（默认localhost:4000）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>部署到github上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>通过xxx.github.io查看你的博客</p><h3 id="5-安装next"><a class="header-anchor" href="#5-安装next"></a>5.安装next</h3><p>进入根目录，将hexo-theme-next项目clone到 themes/next下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> hexo<br>$ git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>配置<code>站点配置文件</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br>theme: next<br></code></pre></td></tr></table></figure><p>验证主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo s<br></code></pre></td></tr></table></figure><h3 id="6-主题基本配置"><a class="header-anchor" href="#6-主题基本配置"></a>6.主题基本配置</h3><p>新增分类和标签页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page tags<br>$ hexo new page categories<br></code></pre></td></tr></table></figure><p>在<code>source\tags\index.md</code>文件头部中增加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">type: &quot;tags&quot;<br>comments: false<br></code></pre></td></tr></table></figure><p>在<code>source\categories\index.md</code>文件头部中增加</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">type: &quot;categories&quot;<br>comments: false<br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置标签和分类的路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置个人社交网站</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">social:</span><br>  <span class="hljs-attr">GitHub:</span> <span class="hljs-string">https://github.com/zhuweitung</span> <span class="hljs-string">||</span> <span class="hljs-string">github</span><br>  <span class="hljs-attr">E-Mail:</span> <span class="hljs-string">mailto:zhuweitung@foxmail.com</span> <span class="hljs-string">||</span> <span class="hljs-string">envelope</span><br>  <span class="hljs-attr">Weibo:</span> <span class="hljs-string">https://weibo.com/CarolBruce</span> <span class="hljs-string">||</span> <span class="hljs-string">weibo</span><br>  <span class="hljs-attr">Google:</span> <span class="hljs-string">https://plus.google.com/zhuweitung</span> <span class="hljs-string">||</span> <span class="hljs-string">google</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置侧边栏个人头像</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Sidebar Avatar</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">https://ws3.sinaimg.cn/large/d67ca93ely1g3n01pbc5dj2046046jrw.jpg</span> <br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中配置博客中的代码块可复制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">show_result:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">flat</span><br></code></pre></td></tr></table></figure><p>设置网站动态背景</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/next<br>$ git <span class="hljs-built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="hljs-built_in">source</span>/lib/canvas-nest<br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中启用canvas_nest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">canvas_nest:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="7-安装第三方插件"><a class="header-anchor" href="#7-安装第三方插件"></a>7.安装第三方插件</h3><h4 id="a-添加本地搜索功能"><a class="header-anchor" href="#a-添加本地搜索功能"></a>a.添加本地搜索功能</h4><p>安装hexo-generator-search依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-generator-search --save<br></code></pre></td></tr></table></figure><p>修改<code>站点配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Search </span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>中启用本地搜索</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">trigger:</span> <span class="hljs-string">auto</span><br>  <span class="hljs-attr">top_n_per_article:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="b-用Leancloud统计文章阅读量"><a class="header-anchor" href="#b-用Leancloud统计文章阅读量"></a>b.用Leancloud统计文章阅读量</h4><p><code>注册Leancloud</code>&gt;&gt;<code>创建应用</code>&gt;&gt;<code>开发版</code>&gt;&gt;<code>创建</code></p><p>创建的应用上点击<code>存储</code>，新建一个名为<code>Counter</code>的表，选择<code>无限制</code>，创建Class。</p><p><code>设置</code> &gt;&gt;<code>应用Key</code>，复制<code>App ID</code>和<code>App Key</code>。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">***</span> <span class="hljs-comment"># 你的app_id</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">***</span> <span class="hljs-comment"># 你的app_key</span><br></code></pre></td></tr></table></figure><p>将自己的博客域名（<a href="https://zhuweitung.github.io">https://zhuweitung.github.io</a>）加入<code>设置</code>&gt;&gt;<code>安全中心</code>&gt;&gt;<code>Web安全域名</code>中。</p><h4 id="c-用Valine实现评论系统"><a class="header-anchor" href="#c-用Valine实现评论系统"></a>c.用Valine实现评论系统</h4><p>Valine使用的也是Leancloud的app_id和app_key。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">***</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">***</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">欢迎留言</span><br></code></pre></td></tr></table></figure><h4 id="d-添加字数和阅读时间统计"><a class="header-anchor" href="#d-添加字数和阅读时间统计"></a>d.添加字数和阅读时间统计</h4><p>安装<code>hexo-symbols-count-time</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-symbols-count-time --save<br></code></pre></td></tr></table></figure><p>修改<code>站点配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 字数统计</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">symbols:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 文章字数</span><br>  <span class="hljs-attr">time:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 阅读时长</span><br>  <span class="hljs-attr">total_symbols:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 所有文章总字数</span><br>  <span class="hljs-attr">total_time:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 所有文章阅读中时长</span><br></code></pre></td></tr></table></figure><p>修改`主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">awl:</span> <span class="hljs-number">4</span><br>  <span class="hljs-attr">wpm:</span> <span class="hljs-number">275</span><br></code></pre></td></tr></table></figure><h4 id="e-嵌入豆瓣个人主页"><a class="header-anchor" href="#e-嵌入豆瓣个人主页"></a>e.嵌入豆瓣个人主页</h4><p>安装<code>hexo-douban</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-douban --save<br></code></pre></td></tr></table></figure><p>在<code>站点配置文件</code>中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">douban:</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">你的豆瓣id</span><br>  <span class="hljs-attr">builtin:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">book:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;图书&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;书籍是人类进步的阶梯。&#x27;</span><br>  <span class="hljs-attr">movie:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;电影&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;人生就是一部电影。&#x27;</span><br>  <span class="hljs-attr">game:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;游戏&#x27;</span><br>    <span class="hljs-attr">quote:</span> <span class="hljs-string">&#x27;人生就是一场游戏。&#x27;</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">10000</span> <br></code></pre></td></tr></table></figure><p>在<code>主题配置文件</code>的menu中添加路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span><br>  <span class="hljs-attr">movies:</span> <span class="hljs-string">/movies/</span> <span class="hljs-string">||</span> <span class="hljs-string">film</span><br></code></pre></td></tr></table></figure><p>使用一下命令生成豆瓣电影页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo douban -m<br></code></pre></td></tr></table></figure><p>由于<code>hexo douban</code> 和<code>hexo deploy</code>都是<code>d</code>开头，所以部署时只能使用<code>hexo deploy</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HelloWorld</title>
    <link href="/posts/2004290681/"/>
    <url>/posts/2004290681/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
